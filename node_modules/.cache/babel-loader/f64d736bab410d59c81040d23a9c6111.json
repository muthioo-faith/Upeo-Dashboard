{"ast":null,"code":"/*!\nFullCalendar v5.11.3\nDocs & License: https://fullcalendar.io/\n(c) 2022 Adam Shaw\n*/\nimport './main.css';\nimport { hasBgRendering, Splitter, createFormatter, createElement, ViewContextType, RenderHook, BaseComponent, createRef, diffDays, buildNavLinkAttrs, WeekNumberRoot, getStickyHeaderDates, ViewRoot, SimpleScrollGrid, getStickyFooterScrollbar, NowTimer, NowIndicatorRoot, renderScrollShim, DateComponent, rangeContainsMarker, startOfDay, asRoughMs, createDuration, RefMap, PositionCache, MoreLinkRoot, setRef, SegHierarchy, groupIntersectingEntries, buildEntryKey, binarySearch, getEntrySpanEnd, StandardEvent, DayCellContent, Fragment, getSegMeta, memoize, sortEventSegs, DayCellRoot, buildIsoString, computeEarliestSegStart, buildEventRangeKey, BgEvent, renderFill, addDurations, multiplyDuration, wholeDivideDurations, intersectRanges, Slicer, formatIsoTimeString, DayHeader, DaySeriesModel, DayTableModel, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\nimport { DayTable } from '@fullcalendar/daygrid';\nvar AllDaySplitter = /** @class */function (_super) {\n  __extends(AllDaySplitter, _super);\n  function AllDaySplitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AllDaySplitter.prototype.getKeyInfo = function () {\n    return {\n      allDay: {},\n      timed: {}\n    };\n  };\n  AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n    if (dateSpan.allDay) {\n      return ['allDay'];\n    }\n    return ['timed'];\n  };\n  AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n    if (!eventDef.allDay) {\n      return ['timed'];\n    }\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay'];\n    }\n    return ['allDay'];\n  };\n  return AllDaySplitter;\n}(Splitter);\nvar DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short'\n});\nfunction TimeColsAxisCell(props) {\n  var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-label', props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor'];\n  return createElement(ViewContextType.Consumer, null, function (context) {\n    if (!props.isLabeled) {\n      return createElement(\"td\", {\n        className: classNames.join(' '),\n        \"data-time\": props.isoTimeStr\n      });\n    }\n    var dateEnv = context.dateEnv,\n      options = context.options,\n      viewApi = context.viewApi;\n    var labelFormat =\n    // TODO: fully pre-parse\n    options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT : Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) : createFormatter(options.slotLabelFormat);\n    var hookProps = {\n      level: 0,\n      time: props.time,\n      date: dateEnv.toDate(props.date),\n      view: viewApi,\n      text: dateEnv.format(props.date, labelFormat)\n    };\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: options.slotLabelClassNames,\n      content: options.slotLabelContent,\n      defaultContent: renderInnerContent,\n      didMount: options.slotLabelDidMount,\n      willUnmount: options.slotLabelWillUnmount\n    }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n      return createElement(\"td\", {\n        ref: rootElRef,\n        className: classNames.concat(customClassNames).join(' '),\n        \"data-time\": props.isoTimeStr\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\",\n        ref: innerElRef\n      }, innerContent)));\n    });\n  });\n}\nfunction renderInnerContent(props) {\n  return props.text;\n}\nvar TimeBodyAxis = /** @class */function (_super) {\n  __extends(TimeBodyAxis, _super);\n  function TimeBodyAxis() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TimeBodyAxis.prototype.render = function () {\n    return this.props.slatMetas.map(function (slatMeta) {\n      return createElement(\"tr\", {\n        key: slatMeta.key\n      }, createElement(TimeColsAxisCell, __assign({}, slatMeta)));\n    });\n  };\n  return TimeBodyAxis;\n}(BaseComponent);\nvar DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'short'\n});\nvar AUTO_ALL_DAY_MAX_EVENT_ROWS = 5;\nvar TimeColsView = /** @class */function (_super) {\n  __extends(TimeColsView, _super);\n  function TimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.allDaySplitter = new AllDaySplitter(); // for use by subclasses\n    _this.headerElRef = createRef();\n    _this.rootElRef = createRef();\n    _this.scrollerElRef = createRef();\n    _this.state = {\n      slatCoords: null\n    };\n    _this.handleScrollTopRequest = function (scrollTop) {\n      var scrollerEl = _this.scrollerElRef.current;\n      if (scrollerEl) {\n        // TODO: not sure how this could ever be null. weirdness with the reducer\n        scrollerEl.scrollTop = scrollTop;\n      }\n    };\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    _this.renderHeadAxis = function (rowKey, frameHeight) {\n      if (frameHeight === void 0) {\n        frameHeight = '';\n      }\n      var options = _this.context.options;\n      var dateProfile = _this.props.dateProfile;\n      var range = dateProfile.renderRange;\n      var dayCnt = diffDays(range.start, range.end);\n      var navLinkAttrs = dayCnt === 1 // only do in day views (to avoid doing in week views that dont need it)\n      ? buildNavLinkAttrs(_this.context, range.start, 'week') : {};\n      if (options.weekNumbers && rowKey === 'day') {\n        return createElement(WeekNumberRoot, {\n          date: range.start,\n          defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n        }, function (rootElRef, classNames, innerElRef, innerContent) {\n          return createElement(\"th\", {\n            ref: rootElRef,\n            \"aria-hidden\": true,\n            className: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'].concat(classNames).join(' ')\n          }, createElement(\"div\", {\n            className: \"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\",\n            style: {\n              height: frameHeight\n            }\n          }, createElement(\"a\", __assign({\n            ref: innerElRef,\n            className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n          }, navLinkAttrs), innerContent)));\n        });\n      }\n      return createElement(\"th\", {\n        \"aria-hidden\": true,\n        className: \"fc-timegrid-axis\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-axis-frame\",\n        style: {\n          height: frameHeight\n        }\n      }));\n    };\n    /* Table Component Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n    // but DayGrid still needs to have classNames on inner elements in order to measure.\n    _this.renderTableRowAxis = function (rowHeight) {\n      var _a = _this.context,\n        options = _a.options,\n        viewApi = _a.viewApi;\n      var hookProps = {\n        text: options.allDayText,\n        view: viewApi\n      };\n      return (\n        // TODO: make reusable hook. used in list view too\n        createElement(RenderHook, {\n          hookProps: hookProps,\n          classNames: options.allDayClassNames,\n          content: options.allDayContent,\n          defaultContent: renderAllDayInner,\n          didMount: options.allDayDidMount,\n          willUnmount: options.allDayWillUnmount\n        }, function (rootElRef, classNames, innerElRef, innerContent) {\n          return createElement(\"td\", {\n            ref: rootElRef,\n            \"aria-hidden\": true,\n            className: ['fc-timegrid-axis', 'fc-scrollgrid-shrink'].concat(classNames).join(' ')\n          }, createElement(\"div\", {\n            className: 'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : ''),\n            style: {\n              height: rowHeight\n            }\n          }, createElement(\"span\", {\n            className: \"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\",\n            ref: innerElRef\n          }, innerContent)));\n        })\n      );\n    };\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n    };\n    return _this;\n  }\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n  TimeColsView.prototype.renderSimpleLayout = function (headerRowContent, allDayContent, timeContent) {\n    var _a = this,\n      context = _a.context,\n      props = _a.props;\n    var sections = [];\n    var stickyHeaderDates = getStickyHeaderDates(context.options);\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: {\n          content: allDayContent\n        }\n      });\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent:\n        // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          role: \"presentation\",\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }\n    });\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.rootElRef\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        className: ['fc-timegrid'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(SimpleScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        cols: [{\n          width: 'shrink'\n        }],\n        sections: sections\n      }));\n    });\n  };\n  TimeColsView.prototype.renderHScrollLayout = function (headerRowContent, allDayContent, timeContent, colCnt, dayMinWidth, slatMetas, slatCoords) {\n    var _this = this;\n    var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n    var _a = this,\n      context = _a.context,\n      props = _a.props;\n    var stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    var stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    var sections = [];\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: function (arg) {\n            return createElement(\"tr\", {\n              role: \"presentation\"\n            }, _this.renderHeadAxis('day', arg.rowSyncHeights[0]));\n          }\n        }, {\n          key: 'cols',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [{\n          key: 'axis',\n          rowContent: function (contentArg) {\n            return createElement(\"tr\", {\n              role: \"presentation\"\n            }, _this.renderTableRowAxis(contentArg.rowSyncHeights[0]));\n          }\n        }, {\n          key: 'cols',\n          content: allDayContent\n        }]\n      });\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent:\n        // TODO: rename to cellContent so don't need to define <tr>?\n        createElement(\"tr\", {\n          role: \"presentation\",\n          className: \"fc-scrollgrid-section\"\n        }, createElement(\"td\", {\n          colSpan: 2,\n          className: 'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')\n        }))\n      });\n    }\n    var isNowIndicator = context.options.nowIndicator;\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [{\n        key: 'axis',\n        content: function (arg) {\n          return (\n            // TODO: make this now-indicator arrow more DRY with TimeColsContent\n            createElement(\"div\", {\n              className: \"fc-timegrid-axis-chunk\"\n            }, createElement(\"table\", {\n              \"aria-hidden\": true,\n              style: {\n                height: arg.expandRows ? arg.clientHeight : ''\n              }\n            }, arg.tableColGroupNode, createElement(\"tbody\", null, createElement(TimeBodyAxis, {\n              slatMetas: slatMetas\n            }))), createElement(\"div\", {\n              className: \"fc-timegrid-now-indicator-container\"\n            }, createElement(NowTimer, {\n              unit: isNowIndicator ? 'minute' : 'day' /* hacky */\n            }, function (nowDate) {\n              var nowIndicatorTop = isNowIndicator && slatCoords && slatCoords.safeComputeTop(nowDate); // might return void\n              if (typeof nowIndicatorTop === 'number') {\n                return createElement(NowIndicatorRoot, {\n                  isAxis: true,\n                  date: nowDate\n                }, function (rootElRef, classNames, innerElRef, innerContent) {\n                  return createElement(\"div\", {\n                    ref: rootElRef,\n                    className: ['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),\n                    style: {\n                      top: nowIndicatorTop\n                    }\n                  }, innerContent);\n                });\n              }\n              return null;\n            })))\n          );\n        }\n      }, {\n        key: 'cols',\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent\n      }]\n    });\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'axis',\n          content: renderScrollShim\n        }, {\n          key: 'cols',\n          content: renderScrollShim\n        }]\n      });\n    }\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec,\n      elRef: this.rootElRef\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        className: ['fc-timegrid'].concat(classNames).join(' '),\n        ref: rootElRef\n      }, createElement(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: false,\n        colGroups: [{\n          width: 'shrink',\n          cols: [{\n            width: 'shrink'\n          }]\n        }, {\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    });\n  };\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n  TimeColsView.prototype.getAllDayMaxEventProps = function () {\n    var _a = this.context.options,\n      dayMaxEvents = _a.dayMaxEvents,\n      dayMaxEventRows = _a.dayMaxEventRows;\n    if (dayMaxEvents === true || dayMaxEventRows === true) {\n      // is auto?\n      dayMaxEvents = undefined;\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS; // make sure \"auto\" goes to a real number\n    }\n\n    return {\n      dayMaxEvents: dayMaxEvents,\n      dayMaxEventRows: dayMaxEventRows\n    };\n  };\n  return TimeColsView;\n}(DateComponent);\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text;\n}\nvar TimeColsSlatsCoords = /** @class */function () {\n  function TimeColsSlatsCoords(positions, dateProfile, slotDuration) {\n    this.positions = positions;\n    this.dateProfile = dateProfile;\n    this.slotDuration = slotDuration;\n  }\n  TimeColsSlatsCoords.prototype.safeComputeTop = function (date) {\n    var dateProfile = this.dateProfile;\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      var startOfDayDate = startOfDay(date);\n      var timeMs = date.valueOf() - startOfDayDate.valueOf();\n      if (timeMs >= asRoughMs(dateProfile.slotMinTime) && timeMs < asRoughMs(dateProfile.slotMaxTime)) {\n        return this.computeTimeTop(createDuration(timeMs));\n      }\n    }\n    return null;\n  };\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  TimeColsSlatsCoords.prototype.computeDateTop = function (when, startOfDayDate) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when);\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n  };\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  TimeColsSlatsCoords.prototype.computeTimeTop = function (duration) {\n    var _a = this,\n      positions = _a.positions,\n      dateProfile = _a.dateProfile;\n    var len = positions.els.length;\n    // floating-point value of # of slots covered\n    var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration);\n    var slatIndex;\n    var slatRemainder;\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage);\n    slatCoverage = Math.min(len, slatCoverage);\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage);\n    slatIndex = Math.min(slatIndex, len - 1);\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex;\n    return positions.tops[slatIndex] + positions.getHeight(slatIndex) * slatRemainder;\n  };\n  return TimeColsSlatsCoords;\n}();\nvar TimeColsSlatsBody = /** @class */function (_super) {\n  __extends(TimeColsSlatsBody, _super);\n  function TimeColsSlatsBody() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TimeColsSlatsBody.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var options = context.options;\n    var slatElRefs = props.slatElRefs;\n    return createElement(\"tbody\", null, props.slatMetas.map(function (slatMeta, i) {\n      var hookProps = {\n        time: slatMeta.time,\n        date: context.dateEnv.toDate(slatMeta.date),\n        view: context.viewApi\n      };\n      var classNames = ['fc-timegrid-slot', 'fc-timegrid-slot-lane', slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor'];\n      return createElement(\"tr\", {\n        key: slatMeta.key,\n        ref: slatElRefs.createRef(slatMeta.key)\n      }, props.axis && createElement(TimeColsAxisCell, __assign({}, slatMeta)), createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: options.slotLaneClassNames,\n        content: options.slotLaneContent,\n        didMount: options.slotLaneDidMount,\n        willUnmount: options.slotLaneWillUnmount\n      }, function (rootElRef, customClassNames, innerElRef, innerContent) {\n        return createElement(\"td\", {\n          ref: rootElRef,\n          className: classNames.concat(customClassNames).join(' '),\n          \"data-time\": slatMeta.isoTimeStr\n        }, innerContent);\n      }));\n    }));\n  };\n  return TimeColsSlatsBody;\n}(BaseComponent);\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\nvar TimeColsSlats = /** @class */function (_super) {\n  __extends(TimeColsSlats, _super);\n  function TimeColsSlats() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.rootElRef = createRef();\n    _this.slatElRefs = new RefMap();\n    return _this;\n  }\n  TimeColsSlats.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    return createElement(\"div\", {\n      ref: this.rootElRef,\n      className: \"fc-timegrid-slots\"\n    }, createElement(\"table\", {\n      \"aria-hidden\": true,\n      className: context.theme.getClass('table'),\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth,\n        height: props.minHeight\n      }\n    }, props.tableColGroupNode /* relies on there only being a single <col> for the axis */, createElement(TimeColsSlatsBody, {\n      slatElRefs: this.slatElRefs,\n      axis: props.axis,\n      slatMetas: props.slatMetas\n    })));\n  };\n  TimeColsSlats.prototype.componentDidMount = function () {\n    this.updateSizing();\n  };\n  TimeColsSlats.prototype.componentDidUpdate = function () {\n    this.updateSizing();\n  };\n  TimeColsSlats.prototype.componentWillUnmount = function () {\n    if (this.props.onCoords) {\n      this.props.onCoords(null);\n    }\n  };\n  TimeColsSlats.prototype.updateSizing = function () {\n    var _a = this,\n      context = _a.context,\n      props = _a.props;\n    if (props.onCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      var rootEl = this.rootElRef.current;\n      if (rootEl.offsetHeight) {\n        // not hidden by css\n        props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current, collectSlatEls(this.slatElRefs.currentMap, props.slatMetas), false, true), this.props.dateProfile, context.options.slotDuration));\n      }\n    }\n  };\n  return TimeColsSlats;\n}(BaseComponent);\nfunction collectSlatEls(elMap, slatMetas) {\n  return slatMetas.map(function (slatMeta) {\n    return elMap[slatMeta.key];\n  });\n}\nfunction splitSegsByCol(segs, colCnt) {\n  var segsByCol = [];\n  var i;\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([]);\n  }\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n  }\n  return segsByCol;\n}\nfunction splitInteractionByCol(ui, colCnt) {\n  var byRow = [];\n  if (!ui) {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n    for (var _i = 0, _a = ui.segs; _i < _a.length; _i++) {\n      var seg = _a[_i];\n      byRow[seg.col].segs.push(seg);\n    }\n  }\n  return byRow;\n}\nvar TimeColMoreLink = /** @class */function (_super) {\n  __extends(TimeColMoreLink, _super);\n  function TimeColMoreLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.rootElRef = createRef();\n    return _this;\n  }\n  TimeColMoreLink.prototype.render = function () {\n    var _this = this;\n    var props = this.props;\n    return createElement(MoreLinkRoot, {\n      allDayDate: null,\n      moreCnt: props.hiddenSegs.length,\n      allSegs: props.hiddenSegs,\n      hiddenSegs: props.hiddenSegs,\n      alignmentElRef: this.rootElRef,\n      defaultContent: renderMoreLinkInner,\n      extraDateSpan: props.extraDateSpan,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      popoverContent: function () {\n        return renderPlainFgSegs(props.hiddenSegs, props);\n      }\n    }, function (rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n      return createElement(\"a\", {\n        ref: function (el) {\n          setRef(rootElRef, el);\n          setRef(_this.rootElRef, el);\n        },\n        className: ['fc-timegrid-more-link'].concat(classNames).join(' '),\n        style: {\n          top: props.top,\n          bottom: props.bottom\n        },\n        onClick: handleClick,\n        title: title,\n        \"aria-expanded\": isExpanded,\n        \"aria-controls\": popoverId\n      }, createElement(\"div\", {\n        ref: innerElRef,\n        className: \"fc-timegrid-more-link-inner fc-sticky\"\n      }, innerContent));\n    });\n  };\n  return TimeColMoreLink;\n}(BaseComponent);\nfunction renderMoreLinkInner(props) {\n  return props.shortText;\n}\n\n// segInputs assumed sorted\nfunction buildPositioning(segInputs, strictOrder, maxStackCnt) {\n  var hierarchy = new SegHierarchy();\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder;\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt;\n  }\n  var hiddenEntries = hierarchy.addSegs(segInputs);\n  var hiddenGroups = groupIntersectingEntries(hiddenEntries);\n  var web = buildWeb(hierarchy);\n  web = stretchWeb(web, 1); // all levelCoords/thickness will have 0.0-1.0\n  var segRects = webToRects(web);\n  return {\n    segRects: segRects,\n    hiddenGroups: hiddenGroups\n  };\n}\nfunction buildWeb(hierarchy) {\n  var entriesByLevel = hierarchy.entriesByLevel;\n  var buildNode = cacheable(function (level, lateral) {\n    return level + ':' + lateral;\n  }, function (level, lateral) {\n    var siblingRange = findNextLevelSegs(hierarchy, level, lateral);\n    var nextLevelRes = buildNodes(siblingRange, buildNode);\n    var entry = entriesByLevel[level][lateral];\n    return [__assign(__assign({}, entry), {\n      nextLevelNodes: nextLevelRes[0]\n    }), entry.thickness + nextLevelRes[1] // the pressure builds\n    ];\n  });\n\n  return buildNodes(entriesByLevel.length ? {\n    level: 0,\n    lateralStart: 0,\n    lateralEnd: entriesByLevel[0].length\n  } : null, buildNode)[0];\n}\nfunction buildNodes(siblingRange, buildNode) {\n  if (!siblingRange) {\n    return [[], 0];\n  }\n  var level = siblingRange.level,\n    lateralStart = siblingRange.lateralStart,\n    lateralEnd = siblingRange.lateralEnd;\n  var lateral = lateralStart;\n  var pairs = [];\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral));\n    lateral += 1;\n  }\n  pairs.sort(cmpDescPressures);\n  return [pairs.map(extractNode), pairs[0][1] // first item's pressure\n  ];\n}\n\nfunction cmpDescPressures(a, b) {\n  return b[1] - a[1];\n}\nfunction extractNode(a) {\n  return a[0];\n}\nfunction findNextLevelSegs(hierarchy, subjectLevel, subjectLateral) {\n  var levelCoords = hierarchy.levelCoords,\n    entriesByLevel = hierarchy.entriesByLevel;\n  var subjectEntry = entriesByLevel[subjectLevel][subjectLateral];\n  var afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness;\n  var levelCnt = levelCoords.length;\n  var level = subjectLevel;\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1); // do nothing\n  for (; level < levelCnt; level += 1) {\n    var entries = entriesByLevel[level];\n    var entry = void 0;\n    var searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd);\n    var lateralStart = searchIndex[0] + searchIndex[1]; // if exact match (which doesn't collide), go to next one\n    var lateralEnd = lateralStart;\n    while (\n    // loop through entries that horizontally intersect\n    (entry = entries[lateralEnd]) &&\n    // but not past the whole seg list\n    entry.span.start < subjectEntry.span.end) {\n      lateralEnd += 1;\n    }\n    if (lateralStart < lateralEnd) {\n      return {\n        level: level,\n        lateralStart: lateralStart,\n        lateralEnd: lateralEnd\n      };\n    }\n  }\n  return null;\n}\nfunction stretchWeb(topLevelNodes, totalThickness) {\n  var stretchNode = cacheable(function (node, startCoord, prevThickness) {\n    return buildEntryKey(node);\n  }, function (node, startCoord, prevThickness) {\n    var nextLevelNodes = node.nextLevelNodes,\n      thickness = node.thickness;\n    var allThickness = thickness + prevThickness;\n    var thicknessFraction = thickness / allThickness;\n    var endCoord;\n    var newChildren = [];\n    if (!nextLevelNodes.length) {\n      endCoord = totalThickness;\n    } else {\n      for (var _i = 0, nextLevelNodes_1 = nextLevelNodes; _i < nextLevelNodes_1.length; _i++) {\n        var childNode = nextLevelNodes_1[_i];\n        if (endCoord === undefined) {\n          var res = stretchNode(childNode, startCoord, allThickness);\n          endCoord = res[0];\n          newChildren.push(res[1]);\n        } else {\n          var res = stretchNode(childNode, endCoord, 0);\n          newChildren.push(res[1]);\n        }\n      }\n    }\n    var newThickness = (endCoord - startCoord) * thicknessFraction;\n    return [endCoord - newThickness, __assign(__assign({}, node), {\n      thickness: newThickness,\n      nextLevelNodes: newChildren\n    })];\n  });\n  return topLevelNodes.map(function (node) {\n    return stretchNode(node, 0, 0)[1];\n  });\n}\n// not sorted in any particular order\nfunction webToRects(topLevelNodes) {\n  var rects = [];\n  var processNode = cacheable(function (node, levelCoord, stackDepth) {\n    return buildEntryKey(node);\n  }, function (node, levelCoord, stackDepth) {\n    var rect = __assign(__assign({}, node), {\n      levelCoord: levelCoord,\n      stackDepth: stackDepth,\n      stackForward: 0\n    });\n    rects.push(rect);\n    return rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1;\n  });\n  function processNodes(nodes, levelCoord, stackDepth) {\n    var stackForward = 0;\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n      var node = nodes_1[_i];\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward);\n    }\n    return stackForward;\n  }\n  processNodes(topLevelNodes, 0, 0);\n  return rects; // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n// TODO: move to general util\nfunction cacheable(keyFunc, workFunc) {\n  var cache = {};\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var key = keyFunc.apply(void 0, args);\n    return key in cache ? cache[key] : cache[key] = workFunc.apply(void 0, args);\n  };\n}\nfunction computeSegVCoords(segs, colDate, slatCoords, eventMinHeight) {\n  if (slatCoords === void 0) {\n    slatCoords = null;\n  }\n  if (eventMinHeight === void 0) {\n    eventMinHeight = 0;\n  }\n  var vcoords = [];\n  if (slatCoords) {\n    for (var i = 0; i < segs.length; i += 1) {\n      var seg = segs[i];\n      var spanStart = slatCoords.computeDateTop(seg.start, colDate);\n      var spanEnd = Math.max(spanStart + (eventMinHeight || 0),\n      // :(\n      slatCoords.computeDateTop(seg.end, colDate));\n      vcoords.push({\n        start: Math.round(spanStart),\n        end: Math.round(spanEnd) //\n      });\n    }\n  }\n\n  return vcoords;\n}\nfunction computeFgSegPlacements(segs, segVCoords,\n// might not have for every seg\neventOrderStrict, eventMaxStack) {\n  var segInputs = [];\n  var dumbSegs = []; // segs without coords\n  for (var i = 0; i < segs.length; i += 1) {\n    var vcoords = segVCoords[i];\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords\n      });\n    } else {\n      dumbSegs.push(segs[i]);\n    }\n  }\n  var _a = buildPositioning(segInputs, eventOrderStrict, eventMaxStack),\n    segRects = _a.segRects,\n    hiddenGroups = _a.hiddenGroups;\n  var segPlacements = [];\n  for (var _i = 0, segRects_1 = segRects; _i < segRects_1.length; _i++) {\n    var segRect = segRects_1[_i];\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect\n    });\n  }\n  for (var _b = 0, dumbSegs_1 = dumbSegs; _b < dumbSegs_1.length; _b++) {\n    var dumbSeg = dumbSegs_1[_b];\n    segPlacements.push({\n      seg: dumbSeg,\n      rect: null\n    });\n  }\n  return {\n    segPlacements: segPlacements,\n    hiddenGroups: hiddenGroups\n  };\n}\nvar DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false\n});\nvar TimeColEvent = /** @class */function (_super) {\n  __extends(TimeColEvent, _super);\n  function TimeColEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TimeColEvent.prototype.render = function () {\n    var classNames = ['fc-timegrid-event', 'fc-v-event'];\n    if (this.props.isShort) {\n      classNames.push('fc-timegrid-event-short');\n    }\n    return createElement(StandardEvent, __assign({}, this.props, {\n      defaultTimeFormat: DEFAULT_TIME_FORMAT,\n      extraClassNames: classNames\n    }));\n  };\n  return TimeColEvent;\n}(BaseComponent);\nvar TimeColMisc = /** @class */function (_super) {\n  __extends(TimeColMisc, _super);\n  function TimeColMisc() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TimeColMisc.prototype.render = function () {\n    var props = this.props;\n    return createElement(DayCellContent, {\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }, function (innerElRef, innerContent) {\n      return innerContent && createElement(\"div\", {\n        className: \"fc-timegrid-col-misc\",\n        ref: innerElRef\n      }, innerContent);\n    });\n  };\n  return TimeColMisc;\n}(BaseComponent);\nvar TimeCol = /** @class */function (_super) {\n  __extends(TimeCol, _super);\n  function TimeCol() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.sortEventSegs = memoize(sortEventSegs);\n    return _this;\n  }\n  // TODO: memoize event-placement?\n  TimeCol.prototype.render = function () {\n    var _this = this;\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var isSelectMirror = context.options.selectMirror;\n    var mirrorSegs = props.eventDrag && props.eventDrag.segs || props.eventResize && props.eventResize.segs || isSelectMirror && props.dateSelectionSegs || [];\n    var interactionAffectedInstances =\n    // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    var sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder);\n    return createElement(DayCellRoot, {\n      elRef: props.elRef,\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      extraHookProps: props.extraHookProps\n    }, function (rootElRef, classNames, dataAttrs) {\n      return createElement(\"td\", __assign({\n        ref: rootElRef,\n        role: \"gridcell\",\n        className: ['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')\n      }, dataAttrs, props.extraDataAttrs), createElement(\"div\", {\n        className: \"fc-timegrid-col-frame\"\n      }, createElement(\"div\", {\n        className: \"fc-timegrid-col-bg\"\n      }, _this.renderFillSegs(props.businessHourSegs, 'non-business'), _this.renderFillSegs(props.bgEventSegs, 'bg-event'), _this.renderFillSegs(props.dateSelectionSegs, 'highlight')), createElement(\"div\", {\n        className: \"fc-timegrid-col-events\"\n      }, _this.renderFgSegs(sortedFgSegs, interactionAffectedInstances, false, false, false)), createElement(\"div\", {\n        className: \"fc-timegrid-col-events\"\n      }, _this.renderFgSegs(mirrorSegs, {}, Boolean(props.eventDrag), Boolean(props.eventResize), Boolean(isSelectMirror))), createElement(\"div\", {\n        className: \"fc-timegrid-now-indicator-container\"\n      }, _this.renderNowIndicator(props.nowIndicatorSegs)), createElement(TimeColMisc, {\n        date: props.date,\n        dateProfile: props.dateProfile,\n        todayRange: props.todayRange,\n        extraHookProps: props.extraHookProps\n      })));\n    });\n  };\n  TimeCol.prototype.renderFgSegs = function (sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    var props = this.props;\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props);\n    }\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting);\n  };\n  TimeCol.prototype.renderPositionedFgSegs = function (segs,\n  // if not mirror, needs to be sorted\n  segIsInvisible, isDragging, isResizing, isDateSelecting) {\n    var _this = this;\n    var _a = this.context.options,\n      eventMaxStack = _a.eventMaxStack,\n      eventShortHeight = _a.eventShortHeight,\n      eventOrderStrict = _a.eventOrderStrict,\n      eventMinHeight = _a.eventMinHeight;\n    var _b = this.props,\n      date = _b.date,\n      slatCoords = _b.slatCoords,\n      eventSelection = _b.eventSelection,\n      todayRange = _b.todayRange,\n      nowDate = _b.nowDate;\n    var isMirror = isDragging || isResizing || isDateSelecting;\n    var segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight);\n    var _c = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack),\n      segPlacements = _c.segPlacements,\n      hiddenGroups = _c.hiddenGroups;\n    return createElement(Fragment, null, this.renderHiddenGroups(hiddenGroups, segs), segPlacements.map(function (segPlacement) {\n      var seg = segPlacement.seg,\n        rect = segPlacement.rect;\n      var instanceId = seg.eventRange.instance.instanceId;\n      var isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect);\n      var vStyle = computeSegVStyle(rect && rect.span);\n      var hStyle = !isMirror && rect ? _this.computeSegHStyle(rect) : {\n        left: 0,\n        right: 0\n      };\n      var isInset = Boolean(rect) && rect.stackForward > 0;\n      var isShort = Boolean(rect) && rect.span.end - rect.span.start < eventShortHeight; // look at other places for this problem\n      return createElement(\"div\", {\n        className: 'fc-timegrid-event-harness' + (isInset ? ' fc-timegrid-event-harness-inset' : ''),\n        key: instanceId,\n        style: __assign(__assign({\n          visibility: isVisible ? '' : 'hidden'\n        }, vStyle), hStyle)\n      }, createElement(TimeColEvent, __assign({\n        seg: seg,\n        isDragging: isDragging,\n        isResizing: isResizing,\n        isDateSelecting: isDateSelecting,\n        isSelected: instanceId === eventSelection,\n        isShort: isShort\n      }, getSegMeta(seg, todayRange, nowDate))));\n    }));\n  };\n  // will already have eventMinHeight applied because segInputs already had it\n  TimeCol.prototype.renderHiddenGroups = function (hiddenGroups, segs) {\n    var _a = this.props,\n      extraDateSpan = _a.extraDateSpan,\n      dateProfile = _a.dateProfile,\n      todayRange = _a.todayRange,\n      nowDate = _a.nowDate,\n      eventSelection = _a.eventSelection,\n      eventDrag = _a.eventDrag,\n      eventResize = _a.eventResize;\n    return createElement(Fragment, null, hiddenGroups.map(function (hiddenGroup) {\n      var positionCss = computeSegVStyle(hiddenGroup.span);\n      var hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs);\n      return createElement(TimeColMoreLink, {\n        key: buildIsoString(computeEarliestSegStart(hiddenSegs)),\n        hiddenSegs: hiddenSegs,\n        top: positionCss.top,\n        bottom: positionCss.bottom,\n        extraDateSpan: extraDateSpan,\n        dateProfile: dateProfile,\n        todayRange: todayRange,\n        nowDate: nowDate,\n        eventSelection: eventSelection,\n        eventDrag: eventDrag,\n        eventResize: eventResize\n      });\n    }));\n  };\n  TimeCol.prototype.renderFillSegs = function (segs, fillType) {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight); // don't assume all populated\n    var children = segVCoords.map(function (vcoords, i) {\n      var seg = segs[i];\n      return createElement(\"div\", {\n        key: buildEventRangeKey(seg.eventRange),\n        className: \"fc-timegrid-bg-harness\",\n        style: computeSegVStyle(vcoords)\n      }, fillType === 'bg-event' ? createElement(BgEvent, __assign({\n        seg: seg\n      }, getSegMeta(seg, props.todayRange, props.nowDate))) : renderFill(fillType));\n    });\n    return createElement(Fragment, null, children);\n  };\n  TimeCol.prototype.renderNowIndicator = function (segs) {\n    var _a = this.props,\n      slatCoords = _a.slatCoords,\n      date = _a.date;\n    if (!slatCoords) {\n      return null;\n    }\n    return segs.map(function (seg, i) {\n      return createElement(NowIndicatorRoot, {\n        isAxis: false,\n        date: date,\n        // key doesn't matter. will only ever be one\n        key: i\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"div\", {\n          ref: rootElRef,\n          className: ['fc-timegrid-now-indicator-line'].concat(classNames).join(' '),\n          style: {\n            top: slatCoords.computeDateTop(seg.start, date)\n          }\n        }, innerContent);\n      });\n    });\n  };\n  TimeCol.prototype.computeSegHStyle = function (segHCoords) {\n    var _a = this.context,\n      isRtl = _a.isRtl,\n      options = _a.options;\n    var shouldOverlap = options.slotEventOverlap;\n    var nearCoord = segHCoords.levelCoord; // the left side if LTR. the right side if RTL. floating-point\n    var farCoord = segHCoords.levelCoord + segHCoords.thickness; // the right side if LTR. the left side if RTL. floating-point\n    var left; // amount of space from left edge, a fraction of the total width\n    var right; // amount of space from right edge, a fraction of the total width\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2);\n    }\n    if (isRtl) {\n      left = 1 - farCoord;\n      right = nearCoord;\n    } else {\n      left = nearCoord;\n      right = 1 - farCoord;\n    }\n    var props = {\n      zIndex: segHCoords.stackDepth + 1,\n      left: left * 100 + '%',\n      right: right * 100 + '%'\n    };\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n    }\n\n    return props;\n  };\n  return TimeCol;\n}(BaseComponent);\nfunction renderPlainFgSegs(sortedFgSegs, _a) {\n  var todayRange = _a.todayRange,\n    nowDate = _a.nowDate,\n    eventSelection = _a.eventSelection,\n    eventDrag = _a.eventDrag,\n    eventResize = _a.eventResize;\n  var hiddenInstances = (eventDrag ? eventDrag.affectedInstances : null) || (eventResize ? eventResize.affectedInstances : null) || {};\n  return createElement(Fragment, null, sortedFgSegs.map(function (seg) {\n    var instanceId = seg.eventRange.instance.instanceId;\n    return createElement(\"div\", {\n      key: instanceId,\n      style: {\n        visibility: hiddenInstances[instanceId] ? 'hidden' : ''\n      }\n    }, createElement(TimeColEvent, __assign({\n      seg: seg,\n      isDragging: false,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: instanceId === eventSelection,\n      isShort: false\n    }, getSegMeta(seg, todayRange, nowDate))));\n  }));\n}\nfunction computeSegVStyle(segVCoords) {\n  if (!segVCoords) {\n    return {\n      top: '',\n      bottom: ''\n    };\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end\n  };\n}\nfunction compileSegsFromEntries(segEntries, allSegs) {\n  return segEntries.map(function (segEntry) {\n    return allSegs[segEntry.index];\n  });\n}\nvar TimeColsContent = /** @class */function (_super) {\n  __extends(TimeColsContent, _super);\n  function TimeColsContent() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.splitFgEventSegs = memoize(splitSegsByCol);\n    _this.splitBgEventSegs = memoize(splitSegsByCol);\n    _this.splitBusinessHourSegs = memoize(splitSegsByCol);\n    _this.splitNowIndicatorSegs = memoize(splitSegsByCol);\n    _this.splitDateSelectionSegs = memoize(splitSegsByCol);\n    _this.splitEventDrag = memoize(splitInteractionByCol);\n    _this.splitEventResize = memoize(splitInteractionByCol);\n    _this.rootElRef = createRef();\n    _this.cellElRefs = new RefMap();\n    return _this;\n  }\n  TimeColsContent.prototype.render = function () {\n    var _this = this;\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var nowIndicatorTop = context.options.nowIndicator && props.slatCoords && props.slatCoords.safeComputeTop(props.nowDate); // might return void\n    var colCnt = props.cells.length;\n    var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt);\n    var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt);\n    var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt);\n    var nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt);\n    var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt);\n    var eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt);\n    var eventResizeByRow = this.splitEventResize(props.eventResize, colCnt);\n    return createElement(\"div\", {\n      className: \"fc-timegrid-cols\",\n      ref: this.rootElRef\n    }, createElement(\"table\", {\n      role: \"presentation\",\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth\n      }\n    }, props.tableColGroupNode, createElement(\"tbody\", {\n      role: \"presentation\"\n    }, createElement(\"tr\", {\n      role: \"row\"\n    }, props.axis && createElement(\"td\", {\n      \"aria-hidden\": true,\n      className: \"fc-timegrid-col fc-timegrid-axis\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-col-frame\"\n    }, createElement(\"div\", {\n      className: \"fc-timegrid-now-indicator-container\"\n    }, typeof nowIndicatorTop === 'number' && createElement(NowIndicatorRoot, {\n      isAxis: true,\n      date: props.nowDate\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),\n        style: {\n          top: nowIndicatorTop\n        }\n      }, innerContent);\n    })))), props.cells.map(function (cell, i) {\n      return createElement(TimeCol, {\n        key: cell.key,\n        elRef: _this.cellElRefs.createRef(cell.key),\n        dateProfile: props.dateProfile,\n        date: cell.date,\n        nowDate: props.nowDate,\n        todayRange: props.todayRange,\n        extraHookProps: cell.extraHookProps,\n        extraDataAttrs: cell.extraDataAttrs,\n        extraClassNames: cell.extraClassNames,\n        extraDateSpan: cell.extraDateSpan,\n        fgEventSegs: fgEventSegsByRow[i],\n        bgEventSegs: bgEventSegsByRow[i],\n        businessHourSegs: businessHourSegsByRow[i],\n        nowIndicatorSegs: nowIndicatorSegsByRow[i],\n        dateSelectionSegs: dateSelectionSegsByRow[i],\n        eventDrag: eventDragByRow[i],\n        eventResize: eventResizeByRow[i],\n        slatCoords: props.slatCoords,\n        eventSelection: props.eventSelection,\n        forPrint: props.forPrint\n      });\n    })))));\n  };\n  TimeColsContent.prototype.componentDidMount = function () {\n    this.updateCoords();\n  };\n  TimeColsContent.prototype.componentDidUpdate = function () {\n    this.updateCoords();\n  };\n  TimeColsContent.prototype.updateCoords = function () {\n    var props = this.props;\n    if (props.onColCoords && props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(new PositionCache(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.cells), true,\n      // horizontal\n      false));\n    }\n  };\n  return TimeColsContent;\n}(BaseComponent);\nfunction collectCellEls(elMap, cells) {\n  return cells.map(function (cell) {\n    return elMap[cell.key];\n  });\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\nvar TimeCols = /** @class */function (_super) {\n  __extends(TimeCols, _super);\n  function TimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.processSlotOptions = memoize(processSlotOptions);\n    _this.state = {\n      slatCoords: null\n    };\n    _this.handleRootEl = function (el) {\n      if (el) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: el,\n          isHitComboAllowed: _this.props.isHitComboAllowed\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n    _this.handleScrollRequest = function (request) {\n      var onScrollTopRequest = _this.props.onScrollTopRequest;\n      var slatCoords = _this.state.slatCoords;\n      if (onScrollTopRequest && slatCoords) {\n        if (request.time) {\n          var top_1 = slatCoords.computeTimeTop(request.time);\n          top_1 = Math.ceil(top_1); // zoom can give weird floating-point values. rather scroll a little bit further\n          if (top_1) {\n            top_1 += 1; // to overcome top border that slots beyond the first have. looks better\n          }\n\n          onScrollTopRequest(top_1);\n        }\n        return true;\n      }\n      return false;\n    };\n    _this.handleColCoords = function (colCoords) {\n      _this.colCoords = colCoords;\n    };\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n      if (_this.props.onSlatCoords) {\n        _this.props.onSlatCoords(slatCoords);\n      }\n    };\n    return _this;\n  }\n  TimeCols.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      state = _a.state;\n    return createElement(\"div\", {\n      className: \"fc-timegrid-body\",\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(TimeColsSlats, {\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      slatMetas: props.slatMetas,\n      clientWidth: props.clientWidth,\n      minHeight: props.expandRows ? props.clientHeight : '',\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */,\n      onCoords: this.handleSlatCoords\n    }), createElement(TimeColsContent, {\n      cells: props.cells,\n      axis: props.axis,\n      dateProfile: props.dateProfile,\n      businessHourSegs: props.businessHourSegs,\n      bgEventSegs: props.bgEventSegs,\n      fgEventSegs: props.fgEventSegs,\n      dateSelectionSegs: props.dateSelectionSegs,\n      eventSelection: props.eventSelection,\n      eventDrag: props.eventDrag,\n      eventResize: props.eventResize,\n      todayRange: props.todayRange,\n      nowDate: props.nowDate,\n      nowIndicatorSegs: props.nowIndicatorSegs,\n      clientWidth: props.clientWidth,\n      tableMinWidth: props.tableMinWidth,\n      tableColGroupNode: props.tableColGroupNode,\n      slatCoords: state.slatCoords,\n      onColCoords: this.handleColCoords,\n      forPrint: props.forPrint\n    }));\n  };\n  TimeCols.prototype.componentDidMount = function () {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n  };\n  TimeCols.prototype.componentDidUpdate = function (prevProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n  };\n  TimeCols.prototype.componentWillUnmount = function () {\n    this.scrollResponder.detach();\n  };\n  TimeCols.prototype.queryHit = function (positionLeft, positionTop) {\n    var _a = this.context,\n      dateEnv = _a.dateEnv,\n      options = _a.options;\n    var colCoords = this.colCoords;\n    var dateProfile = this.props.dateProfile;\n    var slatCoords = this.state.slatCoords;\n    var _b = this.processSlotOptions(this.props.slotDuration, options.snapDuration),\n      snapDuration = _b.snapDuration,\n      snapsPerSlot = _b.snapsPerSlot;\n    var colIndex = colCoords.leftToIndex(positionLeft);\n    var slatIndex = slatCoords.positions.topToIndex(positionTop);\n    if (colIndex != null && slatIndex != null) {\n      var cell = this.props.cells[colIndex];\n      var slatTop = slatCoords.positions.tops[slatIndex];\n      var slatHeight = slatCoords.positions.getHeight(slatIndex);\n      var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n      var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n      var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n      var dayDate = this.props.cells[colIndex].date;\n      var time = addDurations(dateProfile.slotMinTime, multiplyDuration(snapDuration, snapIndex));\n      var start = dateEnv.add(dayDate, time);\n      var end = dateEnv.add(start, snapDuration);\n      return {\n        dateProfile: dateProfile,\n        dateSpan: __assign({\n          range: {\n            start: start,\n            end: end\n          },\n          allDay: false\n        }, cell.extraDateSpan),\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        },\n        layer: 0\n      };\n    }\n    return null;\n  };\n  return TimeCols;\n}(DateComponent);\nfunction processSlotOptions(slotDuration, snapDurationOverride) {\n  var snapDuration = snapDurationOverride || slotDuration;\n  var snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration;\n    snapsPerSlot = 1;\n    // TODO: say warning?\n  }\n\n  return {\n    snapDuration: snapDuration,\n    snapsPerSlot: snapsPerSlot\n  };\n}\nvar DayTimeColsSlicer = /** @class */function (_super) {\n  __extends(DayTimeColsSlicer, _super);\n  function DayTimeColsSlicer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DayTimeColsSlicer.prototype.sliceRange = function (range, dayRanges) {\n    var segs = [];\n    for (var col = 0; col < dayRanges.length; col += 1) {\n      var segRange = intersectRanges(range, dayRanges[col]);\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col: col\n        });\n      }\n    }\n    return segs;\n  };\n  return DayTimeColsSlicer;\n}(Slicer);\nvar DayTimeCols = /** @class */function (_super) {\n  __extends(DayTimeCols, _super);\n  function DayTimeCols() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.buildDayRanges = memoize(buildDayRanges);\n    _this.slicer = new DayTimeColsSlicer();\n    _this.timeColsRef = createRef();\n    return _this;\n  }\n  DayTimeCols.prototype.render = function () {\n    var _this = this;\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var dateProfile = props.dateProfile,\n      dayTableModel = props.dayTableModel;\n    var isNowIndicator = context.options.nowIndicator;\n    var dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv);\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return createElement(NowTimer, {\n      unit: isNowIndicator ? 'minute' : 'day'\n    }, function (nowDate, todayRange) {\n      return createElement(TimeCols, __assign({\n        ref: _this.timeColsRef\n      }, _this.slicer.sliceProps(props, dateProfile, null, context, dayRanges), {\n        forPrint: props.forPrint,\n        axis: props.axis,\n        dateProfile: dateProfile,\n        slatMetas: props.slatMetas,\n        slotDuration: props.slotDuration,\n        cells: dayTableModel.cells[0],\n        tableColGroupNode: props.tableColGroupNode,\n        tableMinWidth: props.tableMinWidth,\n        clientWidth: props.clientWidth,\n        clientHeight: props.clientHeight,\n        expandRows: props.expandRows,\n        nowDate: nowDate,\n        nowIndicatorSegs: isNowIndicator && _this.slicer.sliceNowDate(nowDate, context, dayRanges),\n        todayRange: todayRange,\n        onScrollTopRequest: props.onScrollTopRequest,\n        onSlatCoords: props.onSlatCoords\n      }));\n    });\n  };\n  return DayTimeCols;\n}(DateComponent);\nfunction buildDayRanges(dayTableModel, dateProfile, dateEnv) {\n  var ranges = [];\n  for (var _i = 0, _a = dayTableModel.headerDates; _i < _a.length; _i++) {\n    var date = _a[_i];\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime)\n    });\n  }\n  return ranges;\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nvar STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\nfunction buildSlatMetas(slotMinTime, slotMaxTime, explicitLabelInterval, slotDuration, dateEnv) {\n  var dayStart = new Date(0);\n  var slatTime = slotMinTime;\n  var slatIterator = createDuration(0);\n  var labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration);\n  var metas = [];\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    var date = dateEnv.add(dayStart, slatTime);\n    var isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null;\n    metas.push({\n      date: date,\n      time: slatTime,\n      key: date.toISOString(),\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled: isLabeled\n    });\n    slatTime = addDurations(slatTime, slotDuration);\n    slatIterator = addDurations(slatIterator, slotDuration);\n  }\n  return metas;\n}\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  var i;\n  var labelInterval;\n  var slotsPerLabel;\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i]);\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval;\n    }\n  }\n  return slotDuration; // fall back\n}\n\nvar DayTimeColsView = /** @class */function (_super) {\n  __extends(DayTimeColsView, _super);\n  function DayTimeColsView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.buildTimeColsModel = memoize(buildTimeColsModel);\n    _this.buildSlatMetas = memoize(buildSlatMetas);\n    return _this;\n  }\n  DayTimeColsView.prototype.render = function () {\n    var _this = this;\n    var _a = this.context,\n      options = _a.options,\n      dateEnv = _a.dateEnv,\n      dateProfileGenerator = _a.dateProfileGenerator;\n    var props = this.props;\n    var dateProfile = props.dateProfile;\n    var dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator);\n    var splitProps = this.allDaySplitter.splitProps(props);\n    var slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n    var dayMinWidth = options.dayMinWidth;\n    var hasAttachedAxis = !dayMinWidth;\n    var hasDetachedAxis = dayMinWidth;\n    var headerContent = options.dayHeaders && createElement(DayHeader, {\n      dates: dayTableModel.headerDates,\n      dateProfile: dateProfile,\n      datesRepDistinctDays: true,\n      renderIntro: hasAttachedAxis ? this.renderHeadAxis : null\n    });\n    var allDayContent = options.allDaySlot !== false && function (contentArg) {\n      return createElement(DayTable, __assign({}, splitProps.allDay, {\n        dateProfile: dateProfile,\n        dayTableModel: dayTableModel,\n        nextDayThreshold: options.nextDayThreshold,\n        tableMinWidth: contentArg.tableMinWidth,\n        colGroupNode: contentArg.tableColGroupNode,\n        renderRowIntro: hasAttachedAxis ? _this.renderTableRowAxis : null,\n        showWeekNumbers: false,\n        expandRows: false,\n        headerAlignElRef: _this.headerElRef,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        forPrint: props.forPrint\n      }, _this.getAllDayMaxEventProps()));\n    };\n    var timeGridContent = function (contentArg) {\n      return createElement(DayTimeCols, __assign({}, splitProps.timed, {\n        dayTableModel: dayTableModel,\n        dateProfile: dateProfile,\n        axis: hasAttachedAxis,\n        slotDuration: options.slotDuration,\n        slatMetas: slatMetas,\n        forPrint: props.forPrint,\n        tableColGroupNode: contentArg.tableColGroupNode,\n        tableMinWidth: contentArg.tableMinWidth,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        onSlatCoords: _this.handleSlatCoords,\n        expandRows: contentArg.expandRows,\n        onScrollTopRequest: _this.handleScrollTopRequest\n      }));\n    };\n    return hasDetachedAxis ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, dayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords) : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n  };\n  return DayTimeColsView;\n}(TimeColsView);\nfunction buildTimeColsModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, false);\n}\nvar OPTION_REFINERS = {\n  allDaySlot: Boolean\n};\nvar main = createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true // a bad name. confused with overlap/constraint system\n    },\n\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\nexport default main;\nexport { DayTimeCols, DayTimeColsSlicer, DayTimeColsView, TimeCols, TimeColsSlatsCoords, TimeColsView, buildDayRanges, buildSlatMetas, buildTimeColsModel };","map":{"version":3,"mappings":"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","names":["__extends","AllDaySplitter","allDay","timed","dateSpan","eventDef","hasBgRendering","Splitter","DEFAULT_SLAT_LABEL_FORMAT","createFormatter","hour","minute","omitZeroMinute","meridiem","TimeColsAxisCell","props","classNames","isLabeled","createElement","ViewContextType","Consumer","context","className","join","isoTimeStr","options","viewApi","labelFormat","slotLabelFormat","Array","isArray","hookProps","level","time","date","dateEnv","toDate","view","text","format","RenderHook","slotLabelClassNames","content","slotLabelContent","defaultContent","renderInnerContent","didMount","slotLabelDidMount","willUnmount","slotLabelWillUnmount","rootElRef","customClassNames","innerElRef","innerContent","ref","concat","TimeBodyAxis","slatMetas","map","slatMeta","key","BaseComponent","DEFAULT_WEEK_NUM_FORMAT","week","AUTO_ALL_DAY_MAX_EVENT_ROWS","_this","createRef","slatCoords","scrollTop","scrollerEl","scrollerElRef","current","rowKey","frameHeight","range","dateProfile","renderRange","dayCnt","diffDays","start","end","navLinkAttrs","buildNavLinkAttrs","weekNumbers","WeekNumberRoot","defaultFormat","style","height","rowHeight","allDayText","allDayClassNames","allDayContent","renderAllDayInner","allDayDidMount","allDayWillUnmount","setState","TimeColsView","headerRowContent","timeContent","sections","stickyHeaderDates","getStickyHeaderDates","push","type","isSticky","chunk","elRef","headerElRef","tableClassName","rowContent","outerContent","role","theme","getClass","liquid","expandRows","Boolean","ViewRoot","viewSpec","SimpleScrollGrid","isHeightAuto","forPrint","collapsibleWidth","cols","width","colCnt","dayMinWidth","ScrollGrid","pluginHooks","scrollGridImpl","Error","stickyFooterScrollbar","getStickyFooterScrollbar","syncRowHeights","chunks","arg","renderHeadAxis","rowSyncHeights","contentArg","renderTableRowAxis","colSpan","isNowIndicator","nowIndicator","clientHeight","tableColGroupNode","NowTimer","unit","nowDate","nowIndicatorTop","safeComputeTop","NowIndicatorRoot","isAxis","top","renderScrollShim","colGroups","span","minWidth","dayMaxEvents","dayMaxEventRows","undefined","DateComponent","positions","slotDuration","TimeColsSlatsCoords","rangeContainsMarker","currentRange","startOfDayDate","startOfDay","timeMs","valueOf","asRoughMs","slotMinTime","slotMaxTime","computeTimeTop","createDuration","when","duration","len","els","length","slatCoverage","milliseconds","slatIndex","slatRemainder","Math","max","min","floor","tops","getHeight","TimeColsSlatsBody","i","slatElRefs","axis","slotLaneClassNames","slotLaneContent","slotLaneDidMount","slotLaneWillUnmount","RefMap","TimeColsSlats","tableMinWidth","clientWidth","minHeight","updateSizing","onCoords","rootEl","offsetHeight","PositionCache","collectSlatEls","currentMap","elMap","splitSegsByCol","segs","segsByCol","col","splitInteractionByCol","ui","byRow","affectedInstances","isEvent","_a","_i","seg","TimeColMoreLink","MoreLinkRoot","allDayDate","moreCnt","hiddenSegs","allSegs","alignmentElRef","renderMoreLinkInner","extraDateSpan","todayRange","popoverContent","handleClick","title","isExpanded","popoverId","el","setRef","bottom","onClick","shortText","buildPositioning","segInputs","strictOrder","maxStackCnt","hierarchy","SegHierarchy","hiddenEntries","addSegs","hiddenGroups","groupIntersectingEntries","web","buildWeb","stretchWeb","segRects","webToRects","buildNode","cacheable","lateral","siblingRange","findNextLevelSegs","nextLevelRes","buildNodes","entry","entriesByLevel","nextLevelNodes","thickness","lateralStart","lateralEnd","pairs","sort","cmpDescPressures","extractNode","a","b","subjectLevel","subjectLateral","subjectEntry","afterSubject","levelCoords","levelCnt","entries","searchIndex","binarySearch","getEntrySpanEnd","topLevelNodes","totalThickness","stretchNode","node","startCoord","prevThickness","allThickness","thicknessFraction","endCoord","newChildren","nextLevelNodes_1","childNode","res","newThickness","rects","processNode","levelCoord","stackDepth","rect","stackForward","processNodes","nodes","nodes_1","keyFunc","workFunc","cache","args","computeSegVCoords","colDate","eventMinHeight","vcoords","spanStart","computeDateTop","spanEnd","round","computeFgSegPlacements","segVCoords","eventOrderStrict","eventMaxStack","dumbSegs","index","segPlacements","segRects_1","segRect","dumbSegs_1","_b","dumbSeg","DEFAULT_TIME_FORMAT","TimeColEvent","isShort","StandardEvent","defaultTimeFormat","extraClassNames","TimeColMisc","DayCellContent","extraHookProps","memoize","sortEventSegs","TimeCol","isSelectMirror","selectMirror","mirrorSegs","eventDrag","eventResize","dateSelectionSegs","interactionAffectedInstances","sortedFgSegs","fgEventSegs","eventOrder","DayCellRoot","dataAttrs","extraDataAttrs","renderFillSegs","businessHourSegs","bgEventSegs","renderFgSegs","renderNowIndicator","nowIndicatorSegs","segIsInvisible","isDragging","isResizing","isDateSelecting","renderPlainFgSegs","renderPositionedFgSegs","eventShortHeight","eventSelection","isMirror","Fragment","renderHiddenGroups","segPlacement","instanceId","eventRange","instance","isVisible","vStyle","computeSegVStyle","hStyle","computeSegHStyle","left","right","isInset","visibility","isSelected","getSegMeta","hiddenGroup","positionCss","compileSegsFromEntries","buildIsoString","computeEarliestSegStart","fillType","children","buildEventRangeKey","BgEvent","renderFill","segHCoords","isRtl","shouldOverlap","slotEventOverlap","nearCoord","farCoord","zIndex","hiddenInstances","segEntries","segEntry","TimeColsContent","cells","fgEventSegsByRow","splitFgEventSegs","bgEventSegsByRow","splitBgEventSegs","businessHourSegsByRow","splitBusinessHourSegs","nowIndicatorSegsByRow","splitNowIndicatorSegs","dateSelectionSegsByRow","splitDateSelectionSegs","eventDragByRow","splitEventDrag","eventResizeByRow","splitEventResize","cell","cellElRefs","updateCoords","onColCoords","collectCellEls","processSlotOptions","registerInteractiveComponent","isHitComboAllowed","unregisterInteractiveComponent","request","state","onScrollTopRequest","top_1","ceil","colCoords","onSlatCoords","TimeCols","handleRootEl","handleSlatCoords","handleColCoords","scrollResponder","createScrollResponder","handleScrollRequest","prevProps","update","detach","positionLeft","positionTop","snapDuration","snapsPerSlot","colIndex","leftToIndex","topToIndex","slatTop","slatHeight","partial","localSnapIndex","snapIndex","dayDate","addDurations","multiplyDuration","add","dayEl","lefts","rights","layer","snapDurationOverride","wholeDivideDurations","DayTimeColsSlicer","dayRanges","segRange","intersectRanges","isStart","isEnd","Slicer","buildDayRanges","DayTimeCols","dayTableModel","timeColsRef","slicer","sliceProps","sliceNowDate","ranges","headerDates","STOCK_SUB_DURATIONS","hours","minutes","seconds","buildSlatMetas","explicitLabelInterval","dayStart","Date","slatTime","slatIterator","labelInterval","computeLabelInterval","metas","toISOString","formatIsoTimeString","slotsPerLabel","buildTimeColsModel","DayTimeColsView","dateProfileGenerator","splitProps","allDaySplitter","slotLabelInterval","hasAttachedAxis","hasDetachedAxis","headerContent","dayHeaders","DayHeader","dates","datesRepDistinctDays","renderIntro","allDaySlot","DayTable","nextDayThreshold","colGroupNode","renderRowIntro","showWeekNumbers","headerAlignElRef","getAllDayMaxEventProps","timeGridContent","handleScrollTopRequest","renderHScrollLayout","renderSimpleLayout","daySeries","DaySeriesModel","DayTableModel","OPTION_REFINERS","createPlugin","initialView","optionRefiners","views","timeGrid","component","usesMinMaxTime","timeGridDay","days","timeGridWeek","weeks"],"sources":["/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/AllDaySplitter.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColsAxisCell.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeBodyAxis.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColsView.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColsSlatsCoords.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColsSlatsBody.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColsSlats.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColsSeg.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColMoreLink.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/seg-web.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/event-placement.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColEvent.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColMisc.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeCol.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeColsContent.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/TimeCols.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/DayTimeColsSlicer.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/DayTimeCols.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/time-slat-meta.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/DayTimeColsView.tsx","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/options.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/timegrid/src/main.ts"],"sourcesContent":["import {\n  Splitter,\n  hasBgRendering,\n  EventDef,\n  DateSpan,\n} from '@fullcalendar/common'\n\nexport class AllDaySplitter extends Splitter {\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {},\n    }\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    if (dateSpan.allDay) {\n      return ['allDay']\n    }\n\n    return ['timed']\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    if (!eventDef.allDay) {\n      return ['timed']\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay']\n    }\n\n    return ['allDay']\n  }\n}\n","import {\n  createElement,\n  ViewContext,\n  createFormatter,\n  ViewContextType,\n  RenderHook,\n  SlotLabelContentArg,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short',\n})\n\nexport function TimeColsAxisCell(props: TimeSlatMeta) {\n  let classNames = [\n    'fc-timegrid-slot',\n    'fc-timegrid-slot-label',\n    props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor',\n  ]\n\n  return (\n    <ViewContextType.Consumer>\n      {(context: ViewContext) => {\n        if (!props.isLabeled) {\n          return (\n            <td className={classNames.join(' ')} data-time={props.isoTimeStr} />\n          )\n        }\n\n        let { dateEnv, options, viewApi } = context\n        let labelFormat = // TODO: fully pre-parse\n          options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT :\n            Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) :\n              createFormatter(options.slotLabelFormat)\n\n        let hookProps: SlotLabelContentArg = {\n          level: 0,\n          time: props.time,\n          date: dateEnv.toDate(props.date),\n          view: viewApi,\n          text: dateEnv.format(props.date, labelFormat),\n        }\n\n        return (\n          <RenderHook<SlotLabelContentArg> // needed?\n            hookProps={hookProps}\n            classNames={options.slotLabelClassNames}\n            content={options.slotLabelContent}\n            defaultContent={renderInnerContent}\n            didMount={options.slotLabelDidMount}\n            willUnmount={options.slotLabelWillUnmount}\n          >\n            {(rootElRef, customClassNames, innerElRef, innerContent) => (\n              <td ref={rootElRef} className={classNames.concat(customClassNames).join(' ')} data-time={props.isoTimeStr}>\n                <div className=\"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\">\n                  <div className=\"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\" ref={innerElRef}>\n                    {innerContent}\n                  </div>\n                </div>\n              </td>\n            )}\n          </RenderHook>\n        )\n      }}\n    </ViewContextType.Consumer>\n  )\n}\n\nfunction renderInnerContent(props) { // TODO: add types\n  return props.text\n}\n","import { createElement, BaseComponent } from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\n/* Thin Axis\n------------------------------------------------------------------------------------------------------------------*/\n\ninterface TimeBodyAxisProps {\n  slatMetas: TimeSlatMeta[]\n}\n\nexport class TimeBodyAxis extends BaseComponent<TimeBodyAxisProps> { // just <tr> content\n  render() {\n    return this.props.slatMetas.map((slatMeta: TimeSlatMeta) => (\n      <tr key={slatMeta.key}>\n        <TimeColsAxisCell {...slatMeta} />\n      </tr>\n    ))\n  }\n}\n","import {\n  createElement, createRef,\n  diffDays,\n  SimpleScrollGridSection,\n  VNode,\n  SimpleScrollGrid,\n  ChunkContentCallbackArgs,\n  ScrollGridSectionConfig,\n  buildNavLinkAttrs,\n  ViewRoot,\n  WeekNumberRoot,\n  RenderHook,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  createFormatter,\n  AllDayContentArg,\n  CssDimValue,\n  NowTimer,\n  DateMarker,\n  NowIndicatorRoot,\n} from '@fullcalendar/common'\nimport { AllDaySplitter } from './AllDaySplitter'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeBodyAxis } from './TimeBodyAxis'\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'short' })\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5\n\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeCols subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\ninterface TimeColsViewState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\nexport abstract class TimeColsView extends DateComponent<ViewProps, TimeColsViewState> {\n  protected allDaySplitter = new AllDaySplitter() // for use by subclasses\n\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n  private rootElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n  private scrollerElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n\n  state = {\n    slatCoords: null,\n  }\n\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n  renderSimpleLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n  ) {\n    let { context, props } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: { content: allDayContent },\n      })\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr role=\"presentation\" className=\"fc-scrollgrid-section\">\n            <td\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent,\n      },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              cols={[{ width: 'shrink' }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    colCnt: number,\n    dayMinWidth: number,\n    slatMetas: TimeSlatMeta[],\n    slatCoords: TimeColsSlatsCoords | null, // yuck\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { context, props } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (arg: ChunkContentCallbackArgs) => (\n              <tr role=\"presentation\">\n                {this.renderHeadAxis('day', arg.rowSyncHeights[0])}\n              </tr>\n            ),\n          },\n          {\n            key: 'cols',\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent,\n          },\n        ],\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (contentArg: ChunkContentCallbackArgs) => (\n              <tr role=\"presentation\">\n                {this.renderTableRowAxis(contentArg.rowSyncHeights[0])}\n              </tr>\n            ),\n          },\n          {\n            key: 'cols',\n            content: allDayContent,\n          },\n        ],\n      })\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr role=\"presentation\" className=\"fc-scrollgrid-section\">\n            <td\n              colSpan={2}\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    let isNowIndicator = context.options.nowIndicator\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [\n        {\n          key: 'axis',\n          content: (arg) => (\n            // TODO: make this now-indicator arrow more DRY with TimeColsContent\n            <div className=\"fc-timegrid-axis-chunk\">\n              <table aria-hidden style={{ height: arg.expandRows ? arg.clientHeight : '' }}>\n                {arg.tableColGroupNode}\n                <tbody>\n                  <TimeBodyAxis slatMetas={slatMetas} />\n                </tbody>\n              </table>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                <NowTimer unit={isNowIndicator ? 'minute' : 'day' /* hacky */}>\n                  {(nowDate: DateMarker) => {\n                    let nowIndicatorTop =\n                      isNowIndicator &&\n                      slatCoords &&\n                      slatCoords.safeComputeTop(nowDate) // might return void\n\n                    if (typeof nowIndicatorTop === 'number') {\n                      return (\n                        <NowIndicatorRoot isAxis date={nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )\n                    }\n\n                    return null\n                  }}\n                </NowTimer>\n              </div>\n            </div>\n          ),\n        },\n        {\n          key: 'cols',\n          scrollerElRef: this.scrollerElRef,\n          content: timeContent,\n        },\n      ],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [\n          {\n            key: 'axis',\n            content: renderScrollShim,\n          },\n          {\n            key: 'cols',\n            content: renderScrollShim,\n          },\n        ],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={false}\n              colGroups={[\n                { width: 'shrink', cols: [{ width: 'shrink' }] }, // TODO: allow no specify cols\n                { cols: [{ span: colCnt, minWidth: dayMinWidth }] },\n              ]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  handleScrollTopRequest = (scrollTop: number) => {\n    let scrollerEl = this.scrollerElRef.current\n\n    if (scrollerEl) { // TODO: not sure how this could ever be null. weirdness with the reducer\n      scrollerEl.scrollTop = scrollTop\n    }\n  }\n\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  getAllDayMaxEventProps() {\n    let { dayMaxEvents, dayMaxEventRows } = this.context.options\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) { // is auto?\n      dayMaxEvents = undefined\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS // make sure \"auto\" goes to a real number\n    }\n\n    return { dayMaxEvents, dayMaxEventRows }\n  }\n\n  /* Header Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  renderHeadAxis = (rowKey: 'day' | string, frameHeight: CssDimValue = '') => {\n    let { options } = this.context\n    let { dateProfile } = this.props\n    let range = dateProfile.renderRange\n    let dayCnt = diffDays(range.start, range.end)\n\n    let navLinkAttrs = (dayCnt === 1) // only do in day views (to avoid doing in week views that dont need it)\n      ? buildNavLinkAttrs(this.context, range.start, 'week')\n      : {}\n\n    if (options.weekNumbers && rowKey === 'day') {\n      return (\n        <WeekNumberRoot date={range.start} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <th\n              ref={rootElRef}\n              aria-hidden\n              className={[\n                'fc-timegrid-axis',\n                'fc-scrollgrid-shrink',\n              ].concat(classNames).join(' ')}\n            >\n              <div\n                className=\"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\"\n                style={{ height: frameHeight }}\n              >\n                <a\n                  ref={innerElRef}\n                  className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n                  {...navLinkAttrs}\n                >\n                  {innerContent}\n                </a>\n              </div>\n            </th>\n          )}\n        </WeekNumberRoot>\n      )\n    }\n\n    return (\n      <th aria-hidden className=\"fc-timegrid-axis\">\n        <div className=\"fc-timegrid-axis-frame\" style={{ height: frameHeight }} />\n      </th>\n    )\n  }\n\n  /* Table Component Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n  // but DayGrid still needs to have classNames on inner elements in order to measure.\n  renderTableRowAxis = (rowHeight?: number) => {\n    let { options, viewApi } = this.context\n    let hookProps: AllDayContentArg = {\n      text: options.allDayText,\n      view: viewApi,\n    }\n\n    return (\n      // TODO: make reusable hook. used in list view too\n      <RenderHook<AllDayContentArg>\n        hookProps={hookProps}\n        classNames={options.allDayClassNames}\n        content={options.allDayContent}\n        defaultContent={renderAllDayInner}\n        didMount={options.allDayDidMount}\n        willUnmount={options.allDayWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <td\n            ref={rootElRef}\n            aria-hidden\n            className={[\n              'fc-timegrid-axis',\n              'fc-scrollgrid-shrink',\n            ].concat(classNames).join(' ')}\n          >\n            <div\n              className={'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : '')}\n              style={{ height: rowHeight }}\n            >\n              <span className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\" ref={innerElRef}>\n                {innerContent}\n              </span>\n            </div>\n          </td>\n        )}\n      </RenderHook>\n    )\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords) => {\n    this.setState({ slatCoords })\n  }\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n","import {\n  PositionCache,\n  DateMarker,\n  startOfDay,\n  createDuration,\n  asRoughMs,\n  DateProfile,\n  Duration,\n  rangeContainsMarker,\n} from '@fullcalendar/common'\n\nexport class TimeColsSlatsCoords {\n  constructor(\n    public positions: PositionCache,\n    private dateProfile: DateProfile,\n    private slotDuration: Duration,\n  ) {\n  }\n\n  safeComputeTop(date: DateMarker) { // TODO: DRY with computeDateTop\n    let { dateProfile } = this\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      let startOfDayDate = startOfDay(date)\n      let timeMs = date.valueOf() - startOfDayDate.valueOf()\n\n      if (\n        timeMs >= asRoughMs(dateProfile.slotMinTime) &&\n        timeMs < asRoughMs(dateProfile.slotMaxTime)\n      ) {\n        return this.computeTimeTop(createDuration(timeMs))\n      }\n    }\n\n    return null\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when: DateMarker, startOfDayDate?: DateMarker) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when)\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()))\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  computeTimeTop(duration: Duration): number {\n    let { positions, dateProfile } = this\n    let len = positions.els.length\n\n    // floating-point value of # of slots covered\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration)\n    let slatIndex\n    let slatRemainder\n\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage)\n    slatCoverage = Math.min(len, slatCoverage)\n\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage)\n    slatIndex = Math.min(slatIndex, len - 1)\n\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex\n\n    return positions.tops[slatIndex] +\n      positions.getHeight(slatIndex) * slatRemainder\n  }\n}\n","import {\n  createElement,\n  BaseComponent,\n  RefMap,\n  RenderHook,\n  SlotLaneContentArg,\n} from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nexport interface TimeColsSlatsBodyProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  slatElRefs: RefMap<HTMLTableRowElement>\n}\n\nexport class TimeColsSlatsBody extends BaseComponent<TimeColsSlatsBodyProps> {\n  render() {\n    let { props, context } = this\n    let { options } = context\n    let { slatElRefs } = props\n\n    return (\n      <tbody>\n        {props.slatMetas.map((slatMeta, i) => {\n          let hookProps: SlotLaneContentArg = {\n            time: slatMeta.time,\n            date: context.dateEnv.toDate(slatMeta.date),\n            view: context.viewApi,\n          }\n\n          let classNames = [\n            'fc-timegrid-slot',\n            'fc-timegrid-slot-lane',\n            slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor',\n          ]\n\n          return (\n            <tr\n              key={slatMeta.key}\n              ref={slatElRefs.createRef(slatMeta.key)}\n            >\n              {props.axis && (\n                <TimeColsAxisCell {...slatMeta} />\n              )}\n              <RenderHook\n                hookProps={hookProps}\n                classNames={options.slotLaneClassNames}\n                content={options.slotLaneContent}\n                didMount={options.slotLaneDidMount}\n                willUnmount={options.slotLaneWillUnmount}\n              >\n                {(rootElRef, customClassNames, innerElRef, innerContent) => (\n                  <td\n                    ref={rootElRef}\n                    className={classNames.concat(customClassNames).join(' ')}\n                    data-time={slatMeta.isoTimeStr}\n                  >\n                    {innerContent}\n                  </td>\n                )}\n              </RenderHook>\n            </tr>\n          )\n        })}\n      </tbody>\n    )\n  }\n}\n","import {\n  createElement,\n  VNode,\n  BaseComponent,\n  RefMap,\n  CssDimValue,\n  createRef,\n  PositionCache,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSlatsBody } from './TimeColsSlatsBody'\n\nexport interface TimeColsSlatsProps extends TimeColsSlatsContentProps {\n  dateProfile: DateProfile\n  clientWidth: number | null\n  minHeight: CssDimValue\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  onCoords?: (coords: TimeColsSlatsCoords | null) => void\n}\n\ninterface TimeColsSlatsContentProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\nexport class TimeColsSlats extends BaseComponent<TimeColsSlatsProps> {\n  private rootElRef = createRef<HTMLDivElement>()\n  private slatElRefs = new RefMap<HTMLTableRowElement>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <div ref={this.rootElRef} className=\"fc-timegrid-slots\">\n        <table\n          aria-hidden\n          className={context.theme.getClass('table')}\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n            height: props.minHeight,\n          }}\n        >\n          {props.tableColGroupNode /* relies on there only being a single <col> for the axis */}\n          <TimeColsSlatsBody\n            slatElRefs={this.slatElRefs}\n            axis={props.axis}\n            slatMetas={props.slatMetas}\n          />\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing()\n  }\n\n  componentDidUpdate() {\n    this.updateSizing()\n  }\n\n  componentWillUnmount() {\n    if (this.props.onCoords) {\n      this.props.onCoords(null)\n    }\n  }\n\n  updateSizing() {\n    let { context, props } = this\n\n    if (\n      props.onCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      let rootEl = this.rootElRef.current\n\n      if (rootEl.offsetHeight) { // not hidden by css\n        props.onCoords(\n          new TimeColsSlatsCoords(\n            new PositionCache(\n              this.rootElRef.current,\n              collectSlatEls(this.slatElRefs.currentMap, props.slatMetas),\n              false,\n              true, // vertical\n            ),\n            this.props.dateProfile,\n            context.options.slotDuration,\n          ),\n        )\n      }\n    }\n  }\n}\n\nfunction collectSlatEls(elMap: { [key: string]: HTMLElement }, slatMetas: TimeSlatMeta[]) {\n  return slatMetas.map((slatMeta) => elMap[slatMeta.key])\n}\n","import { DateMarker, Seg, EventSegUiInteractionState } from '@fullcalendar/common'\n\n// JUST A DATA STRUCTURE, not a component\n\nexport interface TimeColsSeg extends Seg {\n  col: number\n  start: DateMarker\n  end: DateMarker\n}\n\nexport function splitSegsByCol(segs: TimeColsSeg[] | null, colCnt: number) { // can be given null/undefined!\n  let segsByCol: TimeColsSeg[][] = []\n  let i\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([])\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i])\n    }\n  }\n\n  return segsByCol\n}\n\nexport function splitInteractionByCol(ui: EventSegUiInteractionState | null, colCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.col].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n","import {\n  createElement, MoreLinkContentArg, MoreLinkRoot, BaseComponent, createRef, setRef,\n  Dictionary, DateProfile, DateRange, DateMarker, EventSegUiInteractionState, CssDimValue,\n} from '@fullcalendar/common'\nimport { renderPlainFgSegs } from './TimeCol'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColMoreLinkProps {\n  hiddenSegs: TimeColsSeg[]\n  top: CssDimValue\n  bottom: CssDimValue\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  nowDate: DateMarker\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState\n  eventResize: EventSegUiInteractionState\n}\n\nexport class TimeColMoreLink extends BaseComponent<TimeColMoreLinkProps> {\n  rootElRef = createRef<HTMLElement>()\n\n  render() {\n    let { props } = this\n    return (\n      <MoreLinkRoot\n        allDayDate={null}\n        moreCnt={props.hiddenSegs.length}\n        allSegs={props.hiddenSegs}\n        hiddenSegs={props.hiddenSegs}\n        alignmentElRef={this.rootElRef}\n        defaultContent={renderMoreLinkInner}\n        extraDateSpan={props.extraDateSpan}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        popoverContent={() => renderPlainFgSegs(props.hiddenSegs, props)}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) => (\n          <a\n            ref={(el: HTMLElement | null) => {\n              setRef(rootElRef, el)\n              setRef(this.rootElRef, el)\n            }}\n            className={['fc-timegrid-more-link'].concat(classNames).join(' ')}\n            style={{ top: props.top, bottom: props.bottom }}\n            onClick={handleClick}\n            title={title}\n            aria-expanded={isExpanded}\n            aria-controls={popoverId}\n          >\n            <div ref={innerElRef} className=\"fc-timegrid-more-link-inner fc-sticky\">\n              {innerContent}\n            </div>\n          </a>\n        )}\n      </MoreLinkRoot>\n    )\n  }\n}\n\nfunction renderMoreLinkInner(props: MoreLinkContentArg) {\n  return props.shortText\n}\n","import {\n  SegEntry,\n  SegHierarchy,\n  SegRect,\n  buildEntryKey,\n  getEntrySpanEnd,\n  binarySearch,\n  SegEntryGroup,\n  groupIntersectingEntries,\n} from '@fullcalendar/common'\n\ninterface SegNode extends SegEntry {\n  nextLevelNodes: SegNode[] // with highest-pressure first\n}\n\ntype SegNodeAndPressure = [ SegNode, number ]\n\ninterface SegSiblingRange { // will ALWAYS have span of 1 or more items. if not, will be null\n  level: number\n  lateralStart: number\n  lateralEnd: number\n}\n\nexport interface SegWebRect extends SegRect {\n  stackDepth: number\n  stackForward: number\n}\n\n// segInputs assumed sorted\nexport function buildPositioning(\n  segInputs: SegEntry[],\n  strictOrder?: boolean,\n  maxStackCnt?: number,\n): { segRects: SegWebRect[], hiddenGroups: SegEntryGroup[] } {\n  let hierarchy = new SegHierarchy()\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let hiddenGroups = groupIntersectingEntries(hiddenEntries)\n\n  let web = buildWeb(hierarchy)\n  web = stretchWeb(web, 1) // all levelCoords/thickness will have 0.0-1.0\n  let segRects = webToRects(web)\n\n  return { segRects, hiddenGroups }\n}\n\nfunction buildWeb(hierarchy: SegHierarchy): SegNode[] {\n  const { entriesByLevel } = hierarchy\n\n  const buildNode = cacheable(\n    (level: number, lateral: number) => level + ':' + lateral,\n    (level: number, lateral: number): SegNodeAndPressure => {\n      let siblingRange = findNextLevelSegs(hierarchy, level, lateral)\n      let nextLevelRes = buildNodes(siblingRange, buildNode)\n      let entry = entriesByLevel[level][lateral]\n\n      return [\n        { ...entry, nextLevelNodes: nextLevelRes[0] },\n        entry.thickness + nextLevelRes[1], // the pressure builds\n      ]\n    },\n  )\n\n  return buildNodes(\n    entriesByLevel.length\n      ? { level: 0, lateralStart: 0, lateralEnd: entriesByLevel[0].length }\n      : null,\n    buildNode,\n  )[0]\n}\n\nfunction buildNodes(\n  siblingRange: SegSiblingRange | null,\n  buildNode: (level: number, lateral: number) => SegNodeAndPressure,\n): [SegNode[], number] { // number is maxPressure\n  if (!siblingRange) {\n    return [[], 0]\n  }\n\n  let { level, lateralStart, lateralEnd } = siblingRange\n  let lateral = lateralStart\n  let pairs: SegNodeAndPressure[] = []\n\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral))\n    lateral += 1\n  }\n\n  pairs.sort(cmpDescPressures)\n\n  return [\n    pairs.map(extractNode),\n    pairs[0][1], // first item's pressure\n  ]\n}\n\nfunction cmpDescPressures(a: SegNodeAndPressure, b: SegNodeAndPressure) { // sort pressure high -> low\n  return b[1] - a[1]\n}\n\nfunction extractNode(a: SegNodeAndPressure): SegNode {\n  return a[0]\n}\n\nfunction findNextLevelSegs(hierarchy: SegHierarchy, subjectLevel: number, subjectLateral: number): SegSiblingRange | null {\n  let { levelCoords, entriesByLevel } = hierarchy\n  let subjectEntry = entriesByLevel[subjectLevel][subjectLateral]\n  let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness\n  let levelCnt = levelCoords.length\n  let level = subjectLevel\n\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1) ; // do nothing\n\n  for (; level < levelCnt; level += 1) {\n    let entries = entriesByLevel[level]\n    let entry: SegEntry\n    let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd)\n    let lateralStart = searchIndex[0] + searchIndex[1] // if exact match (which doesn't collide), go to next one\n    let lateralEnd = lateralStart\n\n    while ( // loop through entries that horizontally intersect\n      (entry = entries[lateralEnd]) && // but not past the whole seg list\n      entry.span.start < subjectEntry.span.end\n    ) { lateralEnd += 1 }\n\n    if (lateralStart < lateralEnd) {\n      return { level, lateralStart, lateralEnd }\n    }\n  }\n\n  return null\n}\n\nfunction stretchWeb(topLevelNodes: SegNode[], totalThickness: number): SegNode[] {\n  const stretchNode = cacheable(\n    (node: SegNode, startCoord: number, prevThickness: number) => buildEntryKey(node),\n    (node: SegNode, startCoord: number, prevThickness: number): [number, SegNode] => { // [startCoord, node]\n      let { nextLevelNodes, thickness } = node\n      let allThickness = thickness + prevThickness\n      let thicknessFraction = thickness / allThickness\n      let endCoord: number\n      let newChildren: SegNode[] = []\n\n      if (!nextLevelNodes.length) {\n        endCoord = totalThickness\n      } else {\n        for (let childNode of nextLevelNodes) {\n          if (endCoord === undefined) {\n            let res = stretchNode(childNode, startCoord, allThickness)\n            endCoord = res[0]\n            newChildren.push(res[1])\n          } else {\n            let res = stretchNode(childNode, endCoord, 0)\n            newChildren.push(res[1])\n          }\n        }\n      }\n\n      let newThickness = (endCoord - startCoord) * thicknessFraction\n      return [endCoord - newThickness, {\n        ...node,\n        thickness: newThickness,\n        nextLevelNodes: newChildren,\n      }]\n    },\n  )\n\n  return topLevelNodes.map((node: SegNode) => stretchNode(node, 0, 0)[1])\n}\n\n// not sorted in any particular order\nfunction webToRects(topLevelNodes: SegNode[]): SegWebRect[] {\n  let rects: SegWebRect[] = []\n\n  const processNode = cacheable(\n    (node: SegNode, levelCoord: number, stackDepth: number) => buildEntryKey(node),\n    (node: SegNode, levelCoord: number, stackDepth: number) => { // returns forwardPressure\n      let rect: SegWebRect = {\n        ...node,\n        levelCoord,\n        stackDepth,\n        stackForward: 0, // will assign after recursing\n      }\n      rects.push(rect)\n\n      return (\n        rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1\n      )\n    },\n  )\n\n  function processNodes(nodes: SegNode[], levelCoord: number, stackDepth: number) { // returns stackForward\n    let stackForward = 0\n    for (let node of nodes) {\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward)\n    }\n    return stackForward\n  }\n\n  processNodes(topLevelNodes, 0, 0)\n  return rects // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n\n// TODO: move to general util\n\nfunction cacheable<Args extends any[], Res>(\n  keyFunc: (...args: Args) => string,\n  workFunc: (...args: Args) => Res,\n): ((...args: Args) => Res) {\n  const cache: { [key: string]: Res } = {}\n\n  return (...args: Args) => {\n    let key = keyFunc(...args)\n    return (key in cache)\n      ? cache[key]\n      : (cache[key] = workFunc(...args))\n  }\n}\n","import {\n  SegSpan,\n  SegEntry,\n  SegEntryGroup,\n  DateMarker,\n} from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { SegWebRect, buildPositioning } from './seg-web'\n\n// public interface\n// ------------------------------------------------------------------------------------------\n\nexport interface TimeColFgSegPlacement {\n  seg: TimeColsSeg\n  rect: SegWebRect | null\n}\n\nexport function computeSegVCoords(\n  segs: TimeColsSeg[],\n  colDate: DateMarker,\n  slatCoords: TimeColsSlatsCoords = null,\n  eventMinHeight: number = 0, // might be null/undefined :(\n): SegSpan[] {\n  let vcoords: SegSpan[] = []\n\n  if (slatCoords) {\n    for (let i = 0; i < segs.length; i += 1) {\n      let seg = segs[i]\n      let spanStart = slatCoords.computeDateTop(seg.start, colDate)\n      let spanEnd = Math.max(\n        spanStart + (eventMinHeight || 0), // :(\n        slatCoords.computeDateTop(seg.end, colDate),\n      )\n      vcoords.push({\n        start: Math.round(spanStart), // for barely-overlapping collisions\n        end: Math.round(spanEnd), //\n      })\n    }\n  }\n\n  return vcoords\n}\n\nexport function computeFgSegPlacements(\n  segs: TimeColsSeg[],\n  segVCoords: SegSpan[], // might not have for every seg\n  eventOrderStrict?: boolean,\n  eventMaxStack?: number,\n): { segPlacements: TimeColFgSegPlacement[], hiddenGroups: SegEntryGroup[] } {\n  let segInputs: SegEntry[] = []\n  let dumbSegs: TimeColsSeg[] = [] // segs without coords\n\n  for (let i = 0; i < segs.length; i += 1) {\n    let vcoords = segVCoords[i]\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords,\n      })\n    } else {\n      dumbSegs.push(segs[i])\n    }\n  }\n\n  let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack)\n  let segPlacements: TimeColFgSegPlacement[] = []\n\n  for (let segRect of segRects) {\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect,\n    })\n  }\n\n  for (let dumbSeg of dumbSegs) {\n    segPlacements.push({ seg: dumbSeg, rect: null })\n  }\n\n  return { segPlacements, hiddenGroups }\n}\n","import { createElement, StandardEvent, BaseComponent, MinimalEventProps, createFormatter } from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false,\n})\n\nexport interface TimeColEventProps extends MinimalEventProps {\n  isShort: boolean\n}\n\nexport class TimeColEvent extends BaseComponent<TimeColEventProps> {\n  render() {\n    let classNames = [\n      'fc-timegrid-event',\n      'fc-v-event',\n    ]\n\n    if (this.props.isShort) {\n      classNames.push('fc-timegrid-event-short')\n    }\n\n    return (\n      <StandardEvent\n        {...this.props}\n        defaultTimeFormat={DEFAULT_TIME_FORMAT}\n        extraClassNames={classNames}\n      />\n    )\n  }\n}\n","import {\n  DateMarker, BaseComponent, createElement,\n  DateRange, DayCellContent, DateProfile,\n} from '@fullcalendar/common'\n\nexport interface TimeColMiscProps { // should be given nowDate too??\n  dateProfile: DateProfile\n  date: DateMarker\n  todayRange: DateRange\n  extraHookProps?: any\n}\n\nexport class TimeColMisc extends BaseComponent<TimeColMiscProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <DayCellContent date={props.date} dateProfile={props.dateProfile} todayRange={props.todayRange} extraHookProps={props.extraHookProps}>\n        {(innerElRef, innerContent) => (\n          innerContent &&\n            <div className=\"fc-timegrid-col-misc\" ref={innerElRef}>{innerContent}</div>\n        )}\n      </DayCellContent>\n    )\n  }\n}\n","import {\n  Ref, DateMarker, BaseComponent, createElement, EventSegUiInteractionState, Seg, getSegMeta,\n  DateRange, Fragment, DayCellRoot, NowIndicatorRoot, BgEvent, renderFill, buildIsoString, computeEarliestSegStart,\n  DateProfile, buildEventRangeKey, sortEventSegs, memoize, SegEntryGroup, SegEntry, Dictionary, SegSpan, CssDimValue,\n} from '@fullcalendar/common'\nimport { TimeColMoreLink } from './TimeColMoreLink'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { SegWebRect } from './seg-web'\nimport { computeFgSegPlacements, computeSegVCoords } from './event-placement'\nimport { TimeColEvent } from './TimeColEvent'\nimport { TimeColMisc } from './TimeColMisc'\n\nexport interface TimeColProps {\n  elRef?: Ref<HTMLTableCellElement>\n  dateProfile: DateProfile\n  date: DateMarker\n  nowDate: DateMarker\n  todayRange: DateRange\n  extraDataAttrs?: any\n  extraHookProps?: any\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  fgEventSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  businessHourSegs: TimeColsSeg[]\n  nowIndicatorSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  slatCoords: TimeColsSlatsCoords\n  forPrint: boolean\n}\n\nexport class TimeCol extends BaseComponent<TimeColProps> {\n  sortEventSegs = memoize(sortEventSegs)\n  // TODO: memoize event-placement?\n\n  render() {\n    let { props, context } = this\n    let isSelectMirror = context.options.selectMirror\n\n    let mirrorSegs: Seg[] = // yuck\n      (props.eventDrag && props.eventDrag.segs) ||\n      (props.eventResize && props.eventResize.segs) ||\n      (isSelectMirror && props.dateSelectionSegs) ||\n      []\n\n    let interactionAffectedInstances = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder) as TimeColsSeg[]\n\n    return (\n      <DayCellRoot\n        elRef={props.elRef}\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        extraHookProps={props.extraHookProps}\n      >\n        {(rootElRef, classNames, dataAttrs) => (\n          <td\n            ref={rootElRef}\n            role=\"gridcell\"\n            className={['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')}\n            {...dataAttrs}\n            {...props.extraDataAttrs}\n          >\n            <div className=\"fc-timegrid-col-frame\">\n              <div className=\"fc-timegrid-col-bg\">\n                {this.renderFillSegs(props.businessHourSegs, 'non-business')}\n                {this.renderFillSegs(props.bgEventSegs, 'bg-event')}\n                {this.renderFillSegs(props.dateSelectionSegs, 'highlight')}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  sortedFgSegs,\n                  interactionAffectedInstances,\n                  false,\n                  false,\n                  false,\n                )}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  mirrorSegs as TimeColsSeg[],\n                  {},\n                  Boolean(props.eventDrag),\n                  Boolean(props.eventResize),\n                  Boolean(isSelectMirror),\n                )}\n              </div>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                {this.renderNowIndicator(props.nowIndicatorSegs)}\n              </div>\n              <TimeColMisc\n                date={props.date}\n                dateProfile={props.dateProfile}\n                todayRange={props.todayRange}\n                extraHookProps={props.extraHookProps}\n              />\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  renderFgSegs(\n    sortedFgSegs: TimeColsSeg[],\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { props } = this\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props)\n    }\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting)\n  }\n\n  renderPositionedFgSegs(\n    segs: TimeColsSeg[], // if not mirror, needs to be sorted\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options\n    let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight)\n    let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack)\n\n    return (\n      <Fragment>\n        {this.renderHiddenGroups(hiddenGroups, segs)}\n        {segPlacements.map((segPlacement) => {\n          let { seg, rect } = segPlacement\n          let instanceId = seg.eventRange.instance.instanceId\n          let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect)\n          let vStyle = computeSegVStyle(rect && rect.span)\n          let hStyle = (!isMirror && rect) ? this.computeSegHStyle(rect) : { left: 0, right: 0 }\n          let isInset = Boolean(rect) && rect.stackForward > 0\n          let isShort = Boolean(rect) && (rect.span.end - rect.span.start) < eventShortHeight // look at other places for this problem\n\n          return (\n            <div\n              className={\n                'fc-timegrid-event-harness' +\n                (isInset ? ' fc-timegrid-event-harness-inset' : '')\n              }\n              key={instanceId}\n              style={{\n                visibility: isVisible ? ('' as any) : 'hidden',\n                ...vStyle,\n                ...hStyle,\n              }}\n            >\n              <TimeColEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                isShort={isShort}\n                {...getSegMeta(seg, todayRange, nowDate)}\n              />\n            </div>\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  // will already have eventMinHeight applied because segInputs already had it\n  renderHiddenGroups(hiddenGroups: SegEntryGroup[], segs: TimeColsSeg[]) {\n    let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props\n    return (\n      <Fragment>\n        {hiddenGroups.map((hiddenGroup) => {\n          let positionCss = computeSegVStyle(hiddenGroup.span)\n          let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs)\n          return (\n            <TimeColMoreLink\n              key={buildIsoString(computeEarliestSegStart(hiddenSegs))}\n              hiddenSegs={hiddenSegs}\n              top={positionCss.top}\n              bottom={positionCss.bottom}\n              extraDateSpan={extraDateSpan}\n              dateProfile={dateProfile}\n              todayRange={todayRange}\n              nowDate={nowDate}\n              eventSelection={eventSelection}\n              eventDrag={eventDrag}\n              eventResize={eventResize}\n            />\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  renderFillSegs(segs: TimeColsSeg[], fillType: string) {\n    let { props, context } = this\n    let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight) // don't assume all populated\n\n    let children = segVCoords.map((vcoords, i) => {\n      let seg = segs[i]\n      return (\n        <div\n          key={buildEventRangeKey(seg.eventRange)}\n          className=\"fc-timegrid-bg-harness\"\n          style={computeSegVStyle(vcoords)}\n        >\n          {fillType === 'bg-event' ?\n            <BgEvent seg={seg} {...getSegMeta(seg, props.todayRange, props.nowDate)} /> :\n            renderFill(fillType)}\n        </div>\n      )\n    })\n\n    return <Fragment>{children}</Fragment>\n  }\n\n  renderNowIndicator(segs: TimeColsSeg[]) {\n    let { slatCoords, date } = this.props\n\n    if (!slatCoords) { return null }\n\n    return segs.map((seg, i) => (\n      <NowIndicatorRoot\n        isAxis={false}\n        date={date}\n        // key doesn't matter. will only ever be one\n        key={i} // eslint-disable-line react/no-array-index-key\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div\n            ref={rootElRef}\n            className={['fc-timegrid-now-indicator-line'].concat(classNames).join(' ')}\n            style={{ top: slatCoords.computeDateTop(seg.start, date) }}\n          >\n            {innerContent}\n          </div>\n        )}\n      </NowIndicatorRoot>\n    ))\n  }\n\n  computeSegHStyle(segHCoords: SegWebRect) {\n    let { isRtl, options } = this.context\n    let shouldOverlap = options.slotEventOverlap\n    let nearCoord = segHCoords.levelCoord // the left side if LTR. the right side if RTL. floating-point\n    let farCoord = segHCoords.levelCoord + segHCoords.thickness // the right side if LTR. the left side if RTL. floating-point\n    let left // amount of space from left edge, a fraction of the total width\n    let right // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2)\n    }\n\n    if (isRtl) {\n      left = 1 - farCoord\n      right = nearCoord\n    } else {\n      left = nearCoord\n      right = 1 - farCoord\n    }\n\n    let props = {\n      zIndex: segHCoords.stackDepth + 1, // convert from 0-base to 1-based\n      left: left * 100 + '%',\n      right: right * 100 + '%',\n    }\n\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2 // 10 is a guesstimate of the icon's width\n    }\n\n    return props\n  }\n}\n\nexport function renderPlainFgSegs(\n  sortedFgSegs: TimeColsSeg[],\n  { todayRange, nowDate, eventSelection, eventDrag, eventResize }: {\n    todayRange: DateRange\n    nowDate: DateMarker\n    eventSelection: string\n    eventDrag: EventSegUiInteractionState | null\n    eventResize: EventSegUiInteractionState | null\n  },\n) {\n  let hiddenInstances =\n    (eventDrag ? eventDrag.affectedInstances : null) ||\n    (eventResize ? eventResize.affectedInstances : null) ||\n    {}\n  return (\n    <Fragment>\n      {sortedFgSegs.map((seg) => {\n        let instanceId = seg.eventRange.instance.instanceId\n        return (\n          <div\n            key={instanceId}\n            style={{ visibility: hiddenInstances[instanceId] ? 'hidden' : ('' as any) }}\n          >\n            <TimeColEvent\n              seg={seg}\n              isDragging={false}\n              isResizing={false}\n              isDateSelecting={false}\n              isSelected={instanceId === eventSelection}\n              isShort={false}\n              {...getSegMeta(seg, todayRange, nowDate)}\n            />\n          </div>\n        )\n      })}\n    </Fragment>\n  )\n}\n\nfunction computeSegVStyle(segVCoords: SegSpan | null): { top: CssDimValue, bottom: CssDimValue } {\n  if (!segVCoords) {\n    return { top: '', bottom: '' }\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end,\n  }\n}\n\nfunction compileSegsFromEntries(\n  segEntries: SegEntry[],\n  allSegs: TimeColsSeg[],\n): TimeColsSeg[] {\n  return segEntries.map((segEntry) => allSegs[segEntry.index])\n}\n","import {\n  createElement, VNode,\n  BaseComponent,\n  EventSegUiInteractionState,\n  CssDimValue,\n  DateMarker,\n  RefMap,\n  createRef,\n  PositionCache,\n  memoize,\n  DateRange,\n  NowIndicatorRoot,\n  DateProfile,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TimeColsSeg, splitSegsByCol, splitInteractionByCol } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeCol } from './TimeCol'\n\nexport interface TimeColsContentProps {\n  axis: boolean\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  nowIndicatorSegs: TimeColsSeg[]\n  clientWidth: number | null\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  slatCoords: TimeColsSlatsCoords\n  onColCoords?: (colCoords: PositionCache) => void\n  forPrint: boolean\n}\n\nexport class TimeColsContent extends BaseComponent<TimeColsContentProps> { // TODO: rename\n  private splitFgEventSegs = memoize(splitSegsByCol)\n  private splitBgEventSegs = memoize(splitSegsByCol)\n  private splitBusinessHourSegs = memoize(splitSegsByCol)\n  private splitNowIndicatorSegs = memoize(splitSegsByCol)\n  private splitDateSelectionSegs = memoize(splitSegsByCol)\n  private splitEventDrag = memoize(splitInteractionByCol)\n  private splitEventResize = memoize(splitInteractionByCol)\n  private rootElRef = createRef<HTMLDivElement>()\n  private cellElRefs = new RefMap<HTMLTableCellElement>()\n\n  render() {\n    let { props, context } = this\n    let nowIndicatorTop =\n      context.options.nowIndicator &&\n      props.slatCoords &&\n      props.slatCoords.safeComputeTop(props.nowDate) // might return void\n\n    let colCnt = props.cells.length\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt)\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt)\n    let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt)\n\n    return (\n      <div className=\"fc-timegrid-cols\" ref={this.rootElRef}>\n        <table\n          role=\"presentation\"\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n          }}\n        >\n          {props.tableColGroupNode}\n          <tbody role=\"presentation\">\n            <tr role=\"row\">\n              {props.axis && (\n                <td aria-hidden className=\"fc-timegrid-col fc-timegrid-axis\">\n                  <div className=\"fc-timegrid-col-frame\">\n                    <div className=\"fc-timegrid-now-indicator-container\">\n                      {typeof nowIndicatorTop === 'number' && (\n                        <NowIndicatorRoot isAxis date={props.nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )}\n                    </div>\n                  </div>\n                </td>\n              )}\n              {props.cells.map((cell, i) => (\n                <TimeCol\n                  key={cell.key}\n                  elRef={this.cellElRefs.createRef(cell.key)}\n                  dateProfile={props.dateProfile}\n                  date={cell.date}\n                  nowDate={props.nowDate}\n                  todayRange={props.todayRange}\n                  extraHookProps={cell.extraHookProps}\n                  extraDataAttrs={cell.extraDataAttrs}\n                  extraClassNames={cell.extraClassNames}\n                  extraDateSpan={cell.extraDateSpan}\n                  fgEventSegs={fgEventSegsByRow[i]}\n                  bgEventSegs={bgEventSegsByRow[i]}\n                  businessHourSegs={businessHourSegsByRow[i]}\n                  nowIndicatorSegs={nowIndicatorSegsByRow[i]}\n                  dateSelectionSegs={dateSelectionSegsByRow[i]}\n                  eventDrag={eventDragByRow[i]}\n                  eventResize={eventResizeByRow[i]}\n                  slatCoords={props.slatCoords}\n                  eventSelection={props.eventSelection}\n                  forPrint={props.forPrint}\n                />\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateCoords()\n  }\n\n  componentDidUpdate() {\n    this.updateCoords()\n  }\n\n  updateCoords() {\n    let { props } = this\n\n    if (\n      props.onColCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(\n        new PositionCache(\n          this.rootElRef.current,\n          collectCellEls(this.cellElRefs.currentMap, props.cells),\n          true, // horizontal\n          false,\n        ),\n      )\n    }\n  }\n}\n\nfunction collectCellEls(elMap: { [key: string]: HTMLElement }, cells: DayTableCell[]) {\n  return cells.map((cell) => elMap[cell.key])\n}\n","import {\n  createElement, VNode,\n  addDurations,\n  multiplyDuration,\n  wholeDivideDurations,\n  DateMarker,\n  EventSegUiInteractionState,\n  memoize,\n  CssDimValue,\n  PositionCache,\n  ScrollResponder,\n  ScrollRequest,\n  DateRange,\n  Duration,\n  DateProfile,\n  DayTableCell,\n  Hit,\n  DateComponent,\n} from '@fullcalendar/common'\nimport { TimeColsSlats } from './TimeColsSlats'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsContent } from './TimeColsContent'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColsProps {\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  slotDuration: Duration\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  nowIndicatorSegs: TimeColsSeg[]\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\ninterface TimeColsState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\nexport class TimeCols extends DateComponent<TimeColsProps, TimeColsState> {\n  private processSlotOptions = memoize(processSlotOptions)\n  private scrollResponder: ScrollResponder\n  private colCoords: PositionCache\n\n  state = {\n    slatCoords: null,\n  }\n\n  render() {\n    let { props, state } = this\n\n    return (\n      <div\n        className=\"fc-timegrid-body\"\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <TimeColsSlats\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          slatMetas={props.slatMetas}\n          clientWidth={props.clientWidth}\n          minHeight={props.expandRows ? props.clientHeight : ''}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */}\n          onCoords={this.handleSlatCoords}\n        />\n        <TimeColsContent\n          cells={props.cells}\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          businessHourSegs={props.businessHourSegs}\n          bgEventSegs={props.bgEventSegs}\n          fgEventSegs={props.fgEventSegs}\n          dateSelectionSegs={props.dateSelectionSegs}\n          eventSelection={props.eventSelection}\n          eventDrag={props.eventDrag}\n          eventResize={props.eventResize}\n          todayRange={props.todayRange}\n          nowDate={props.nowDate}\n          nowIndicatorSegs={props.nowIndicatorSegs}\n          clientWidth={props.clientWidth}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.tableColGroupNode}\n          slatCoords={state.slatCoords}\n          onColCoords={this.handleColCoords}\n          forPrint={props.forPrint}\n        />\n      </div>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement | null) => {\n    if (el) {\n      this.context.registerInteractiveComponent(this, {\n        el,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  componentDidMount() {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest)\n  }\n\n  componentDidUpdate(prevProps: TimeColsProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile)\n  }\n\n  componentWillUnmount() {\n    this.scrollResponder.detach()\n  }\n\n  handleScrollRequest = (request: ScrollRequest) => {\n    let { onScrollTopRequest } = this.props\n    let { slatCoords } = this.state\n\n    if (onScrollTopRequest && slatCoords) {\n      if (request.time) {\n        let top = slatCoords.computeTimeTop(request.time)\n        top = Math.ceil(top) // zoom can give weird floating-point values. rather scroll a little bit further\n        if (top) {\n          top += 1 // to overcome top border that slots beyond the first have. looks better\n        }\n\n        onScrollTopRequest(top)\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  handleColCoords = (colCoords: PositionCache | null) => {\n    this.colCoords = colCoords\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords | null) => {\n    this.setState({ slatCoords })\n\n    if (this.props.onSlatCoords) {\n      this.props.onSlatCoords(slatCoords)\n    }\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { dateEnv, options } = this.context\n    let { colCoords } = this\n    let { dateProfile } = this.props\n    let { slatCoords } = this.state\n    let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration)\n\n    let colIndex = colCoords.leftToIndex(positionLeft)\n    let slatIndex = slatCoords.positions.topToIndex(positionTop)\n\n    if (colIndex != null && slatIndex != null) {\n      let cell = this.props.cells[colIndex]\n      let slatTop = slatCoords.positions.tops[slatIndex]\n      let slatHeight = slatCoords.positions.getHeight(slatIndex)\n      let partial = (positionTop - slatTop) / slatHeight // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot) // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex\n\n      let dayDate = this.props.cells[colIndex].date\n      let time = addDurations(\n        dateProfile.slotMinTime,\n        multiplyDuration(snapDuration, snapIndex),\n      )\n\n      let start = dateEnv.add(dayDate, time)\n      let end = dateEnv.add(start, snapDuration)\n\n      return {\n        dateProfile,\n        dateSpan: {\n          range: { start, end },\n          allDay: false,\n          ...cell.extraDateSpan,\n        },\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight,\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n}\n\nfunction processSlotOptions(slotDuration: Duration, snapDurationOverride: Duration | null) {\n  let snapDuration = snapDurationOverride || slotDuration\n  let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration)\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration\n    snapsPerSlot = 1\n    // TODO: say warning?\n  }\n\n  return { snapDuration, snapsPerSlot }\n}\n","import { intersectRanges, DateRange, Slicer } from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport class DayTimeColsSlicer extends Slicer<TimeColsSeg, [DateRange[]]> {\n  sliceRange(range: DateRange, dayRanges: DateRange[]): TimeColsSeg[] {\n    let segs: TimeColsSeg[] = []\n\n    for (let col = 0; col < dayRanges.length; col += 1) {\n      let segRange = intersectRanges(range, dayRanges[col])\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col,\n        })\n      }\n    }\n\n    return segs\n  }\n}\n","import {\n  createElement,\n  createRef,\n  VNode,\n  DateComponent,\n  DateProfile,\n  EventStore,\n  EventUiHash,\n  EventInteractionState,\n  DateSpan,\n  memoize,\n  DateRange,\n  DayTableModel,\n  DateEnv,\n  DateMarker,\n  NowTimer,\n  CssDimValue,\n  Duration,\n} from '@fullcalendar/common'\nimport { TimeCols } from './TimeCols'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\n\nexport interface DayTimeColsProps {\n  dateProfile: DateProfile\n  dayTableModel: DayTableModel\n  axis: boolean\n  slotDuration: Duration\n  slatMetas: TimeSlatMeta[]\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n}\n\nexport class DayTimeCols extends DateComponent<DayTimeColsProps> {\n  private buildDayRanges = memoize(buildDayRanges)\n  private slicer = new DayTimeColsSlicer()\n  private timeColsRef = createRef<TimeCols>()\n\n  render() {\n    let { props, context } = this\n    let { dateProfile, dayTableModel } = props\n\n    let isNowIndicator = context.options.nowIndicator\n    let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv)\n\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return (\n      <NowTimer unit={isNowIndicator ? 'minute' : 'day'}>\n        {(nowDate: DateMarker, todayRange: DateRange) => (\n          <TimeCols\n            ref={this.timeColsRef}\n            {...this.slicer.sliceProps(props, dateProfile, null, context, dayRanges)}\n            forPrint={props.forPrint}\n            axis={props.axis}\n            dateProfile={dateProfile}\n            slatMetas={props.slatMetas}\n            slotDuration={props.slotDuration}\n            cells={dayTableModel.cells[0]}\n            tableColGroupNode={props.tableColGroupNode}\n            tableMinWidth={props.tableMinWidth}\n            clientWidth={props.clientWidth}\n            clientHeight={props.clientHeight}\n            expandRows={props.expandRows}\n            nowDate={nowDate}\n            nowIndicatorSegs={isNowIndicator && this.slicer.sliceNowDate(nowDate, context, dayRanges)}\n            todayRange={todayRange}\n            onScrollTopRequest={props.onScrollTopRequest}\n            onSlatCoords={props.onSlatCoords}\n          />\n        )}\n      </NowTimer>\n    )\n  }\n}\n\nexport function buildDayRanges(dayTableModel: DayTableModel, dateProfile: DateProfile, dateEnv: DateEnv): DateRange[] {\n  let ranges: DateRange[] = []\n\n  for (let date of dayTableModel.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime),\n    })\n  }\n\n  return ranges\n}\n","import {\n  createDuration,\n  asRoughMs,\n  formatIsoTimeString,\n  addDurations,\n  wholeDivideDurations,\n  Duration,\n  DateMarker,\n  DateEnv,\n} from '@fullcalendar/common'\n\nexport interface TimeSlatMeta {\n  date: DateMarker\n  time: Duration\n  key: string\n  isoTimeStr: string\n  isLabeled: boolean\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [\n  { hours: 1 },\n  { minutes: 30 },\n  { minutes: 15 },\n  { seconds: 30 },\n  { seconds: 15 },\n]\n\nexport function buildSlatMetas(\n  slotMinTime: Duration,\n  slotMaxTime: Duration,\n  explicitLabelInterval: Duration | null,\n  slotDuration: Duration,\n  dateEnv: DateEnv,\n) {\n  let dayStart = new Date(0)\n  let slatTime = slotMinTime\n  let slatIterator = createDuration(0)\n  let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration)\n  let metas: TimeSlatMeta[] = []\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    let date = dateEnv.add(dayStart, slatTime)\n    let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null\n\n    metas.push({\n      date,\n      time: slatTime,\n      key: date.toISOString(), // we can't use the isoTimeStr for uniqueness when minTime/maxTime beyone 0h/24h\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled,\n    })\n\n    slatTime = addDurations(slatTime, slotDuration)\n    slatIterator = addDurations(slatIterator, slotDuration)\n  }\n\n  return metas\n}\n\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  let i\n  let labelInterval\n  let slotsPerLabel\n\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i])\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration)\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval\n    }\n  }\n\n  return slotDuration // fall back\n}\n","import {\n  createElement,\n  DateProfileGenerator, DateProfile,\n  DayHeader,\n  DaySeriesModel,\n  DayTableModel,\n  memoize,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { DayTable } from '@fullcalendar/daygrid'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeCols } from './DayTimeCols'\nimport { buildSlatMetas } from './time-slat-meta'\n\nexport class DayTimeColsView extends TimeColsView {\n  private buildTimeColsModel = memoize(buildTimeColsModel)\n  private buildSlatMetas = memoize(buildSlatMetas)\n\n  render() {\n    let { options, dateEnv, dateProfileGenerator } = this.context\n    let { props } = this\n    let { dateProfile } = props\n    let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator)\n    let splitProps = this.allDaySplitter.splitProps(props)\n    let slatMetas = this.buildSlatMetas(\n      dateProfile.slotMinTime,\n      dateProfile.slotMaxTime,\n      options.slotLabelInterval,\n      options.slotDuration,\n      dateEnv,\n    )\n    let { dayMinWidth } = options\n    let hasAttachedAxis = !dayMinWidth\n    let hasDetachedAxis = dayMinWidth\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        dates={dayTableModel.headerDates}\n        dateProfile={dateProfile}\n        datesRepDistinctDays\n        renderIntro={hasAttachedAxis ? this.renderHeadAxis : null}\n      />\n    )\n\n    let allDayContent = (options.allDaySlot !== false) && ((contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        {...splitProps.allDay}\n        dateProfile={dateProfile}\n        dayTableModel={dayTableModel}\n        nextDayThreshold={options.nextDayThreshold}\n        tableMinWidth={contentArg.tableMinWidth}\n        colGroupNode={contentArg.tableColGroupNode}\n        renderRowIntro={hasAttachedAxis ? this.renderTableRowAxis : null}\n        showWeekNumbers={false}\n        expandRows={false}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n        {...this.getAllDayMaxEventProps()}\n      />\n    ))\n\n    let timeGridContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTimeCols\n        {...splitProps.timed}\n        dayTableModel={dayTableModel}\n        dateProfile={dateProfile}\n        axis={hasAttachedAxis}\n        slotDuration={options.slotDuration}\n        slatMetas={slatMetas}\n        forPrint={props.forPrint}\n        tableColGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        onSlatCoords={this.handleSlatCoords}\n        expandRows={contentArg.expandRows}\n        onScrollTopRequest={this.handleScrollTopRequest}\n      />\n    )\n\n    return hasDetachedAxis\n      ? this.renderHScrollLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n        dayTableModel.colCnt,\n        dayMinWidth,\n        slatMetas,\n        this.state.slatCoords,\n      )\n      : this.renderSimpleLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n      )\n  }\n}\n\nexport function buildTimeColsModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(daySeries, false)\n}\n","export const OPTION_REFINERS = {\n  allDaySlot: Boolean,\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeColsView, buildTimeColsModel } from './DayTimeColsView'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { DayTimeCols, buildDayRanges } from './DayTimeCols'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { DayTimeCols, DayTimeColsView, TimeColsView, buildTimeColsModel, buildDayRanges, DayTimeColsSlicer, TimeColsSeg }\nexport { TimeCols } from './TimeCols'\nexport { TimeSlatMeta, buildSlatMetas } from './time-slat-meta'\nexport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\n\nexport default createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true, // indicates that slotMinTime/slotMaxTime affects rendering\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true, // a bad name. confused with overlap/constraint system\n    },\n\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: { days: 1 },\n    },\n\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: { weeks: 1 },\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}