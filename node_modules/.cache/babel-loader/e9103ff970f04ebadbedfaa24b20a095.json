{"ast":null,"code":"/*!\nFullCalendar v5.11.3\nDocs & License: https://fullcalendar.io/\n(c) 2022 Adam Shaw\n*/\nimport { config, elementClosest, Emitter, applyStyle, whenTransitionDone, removeElement, ScrollController, ElementScrollController, computeInnerRect, WindowScrollController, getElRoot, preventSelection, preventContextMenu, allowSelection, allowContextMenu, ElementDragging, computeRect, getClippingParents, pointInsideRect, isDateSpansEqual, constrainPoint, intersectRects, getRectCenter, diffPoints, mapHash, rangeContainsRange, interactionSettingsToStore, Interaction, isDateSelectionValid, enableCursor, disableCursor, triggerDateSelect, compareNumbers, getElSeg, getRelevantEvents, EventApi, createEmptyEventStore, applyMutationToEventStore, isInteractionValid, buildEventApis, interactionSettingsStore, startOfDay, diffDates, createDuration, getEventTargetViaRoot, identity, eventTupleToStore, parseDragMeta, elementMatches, refineEventDef, parseEventDef, getDefaultEventEnd, createEventInstance, BASE_OPTION_DEFAULTS, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign } from 'tslib';\nconfig.touchMouseIgnoreWait = 500;\nvar ignoreMouseDepth = 0;\nvar listenerCnt = 0;\nvar isWindowTouchMoveCancelled = false;\n/*\nUses a \"pointer\" abstraction, which monitors UI events for both mouse and touch.\nTracks when the pointer \"drags\" on a certain element, meaning down+move+up.\n\nAlso, tracks if there was touch-scrolling.\nAlso, can prevent touch-scrolling from happening.\nAlso, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.\n\nemits:\n- pointerdown\n- pointermove\n- pointerup\n*/\nvar PointerDragging = /** @class */function () {\n  function PointerDragging(containerEl) {\n    var _this = this;\n    this.subjectEl = null;\n    // options that can be directly assigned by caller\n    this.selector = ''; // will cause subjectEl in all emitted events to be this element\n    this.handleSelector = '';\n    this.shouldIgnoreMove = false;\n    this.shouldWatchScroll = true; // for simulating pointermove on scroll\n    // internal states\n    this.isDragging = false;\n    this.isTouchDragging = false;\n    this.wasTouchScroll = false;\n    // Mouse\n    // ----------------------------------------------------------------------------------------------------\n    this.handleMouseDown = function (ev) {\n      if (!_this.shouldIgnoreMouse() && isPrimaryMouseButton(ev) && _this.tryStart(ev)) {\n        var pev = _this.createEventFromMouse(ev, true);\n        _this.emitter.trigger('pointerdown', pev);\n        _this.initScrollWatch(pev);\n        if (!_this.shouldIgnoreMove) {\n          document.addEventListener('mousemove', _this.handleMouseMove);\n        }\n        document.addEventListener('mouseup', _this.handleMouseUp);\n      }\n    };\n    this.handleMouseMove = function (ev) {\n      var pev = _this.createEventFromMouse(ev);\n      _this.recordCoords(pev);\n      _this.emitter.trigger('pointermove', pev);\n    };\n    this.handleMouseUp = function (ev) {\n      document.removeEventListener('mousemove', _this.handleMouseMove);\n      document.removeEventListener('mouseup', _this.handleMouseUp);\n      _this.emitter.trigger('pointerup', _this.createEventFromMouse(ev));\n      _this.cleanup(); // call last so that pointerup has access to props\n    };\n    // Touch\n    // ----------------------------------------------------------------------------------------------------\n    this.handleTouchStart = function (ev) {\n      if (_this.tryStart(ev)) {\n        _this.isTouchDragging = true;\n        var pev = _this.createEventFromTouch(ev, true);\n        _this.emitter.trigger('pointerdown', pev);\n        _this.initScrollWatch(pev);\n        // unlike mouse, need to attach to target, not document\n        // https://stackoverflow.com/a/45760014\n        var targetEl = ev.target;\n        if (!_this.shouldIgnoreMove) {\n          targetEl.addEventListener('touchmove', _this.handleTouchMove);\n        }\n        targetEl.addEventListener('touchend', _this.handleTouchEnd);\n        targetEl.addEventListener('touchcancel', _this.handleTouchEnd); // treat it as a touch end\n        // attach a handler to get called when ANY scroll action happens on the page.\n        // this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n        // http://stackoverflow.com/a/32954565/96342\n        window.addEventListener('scroll', _this.handleTouchScroll, true);\n      }\n    };\n    this.handleTouchMove = function (ev) {\n      var pev = _this.createEventFromTouch(ev);\n      _this.recordCoords(pev);\n      _this.emitter.trigger('pointermove', pev);\n    };\n    this.handleTouchEnd = function (ev) {\n      if (_this.isDragging) {\n        // done to guard against touchend followed by touchcancel\n        var targetEl = ev.target;\n        targetEl.removeEventListener('touchmove', _this.handleTouchMove);\n        targetEl.removeEventListener('touchend', _this.handleTouchEnd);\n        targetEl.removeEventListener('touchcancel', _this.handleTouchEnd);\n        window.removeEventListener('scroll', _this.handleTouchScroll, true); // useCaptured=true\n        _this.emitter.trigger('pointerup', _this.createEventFromTouch(ev));\n        _this.cleanup(); // call last so that pointerup has access to props\n        _this.isTouchDragging = false;\n        startIgnoringMouse();\n      }\n    };\n    this.handleTouchScroll = function () {\n      _this.wasTouchScroll = true;\n    };\n    this.handleScroll = function (ev) {\n      if (!_this.shouldIgnoreMove) {\n        var pageX = window.pageXOffset - _this.prevScrollX + _this.prevPageX;\n        var pageY = window.pageYOffset - _this.prevScrollY + _this.prevPageY;\n        _this.emitter.trigger('pointermove', {\n          origEvent: ev,\n          isTouch: _this.isTouchDragging,\n          subjectEl: _this.subjectEl,\n          pageX: pageX,\n          pageY: pageY,\n          deltaX: pageX - _this.origPageX,\n          deltaY: pageY - _this.origPageY\n        });\n      }\n    };\n    this.containerEl = containerEl;\n    this.emitter = new Emitter();\n    containerEl.addEventListener('mousedown', this.handleMouseDown);\n    containerEl.addEventListener('touchstart', this.handleTouchStart, {\n      passive: true\n    });\n    listenerCreated();\n  }\n  PointerDragging.prototype.destroy = function () {\n    this.containerEl.removeEventListener('mousedown', this.handleMouseDown);\n    this.containerEl.removeEventListener('touchstart', this.handleTouchStart, {\n      passive: true\n    });\n    listenerDestroyed();\n  };\n  PointerDragging.prototype.tryStart = function (ev) {\n    var subjectEl = this.querySubjectEl(ev);\n    var downEl = ev.target;\n    if (subjectEl && (!this.handleSelector || elementClosest(downEl, this.handleSelector))) {\n      this.subjectEl = subjectEl;\n      this.isDragging = true; // do this first so cancelTouchScroll will work\n      this.wasTouchScroll = false;\n      return true;\n    }\n    return false;\n  };\n  PointerDragging.prototype.cleanup = function () {\n    isWindowTouchMoveCancelled = false;\n    this.isDragging = false;\n    this.subjectEl = null;\n    // keep wasTouchScroll around for later access\n    this.destroyScrollWatch();\n  };\n  PointerDragging.prototype.querySubjectEl = function (ev) {\n    if (this.selector) {\n      return elementClosest(ev.target, this.selector);\n    }\n    return this.containerEl;\n  };\n  PointerDragging.prototype.shouldIgnoreMouse = function () {\n    return ignoreMouseDepth || this.isTouchDragging;\n  };\n  // can be called by user of this class, to cancel touch-based scrolling for the current drag\n  PointerDragging.prototype.cancelTouchScroll = function () {\n    if (this.isDragging) {\n      isWindowTouchMoveCancelled = true;\n    }\n  };\n  // Scrolling that simulates pointermoves\n  // ----------------------------------------------------------------------------------------------------\n  PointerDragging.prototype.initScrollWatch = function (ev) {\n    if (this.shouldWatchScroll) {\n      this.recordCoords(ev);\n      window.addEventListener('scroll', this.handleScroll, true); // useCapture=true\n    }\n  };\n\n  PointerDragging.prototype.recordCoords = function (ev) {\n    if (this.shouldWatchScroll) {\n      this.prevPageX = ev.pageX;\n      this.prevPageY = ev.pageY;\n      this.prevScrollX = window.pageXOffset;\n      this.prevScrollY = window.pageYOffset;\n    }\n  };\n  PointerDragging.prototype.destroyScrollWatch = function () {\n    if (this.shouldWatchScroll) {\n      window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true\n    }\n  };\n  // Event Normalization\n  // ----------------------------------------------------------------------------------------------------\n  PointerDragging.prototype.createEventFromMouse = function (ev, isFirst) {\n    var deltaX = 0;\n    var deltaY = 0;\n    // TODO: repeat code\n    if (isFirst) {\n      this.origPageX = ev.pageX;\n      this.origPageY = ev.pageY;\n    } else {\n      deltaX = ev.pageX - this.origPageX;\n      deltaY = ev.pageY - this.origPageY;\n    }\n    return {\n      origEvent: ev,\n      isTouch: false,\n      subjectEl: this.subjectEl,\n      pageX: ev.pageX,\n      pageY: ev.pageY,\n      deltaX: deltaX,\n      deltaY: deltaY\n    };\n  };\n  PointerDragging.prototype.createEventFromTouch = function (ev, isFirst) {\n    var touches = ev.touches;\n    var pageX;\n    var pageY;\n    var deltaX = 0;\n    var deltaY = 0;\n    // if touch coords available, prefer,\n    // because FF would give bad ev.pageX ev.pageY\n    if (touches && touches.length) {\n      pageX = touches[0].pageX;\n      pageY = touches[0].pageY;\n    } else {\n      pageX = ev.pageX;\n      pageY = ev.pageY;\n    }\n    // TODO: repeat code\n    if (isFirst) {\n      this.origPageX = pageX;\n      this.origPageY = pageY;\n    } else {\n      deltaX = pageX - this.origPageX;\n      deltaY = pageY - this.origPageY;\n    }\n    return {\n      origEvent: ev,\n      isTouch: true,\n      subjectEl: this.subjectEl,\n      pageX: pageX,\n      pageY: pageY,\n      deltaX: deltaX,\n      deltaY: deltaY\n    };\n  };\n  return PointerDragging;\n}();\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\nfunction isPrimaryMouseButton(ev) {\n  return ev.button === 0 && !ev.ctrlKey;\n}\n// Ignoring fake mouse events generated by touch\n// ----------------------------------------------------------------------------------------------------\nfunction startIgnoringMouse() {\n  ignoreMouseDepth += 1;\n  setTimeout(function () {\n    ignoreMouseDepth -= 1;\n  }, config.touchMouseIgnoreWait);\n}\n// We want to attach touchmove as early as possible for Safari\n// ----------------------------------------------------------------------------------------------------\nfunction listenerCreated() {\n  listenerCnt += 1;\n  if (listenerCnt === 1) {\n    window.addEventListener('touchmove', onWindowTouchMove, {\n      passive: false\n    });\n  }\n}\nfunction listenerDestroyed() {\n  listenerCnt -= 1;\n  if (!listenerCnt) {\n    window.removeEventListener('touchmove', onWindowTouchMove, {\n      passive: false\n    });\n  }\n}\nfunction onWindowTouchMove(ev) {\n  if (isWindowTouchMoveCancelled) {\n    ev.preventDefault();\n  }\n}\n\n/*\nAn effect in which an element follows the movement of a pointer across the screen.\nThe moving element is a clone of some other element.\nMust call start + handleMove + stop.\n*/\nvar ElementMirror = /** @class */function () {\n  function ElementMirror() {\n    this.isVisible = false; // must be explicitly enabled\n    this.sourceEl = null;\n    this.mirrorEl = null;\n    this.sourceElRect = null; // screen coords relative to viewport\n    // options that can be set directly by caller\n    this.parentNode = document.body; // HIGHLY SUGGESTED to set this to sidestep ShadowDOM issues\n    this.zIndex = 9999;\n    this.revertDuration = 0;\n  }\n  ElementMirror.prototype.start = function (sourceEl, pageX, pageY) {\n    this.sourceEl = sourceEl;\n    this.sourceElRect = this.sourceEl.getBoundingClientRect();\n    this.origScreenX = pageX - window.pageXOffset;\n    this.origScreenY = pageY - window.pageYOffset;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.updateElPosition();\n  };\n  ElementMirror.prototype.handleMove = function (pageX, pageY) {\n    this.deltaX = pageX - window.pageXOffset - this.origScreenX;\n    this.deltaY = pageY - window.pageYOffset - this.origScreenY;\n    this.updateElPosition();\n  };\n  // can be called before start\n  ElementMirror.prototype.setIsVisible = function (bool) {\n    if (bool) {\n      if (!this.isVisible) {\n        if (this.mirrorEl) {\n          this.mirrorEl.style.display = '';\n        }\n        this.isVisible = bool; // needs to happen before updateElPosition\n        this.updateElPosition(); // because was not updating the position while invisible\n      }\n    } else if (this.isVisible) {\n      if (this.mirrorEl) {\n        this.mirrorEl.style.display = 'none';\n      }\n      this.isVisible = bool;\n    }\n  };\n  // always async\n  ElementMirror.prototype.stop = function (needsRevertAnimation, callback) {\n    var _this = this;\n    var done = function () {\n      _this.cleanup();\n      callback();\n    };\n    if (needsRevertAnimation && this.mirrorEl && this.isVisible && this.revertDuration && (\n    // if 0, transition won't work\n    this.deltaX || this.deltaY) // if same coords, transition won't work\n    ) {\n      this.doRevertAnimation(done, this.revertDuration);\n    } else {\n      setTimeout(done, 0);\n    }\n  };\n  ElementMirror.prototype.doRevertAnimation = function (callback, revertDuration) {\n    var mirrorEl = this.mirrorEl;\n    var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened\n    mirrorEl.style.transition = 'top ' + revertDuration + 'ms,' + 'left ' + revertDuration + 'ms';\n    applyStyle(mirrorEl, {\n      left: finalSourceElRect.left,\n      top: finalSourceElRect.top\n    });\n    whenTransitionDone(mirrorEl, function () {\n      mirrorEl.style.transition = '';\n      callback();\n    });\n  };\n  ElementMirror.prototype.cleanup = function () {\n    if (this.mirrorEl) {\n      removeElement(this.mirrorEl);\n      this.mirrorEl = null;\n    }\n    this.sourceEl = null;\n  };\n  ElementMirror.prototype.updateElPosition = function () {\n    if (this.sourceEl && this.isVisible) {\n      applyStyle(this.getMirrorEl(), {\n        left: this.sourceElRect.left + this.deltaX,\n        top: this.sourceElRect.top + this.deltaY\n      });\n    }\n  };\n  ElementMirror.prototype.getMirrorEl = function () {\n    var sourceElRect = this.sourceElRect;\n    var mirrorEl = this.mirrorEl;\n    if (!mirrorEl) {\n      mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true\n      // we don't want long taps or any mouse interaction causing selection/menus.\n      // would use preventSelection(), but that prevents selectstart, causing problems.\n      mirrorEl.classList.add('fc-unselectable');\n      mirrorEl.classList.add('fc-event-dragging');\n      applyStyle(mirrorEl, {\n        position: 'fixed',\n        zIndex: this.zIndex,\n        visibility: '',\n        boxSizing: 'border-box',\n        width: sourceElRect.right - sourceElRect.left,\n        height: sourceElRect.bottom - sourceElRect.top,\n        right: 'auto',\n        bottom: 'auto',\n        margin: 0\n      });\n      this.parentNode.appendChild(mirrorEl);\n    }\n    return mirrorEl;\n  };\n  return ElementMirror;\n}();\n\n/*\nIs a cache for a given element's scroll information (all the info that ScrollController stores)\nin addition the \"client rectangle\" of the element.. the area within the scrollbars.\n\nThe cache can be in one of two modes:\n- doesListening:false - ignores when the container is scrolled by someone else\n- doesListening:true - watch for scrolling and update the cache\n*/\nvar ScrollGeomCache = /** @class */function (_super) {\n  __extends(ScrollGeomCache, _super);\n  function ScrollGeomCache(scrollController, doesListening) {\n    var _this = _super.call(this) || this;\n    _this.handleScroll = function () {\n      _this.scrollTop = _this.scrollController.getScrollTop();\n      _this.scrollLeft = _this.scrollController.getScrollLeft();\n      _this.handleScrollChange();\n    };\n    _this.scrollController = scrollController;\n    _this.doesListening = doesListening;\n    _this.scrollTop = _this.origScrollTop = scrollController.getScrollTop();\n    _this.scrollLeft = _this.origScrollLeft = scrollController.getScrollLeft();\n    _this.scrollWidth = scrollController.getScrollWidth();\n    _this.scrollHeight = scrollController.getScrollHeight();\n    _this.clientWidth = scrollController.getClientWidth();\n    _this.clientHeight = scrollController.getClientHeight();\n    _this.clientRect = _this.computeClientRect(); // do last in case it needs cached values\n    if (_this.doesListening) {\n      _this.getEventTarget().addEventListener('scroll', _this.handleScroll);\n    }\n    return _this;\n  }\n  ScrollGeomCache.prototype.destroy = function () {\n    if (this.doesListening) {\n      this.getEventTarget().removeEventListener('scroll', this.handleScroll);\n    }\n  };\n  ScrollGeomCache.prototype.getScrollTop = function () {\n    return this.scrollTop;\n  };\n  ScrollGeomCache.prototype.getScrollLeft = function () {\n    return this.scrollLeft;\n  };\n  ScrollGeomCache.prototype.setScrollTop = function (top) {\n    this.scrollController.setScrollTop(top);\n    if (!this.doesListening) {\n      // we are not relying on the element to normalize out-of-bounds scroll values\n      // so we need to sanitize ourselves\n      this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);\n      this.handleScrollChange();\n    }\n  };\n  ScrollGeomCache.prototype.setScrollLeft = function (top) {\n    this.scrollController.setScrollLeft(top);\n    if (!this.doesListening) {\n      // we are not relying on the element to normalize out-of-bounds scroll values\n      // so we need to sanitize ourselves\n      this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);\n      this.handleScrollChange();\n    }\n  };\n  ScrollGeomCache.prototype.getClientWidth = function () {\n    return this.clientWidth;\n  };\n  ScrollGeomCache.prototype.getClientHeight = function () {\n    return this.clientHeight;\n  };\n  ScrollGeomCache.prototype.getScrollWidth = function () {\n    return this.scrollWidth;\n  };\n  ScrollGeomCache.prototype.getScrollHeight = function () {\n    return this.scrollHeight;\n  };\n  ScrollGeomCache.prototype.handleScrollChange = function () {};\n  return ScrollGeomCache;\n}(ScrollController);\nvar ElementScrollGeomCache = /** @class */function (_super) {\n  __extends(ElementScrollGeomCache, _super);\n  function ElementScrollGeomCache(el, doesListening) {\n    return _super.call(this, new ElementScrollController(el), doesListening) || this;\n  }\n  ElementScrollGeomCache.prototype.getEventTarget = function () {\n    return this.scrollController.el;\n  };\n  ElementScrollGeomCache.prototype.computeClientRect = function () {\n    return computeInnerRect(this.scrollController.el);\n  };\n  return ElementScrollGeomCache;\n}(ScrollGeomCache);\nvar WindowScrollGeomCache = /** @class */function (_super) {\n  __extends(WindowScrollGeomCache, _super);\n  function WindowScrollGeomCache(doesListening) {\n    return _super.call(this, new WindowScrollController(), doesListening) || this;\n  }\n  WindowScrollGeomCache.prototype.getEventTarget = function () {\n    return window;\n  };\n  WindowScrollGeomCache.prototype.computeClientRect = function () {\n    return {\n      left: this.scrollLeft,\n      right: this.scrollLeft + this.clientWidth,\n      top: this.scrollTop,\n      bottom: this.scrollTop + this.clientHeight\n    };\n  };\n  // the window is the only scroll object that changes it's rectangle relative\n  // to the document's topleft as it scrolls\n  WindowScrollGeomCache.prototype.handleScrollChange = function () {\n    this.clientRect = this.computeClientRect();\n  };\n  return WindowScrollGeomCache;\n}(ScrollGeomCache);\n\n// If available we are using native \"performance\" API instead of \"Date\"\n// Read more about it on MDN:\n// https://developer.mozilla.org/en-US/docs/Web/API/Performance\nvar getTime = typeof performance === 'function' ? performance.now : Date.now;\n/*\nFor a pointer interaction, automatically scrolls certain scroll containers when the pointer\napproaches the edge.\n\nThe caller must call start + handleMove + stop.\n*/\nvar AutoScroller = /** @class */function () {\n  function AutoScroller() {\n    var _this = this;\n    // options that can be set by caller\n    this.isEnabled = true;\n    this.scrollQuery = [window, '.fc-scroller'];\n    this.edgeThreshold = 50; // pixels\n    this.maxVelocity = 300; // pixels per second\n    // internal state\n    this.pointerScreenX = null;\n    this.pointerScreenY = null;\n    this.isAnimating = false;\n    this.scrollCaches = null;\n    // protect against the initial pointerdown being too close to an edge and starting the scroll\n    this.everMovedUp = false;\n    this.everMovedDown = false;\n    this.everMovedLeft = false;\n    this.everMovedRight = false;\n    this.animate = function () {\n      if (_this.isAnimating) {\n        // wasn't cancelled between animation calls\n        var edge = _this.computeBestEdge(_this.pointerScreenX + window.pageXOffset, _this.pointerScreenY + window.pageYOffset);\n        if (edge) {\n          var now = getTime();\n          _this.handleSide(edge, (now - _this.msSinceRequest) / 1000);\n          _this.requestAnimation(now);\n        } else {\n          _this.isAnimating = false; // will stop animation\n        }\n      }\n    };\n  }\n\n  AutoScroller.prototype.start = function (pageX, pageY, scrollStartEl) {\n    if (this.isEnabled) {\n      this.scrollCaches = this.buildCaches(scrollStartEl);\n      this.pointerScreenX = null;\n      this.pointerScreenY = null;\n      this.everMovedUp = false;\n      this.everMovedDown = false;\n      this.everMovedLeft = false;\n      this.everMovedRight = false;\n      this.handleMove(pageX, pageY);\n    }\n  };\n  AutoScroller.prototype.handleMove = function (pageX, pageY) {\n    if (this.isEnabled) {\n      var pointerScreenX = pageX - window.pageXOffset;\n      var pointerScreenY = pageY - window.pageYOffset;\n      var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;\n      var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;\n      if (yDelta < 0) {\n        this.everMovedUp = true;\n      } else if (yDelta > 0) {\n        this.everMovedDown = true;\n      }\n      if (xDelta < 0) {\n        this.everMovedLeft = true;\n      } else if (xDelta > 0) {\n        this.everMovedRight = true;\n      }\n      this.pointerScreenX = pointerScreenX;\n      this.pointerScreenY = pointerScreenY;\n      if (!this.isAnimating) {\n        this.isAnimating = true;\n        this.requestAnimation(getTime());\n      }\n    }\n  };\n  AutoScroller.prototype.stop = function () {\n    if (this.isEnabled) {\n      this.isAnimating = false; // will stop animation\n      for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n        var scrollCache = _a[_i];\n        scrollCache.destroy();\n      }\n      this.scrollCaches = null;\n    }\n  };\n  AutoScroller.prototype.requestAnimation = function (now) {\n    this.msSinceRequest = now;\n    requestAnimationFrame(this.animate);\n  };\n  AutoScroller.prototype.handleSide = function (edge, seconds) {\n    var scrollCache = edge.scrollCache;\n    var edgeThreshold = this.edgeThreshold;\n    var invDistance = edgeThreshold - edge.distance;\n    var velocity =\n    // the closer to the edge, the faster we scroll\n    invDistance * invDistance / (edgeThreshold * edgeThreshold) *\n    // quadratic\n    this.maxVelocity * seconds;\n    var sign = 1;\n    switch (edge.name) {\n      case 'left':\n        sign = -1;\n      // falls through\n      case 'right':\n        scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);\n        break;\n      case 'top':\n        sign = -1;\n      // falls through\n      case 'bottom':\n        scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);\n        break;\n    }\n  };\n  // left/top are relative to document topleft\n  AutoScroller.prototype.computeBestEdge = function (left, top) {\n    var edgeThreshold = this.edgeThreshold;\n    var bestSide = null;\n    var scrollCaches = this.scrollCaches || [];\n    for (var _i = 0, scrollCaches_1 = scrollCaches; _i < scrollCaches_1.length; _i++) {\n      var scrollCache = scrollCaches_1[_i];\n      var rect = scrollCache.clientRect;\n      var leftDist = left - rect.left;\n      var rightDist = rect.right - left;\n      var topDist = top - rect.top;\n      var bottomDist = rect.bottom - top;\n      // completely within the rect?\n      if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {\n        if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() && (!bestSide || bestSide.distance > topDist)) {\n          bestSide = {\n            scrollCache: scrollCache,\n            name: 'top',\n            distance: topDist\n          };\n        }\n        if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() && (!bestSide || bestSide.distance > bottomDist)) {\n          bestSide = {\n            scrollCache: scrollCache,\n            name: 'bottom',\n            distance: bottomDist\n          };\n        }\n        if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() && (!bestSide || bestSide.distance > leftDist)) {\n          bestSide = {\n            scrollCache: scrollCache,\n            name: 'left',\n            distance: leftDist\n          };\n        }\n        if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() && (!bestSide || bestSide.distance > rightDist)) {\n          bestSide = {\n            scrollCache: scrollCache,\n            name: 'right',\n            distance: rightDist\n          };\n        }\n      }\n    }\n    return bestSide;\n  };\n  AutoScroller.prototype.buildCaches = function (scrollStartEl) {\n    return this.queryScrollEls(scrollStartEl).map(function (el) {\n      if (el === window) {\n        return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls\n      }\n\n      return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls\n    });\n  };\n\n  AutoScroller.prototype.queryScrollEls = function (scrollStartEl) {\n    var els = [];\n    for (var _i = 0, _a = this.scrollQuery; _i < _a.length; _i++) {\n      var query = _a[_i];\n      if (typeof query === 'object') {\n        els.push(query);\n      } else {\n        els.push.apply(els, Array.prototype.slice.call(getElRoot(scrollStartEl).querySelectorAll(query)));\n      }\n    }\n    return els;\n  };\n  return AutoScroller;\n}();\n\n/*\nMonitors dragging on an element. Has a number of high-level features:\n- minimum distance required before dragging\n- minimum wait time (\"delay\") before dragging\n- a mirror element that follows the pointer\n*/\nvar FeaturefulElementDragging = /** @class */function (_super) {\n  __extends(FeaturefulElementDragging, _super);\n  function FeaturefulElementDragging(containerEl, selector) {\n    var _this = _super.call(this, containerEl) || this;\n    _this.containerEl = containerEl;\n    // options that can be directly set by caller\n    // the caller can also set the PointerDragging's options as well\n    _this.delay = null;\n    _this.minDistance = 0;\n    _this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag\n    _this.mirrorNeedsRevert = false;\n    _this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup\n    _this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation\n    _this.isDelayEnded = false;\n    _this.isDistanceSurpassed = false;\n    _this.delayTimeoutId = null;\n    _this.onPointerDown = function (ev) {\n      if (!_this.isDragging) {\n        // so new drag doesn't happen while revert animation is going\n        _this.isInteracting = true;\n        _this.isDelayEnded = false;\n        _this.isDistanceSurpassed = false;\n        preventSelection(document.body);\n        preventContextMenu(document.body);\n        // prevent links from being visited if there's an eventual drag.\n        // also prevents selection in older browsers (maybe?).\n        // not necessary for touch, besides, browser would complain about passiveness.\n        if (!ev.isTouch) {\n          ev.origEvent.preventDefault();\n        }\n        _this.emitter.trigger('pointerdown', ev);\n        if (_this.isInteracting &&\n        // not destroyed via pointerdown handler\n        !_this.pointer.shouldIgnoreMove) {\n          // actions related to initiating dragstart+dragmove+dragend...\n          _this.mirror.setIsVisible(false); // reset. caller must set-visible\n          _this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down\n          _this.startDelay(ev);\n          if (!_this.minDistance) {\n            _this.handleDistanceSurpassed(ev);\n          }\n        }\n      }\n    };\n    _this.onPointerMove = function (ev) {\n      if (_this.isInteracting) {\n        _this.emitter.trigger('pointermove', ev);\n        if (!_this.isDistanceSurpassed) {\n          var minDistance = _this.minDistance;\n          var distanceSq = void 0; // current distance from the origin, squared\n          var deltaX = ev.deltaX,\n            deltaY = ev.deltaY;\n          distanceSq = deltaX * deltaX + deltaY * deltaY;\n          if (distanceSq >= minDistance * minDistance) {\n            // use pythagorean theorem\n            _this.handleDistanceSurpassed(ev);\n          }\n        }\n        if (_this.isDragging) {\n          // a real pointer move? (not one simulated by scrolling)\n          if (ev.origEvent.type !== 'scroll') {\n            _this.mirror.handleMove(ev.pageX, ev.pageY);\n            _this.autoScroller.handleMove(ev.pageX, ev.pageY);\n          }\n          _this.emitter.trigger('dragmove', ev);\n        }\n      }\n    };\n    _this.onPointerUp = function (ev) {\n      if (_this.isInteracting) {\n        _this.isInteracting = false;\n        allowSelection(document.body);\n        allowContextMenu(document.body);\n        _this.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert\n        if (_this.isDragging) {\n          _this.autoScroller.stop();\n          _this.tryStopDrag(ev); // which will stop the mirror\n        }\n\n        if (_this.delayTimeoutId) {\n          clearTimeout(_this.delayTimeoutId);\n          _this.delayTimeoutId = null;\n        }\n      }\n    };\n    var pointer = _this.pointer = new PointerDragging(containerEl);\n    pointer.emitter.on('pointerdown', _this.onPointerDown);\n    pointer.emitter.on('pointermove', _this.onPointerMove);\n    pointer.emitter.on('pointerup', _this.onPointerUp);\n    if (selector) {\n      pointer.selector = selector;\n    }\n    _this.mirror = new ElementMirror();\n    _this.autoScroller = new AutoScroller();\n    return _this;\n  }\n  FeaturefulElementDragging.prototype.destroy = function () {\n    this.pointer.destroy();\n    // HACK: simulate a pointer-up to end the current drag\n    // TODO: fire 'dragend' directly and stop interaction. discourage use of pointerup event (b/c might not fire)\n    this.onPointerUp({});\n  };\n  FeaturefulElementDragging.prototype.startDelay = function (ev) {\n    var _this = this;\n    if (typeof this.delay === 'number') {\n      this.delayTimeoutId = setTimeout(function () {\n        _this.delayTimeoutId = null;\n        _this.handleDelayEnd(ev);\n      }, this.delay); // not assignable to number!\n    } else {\n      this.handleDelayEnd(ev);\n    }\n  };\n  FeaturefulElementDragging.prototype.handleDelayEnd = function (ev) {\n    this.isDelayEnded = true;\n    this.tryStartDrag(ev);\n  };\n  FeaturefulElementDragging.prototype.handleDistanceSurpassed = function (ev) {\n    this.isDistanceSurpassed = true;\n    this.tryStartDrag(ev);\n  };\n  FeaturefulElementDragging.prototype.tryStartDrag = function (ev) {\n    if (this.isDelayEnded && this.isDistanceSurpassed) {\n      if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {\n        this.isDragging = true;\n        this.mirrorNeedsRevert = false;\n        this.autoScroller.start(ev.pageX, ev.pageY, this.containerEl);\n        this.emitter.trigger('dragstart', ev);\n        if (this.touchScrollAllowed === false) {\n          this.pointer.cancelTouchScroll();\n        }\n      }\n    }\n  };\n  FeaturefulElementDragging.prototype.tryStopDrag = function (ev) {\n    // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events\n    // that come from the document to fire beforehand. much more convenient this way.\n    this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev));\n  };\n  FeaturefulElementDragging.prototype.stopDrag = function (ev) {\n    this.isDragging = false;\n    this.emitter.trigger('dragend', ev);\n  };\n  // fill in the implementations...\n  FeaturefulElementDragging.prototype.setIgnoreMove = function (bool) {\n    this.pointer.shouldIgnoreMove = bool;\n  };\n  FeaturefulElementDragging.prototype.setMirrorIsVisible = function (bool) {\n    this.mirror.setIsVisible(bool);\n  };\n  FeaturefulElementDragging.prototype.setMirrorNeedsRevert = function (bool) {\n    this.mirrorNeedsRevert = bool;\n  };\n  FeaturefulElementDragging.prototype.setAutoScrollEnabled = function (bool) {\n    this.autoScroller.isEnabled = bool;\n  };\n  return FeaturefulElementDragging;\n}(ElementDragging);\n\n/*\nWhen this class is instantiated, it records the offset of an element (relative to the document topleft),\nand continues to monitor scrolling, updating the cached coordinates if it needs to.\nDoes not access the DOM after instantiation, so highly performant.\n\nAlso keeps track of all scrolling/overflow:hidden containers that are parents of the given element\nand an determine if a given point is inside the combined clipping rectangle.\n*/\nvar OffsetTracker = /** @class */function () {\n  function OffsetTracker(el) {\n    this.origRect = computeRect(el);\n    // will work fine for divs that have overflow:hidden\n    this.scrollCaches = getClippingParents(el).map(function (scrollEl) {\n      return new ElementScrollGeomCache(scrollEl, true);\n    });\n  }\n  OffsetTracker.prototype.destroy = function () {\n    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n      var scrollCache = _a[_i];\n      scrollCache.destroy();\n    }\n  };\n  OffsetTracker.prototype.computeLeft = function () {\n    var left = this.origRect.left;\n    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n      var scrollCache = _a[_i];\n      left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();\n    }\n    return left;\n  };\n  OffsetTracker.prototype.computeTop = function () {\n    var top = this.origRect.top;\n    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n      var scrollCache = _a[_i];\n      top += scrollCache.origScrollTop - scrollCache.getScrollTop();\n    }\n    return top;\n  };\n  OffsetTracker.prototype.isWithinClipping = function (pageX, pageY) {\n    var point = {\n      left: pageX,\n      top: pageY\n    };\n    for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n      var scrollCache = _a[_i];\n      if (!isIgnoredClipping(scrollCache.getEventTarget()) && !pointInsideRect(point, scrollCache.clientRect)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return OffsetTracker;\n}();\n// certain clipping containers should never constrain interactions, like <html> and <body>\n// https://github.com/fullcalendar/fullcalendar/issues/3615\nfunction isIgnoredClipping(node) {\n  var tagName = node.tagName;\n  return tagName === 'HTML' || tagName === 'BODY';\n}\n\n/*\nTracks movement over multiple droppable areas (aka \"hits\")\nthat exist in one or more DateComponents.\nRelies on an existing draggable.\n\nemits:\n- pointerdown\n- dragstart\n- hitchange - fires initially, even if not over a hit\n- pointerup\n- (hitchange - again, to null, if ended over a hit)\n- dragend\n*/\nvar HitDragging = /** @class */function () {\n  function HitDragging(dragging, droppableStore) {\n    var _this = this;\n    // options that can be set by caller\n    this.useSubjectCenter = false;\n    this.requireInitial = true; // if doesn't start out on a hit, won't emit any events\n    this.initialHit = null;\n    this.movingHit = null;\n    this.finalHit = null; // won't ever be populated if shouldIgnoreMove\n    this.handlePointerDown = function (ev) {\n      var dragging = _this.dragging;\n      _this.initialHit = null;\n      _this.movingHit = null;\n      _this.finalHit = null;\n      _this.prepareHits();\n      _this.processFirstCoord(ev);\n      if (_this.initialHit || !_this.requireInitial) {\n        dragging.setIgnoreMove(false);\n        // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(\n        _this.emitter.trigger('pointerdown', ev);\n      } else {\n        dragging.setIgnoreMove(true);\n      }\n    };\n    this.handleDragStart = function (ev) {\n      _this.emitter.trigger('dragstart', ev);\n      _this.handleMove(ev, true); // force = fire even if initially null\n    };\n\n    this.handleDragMove = function (ev) {\n      _this.emitter.trigger('dragmove', ev);\n      _this.handleMove(ev);\n    };\n    this.handlePointerUp = function (ev) {\n      _this.releaseHits();\n      _this.emitter.trigger('pointerup', ev);\n    };\n    this.handleDragEnd = function (ev) {\n      if (_this.movingHit) {\n        _this.emitter.trigger('hitupdate', null, true, ev);\n      }\n      _this.finalHit = _this.movingHit;\n      _this.movingHit = null;\n      _this.emitter.trigger('dragend', ev);\n    };\n    this.droppableStore = droppableStore;\n    dragging.emitter.on('pointerdown', this.handlePointerDown);\n    dragging.emitter.on('dragstart', this.handleDragStart);\n    dragging.emitter.on('dragmove', this.handleDragMove);\n    dragging.emitter.on('pointerup', this.handlePointerUp);\n    dragging.emitter.on('dragend', this.handleDragEnd);\n    this.dragging = dragging;\n    this.emitter = new Emitter();\n  }\n  // sets initialHit\n  // sets coordAdjust\n  HitDragging.prototype.processFirstCoord = function (ev) {\n    var origPoint = {\n      left: ev.pageX,\n      top: ev.pageY\n    };\n    var adjustedPoint = origPoint;\n    var subjectEl = ev.subjectEl;\n    var subjectRect;\n    if (subjectEl instanceof HTMLElement) {\n      // i.e. not a Document/ShadowRoot\n      subjectRect = computeRect(subjectEl);\n      adjustedPoint = constrainPoint(adjustedPoint, subjectRect);\n    }\n    var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);\n    if (initialHit) {\n      if (this.useSubjectCenter && subjectRect) {\n        var slicedSubjectRect = intersectRects(subjectRect, initialHit.rect);\n        if (slicedSubjectRect) {\n          adjustedPoint = getRectCenter(slicedSubjectRect);\n        }\n      }\n      this.coordAdjust = diffPoints(adjustedPoint, origPoint);\n    } else {\n      this.coordAdjust = {\n        left: 0,\n        top: 0\n      };\n    }\n  };\n  HitDragging.prototype.handleMove = function (ev, forceHandle) {\n    var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);\n    if (forceHandle || !isHitsEqual(this.movingHit, hit)) {\n      this.movingHit = hit;\n      this.emitter.trigger('hitupdate', hit, false, ev);\n    }\n  };\n  HitDragging.prototype.prepareHits = function () {\n    this.offsetTrackers = mapHash(this.droppableStore, function (interactionSettings) {\n      interactionSettings.component.prepareHits();\n      return new OffsetTracker(interactionSettings.el);\n    });\n  };\n  HitDragging.prototype.releaseHits = function () {\n    var offsetTrackers = this.offsetTrackers;\n    for (var id in offsetTrackers) {\n      offsetTrackers[id].destroy();\n    }\n    this.offsetTrackers = {};\n  };\n  HitDragging.prototype.queryHitForOffset = function (offsetLeft, offsetTop) {\n    var _a = this,\n      droppableStore = _a.droppableStore,\n      offsetTrackers = _a.offsetTrackers;\n    var bestHit = null;\n    for (var id in droppableStore) {\n      var component = droppableStore[id].component;\n      var offsetTracker = offsetTrackers[id];\n      if (offsetTracker &&\n      // wasn't destroyed mid-drag\n      offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {\n        var originLeft = offsetTracker.computeLeft();\n        var originTop = offsetTracker.computeTop();\n        var positionLeft = offsetLeft - originLeft;\n        var positionTop = offsetTop - originTop;\n        var origRect = offsetTracker.origRect;\n        var width = origRect.right - origRect.left;\n        var height = origRect.bottom - origRect.top;\n        if (\n        // must be within the element's bounds\n        positionLeft >= 0 && positionLeft < width && positionTop >= 0 && positionTop < height) {\n          var hit = component.queryHit(positionLeft, positionTop, width, height);\n          if (hit &&\n          // make sure the hit is within activeRange, meaning it's not a dead cell\n          rangeContainsRange(hit.dateProfile.activeRange, hit.dateSpan.range) && (!bestHit || hit.layer > bestHit.layer)) {\n            hit.componentId = id;\n            hit.context = component.context;\n            // TODO: better way to re-orient rectangle\n            hit.rect.left += originLeft;\n            hit.rect.right += originLeft;\n            hit.rect.top += originTop;\n            hit.rect.bottom += originTop;\n            bestHit = hit;\n          }\n        }\n      }\n    }\n    return bestHit;\n  };\n  return HitDragging;\n}();\nfunction isHitsEqual(hit0, hit1) {\n  if (!hit0 && !hit1) {\n    return true;\n  }\n  if (Boolean(hit0) !== Boolean(hit1)) {\n    return false;\n  }\n  return isDateSpansEqual(hit0.dateSpan, hit1.dateSpan);\n}\nfunction buildDatePointApiWithContext(dateSpan, context) {\n  var props = {};\n  for (var _i = 0, _a = context.pluginHooks.datePointTransforms; _i < _a.length; _i++) {\n    var transform = _a[_i];\n    __assign(props, transform(dateSpan, context));\n  }\n  __assign(props, buildDatePointApi(dateSpan, context.dateEnv));\n  return props;\n}\nfunction buildDatePointApi(span, dateEnv) {\n  return {\n    date: dateEnv.toDate(span.range.start),\n    dateStr: dateEnv.formatIso(span.range.start, {\n      omitTime: span.allDay\n    }),\n    allDay: span.allDay\n  };\n}\n\n/*\nMonitors when the user clicks on a specific date/time of a component.\nA pointerdown+pointerup on the same \"hit\" constitutes a click.\n*/\nvar DateClicking = /** @class */function (_super) {\n  __extends(DateClicking, _super);\n  function DateClicking(settings) {\n    var _this = _super.call(this, settings) || this;\n    _this.handlePointerDown = function (pev) {\n      var dragging = _this.dragging;\n      var downEl = pev.origEvent.target;\n      // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired\n      dragging.setIgnoreMove(!_this.component.isValidDateDownEl(downEl));\n    };\n    // won't even fire if moving was ignored\n    _this.handleDragEnd = function (ev) {\n      var component = _this.component;\n      var pointer = _this.dragging.pointer;\n      if (!pointer.wasTouchScroll) {\n        var _a = _this.hitDragging,\n          initialHit = _a.initialHit,\n          finalHit = _a.finalHit;\n        if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {\n          var context = component.context;\n          var arg = __assign(__assign({}, buildDatePointApiWithContext(initialHit.dateSpan, context)), {\n            dayEl: initialHit.dayEl,\n            jsEvent: ev.origEvent,\n            view: context.viewApi || context.calendarApi.view\n          });\n          context.emitter.trigger('dateClick', arg);\n        }\n      }\n    };\n    // we DO want to watch pointer moves because otherwise finalHit won't get populated\n    _this.dragging = new FeaturefulElementDragging(settings.el);\n    _this.dragging.autoScroller.isEnabled = false;\n    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, interactionSettingsToStore(settings));\n    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);\n    hitDragging.emitter.on('dragend', _this.handleDragEnd);\n    return _this;\n  }\n  DateClicking.prototype.destroy = function () {\n    this.dragging.destroy();\n  };\n  return DateClicking;\n}(Interaction);\n\n/*\nTracks when the user selects a portion of time of a component,\nconstituted by a drag over date cells, with a possible delay at the beginning of the drag.\n*/\nvar DateSelecting = /** @class */function (_super) {\n  __extends(DateSelecting, _super);\n  function DateSelecting(settings) {\n    var _this = _super.call(this, settings) || this;\n    _this.dragSelection = null;\n    _this.handlePointerDown = function (ev) {\n      var _a = _this,\n        component = _a.component,\n        dragging = _a.dragging;\n      var options = component.context.options;\n      var canSelect = options.selectable && component.isValidDateDownEl(ev.origEvent.target);\n      // don't bother to watch expensive moves if component won't do selection\n      dragging.setIgnoreMove(!canSelect);\n      // if touch, require user to hold down\n      dragging.delay = ev.isTouch ? getComponentTouchDelay$1(component) : null;\n    };\n    _this.handleDragStart = function (ev) {\n      _this.component.context.calendarApi.unselect(ev); // unselect previous selections\n    };\n\n    _this.handleHitUpdate = function (hit, isFinal) {\n      var context = _this.component.context;\n      var dragSelection = null;\n      var isInvalid = false;\n      if (hit) {\n        var initialHit = _this.hitDragging.initialHit;\n        var disallowed = hit.componentId === initialHit.componentId && _this.isHitComboAllowed && !_this.isHitComboAllowed(initialHit, hit);\n        if (!disallowed) {\n          dragSelection = joinHitsIntoSelection(initialHit, hit, context.pluginHooks.dateSelectionTransformers);\n        }\n        if (!dragSelection || !isDateSelectionValid(dragSelection, hit.dateProfile, context)) {\n          isInvalid = true;\n          dragSelection = null;\n        }\n      }\n      if (dragSelection) {\n        context.dispatch({\n          type: 'SELECT_DATES',\n          selection: dragSelection\n        });\n      } else if (!isFinal) {\n        // only unselect if moved away while dragging\n        context.dispatch({\n          type: 'UNSELECT_DATES'\n        });\n      }\n      if (!isInvalid) {\n        enableCursor();\n      } else {\n        disableCursor();\n      }\n      if (!isFinal) {\n        _this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging\n      }\n    };\n\n    _this.handlePointerUp = function (pev) {\n      if (_this.dragSelection) {\n        // selection is already rendered, so just need to report selection\n        triggerDateSelect(_this.dragSelection, pev, _this.component.context);\n        _this.dragSelection = null;\n      }\n    };\n    var component = settings.component;\n    var options = component.context.options;\n    var dragging = _this.dragging = new FeaturefulElementDragging(settings.el);\n    dragging.touchScrollAllowed = false;\n    dragging.minDistance = options.selectMinDistance || 0;\n    dragging.autoScroller.isEnabled = options.dragScroll;\n    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, interactionSettingsToStore(settings));\n    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);\n    hitDragging.emitter.on('dragstart', _this.handleDragStart);\n    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);\n    hitDragging.emitter.on('pointerup', _this.handlePointerUp);\n    return _this;\n  }\n  DateSelecting.prototype.destroy = function () {\n    this.dragging.destroy();\n  };\n  return DateSelecting;\n}(Interaction);\nfunction getComponentTouchDelay$1(component) {\n  var options = component.context.options;\n  var delay = options.selectLongPressDelay;\n  if (delay == null) {\n    delay = options.longPressDelay;\n  }\n  return delay;\n}\nfunction joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {\n  var dateSpan0 = hit0.dateSpan;\n  var dateSpan1 = hit1.dateSpan;\n  var ms = [dateSpan0.range.start, dateSpan0.range.end, dateSpan1.range.start, dateSpan1.range.end];\n  ms.sort(compareNumbers);\n  var props = {};\n  for (var _i = 0, dateSelectionTransformers_1 = dateSelectionTransformers; _i < dateSelectionTransformers_1.length; _i++) {\n    var transformer = dateSelectionTransformers_1[_i];\n    var res = transformer(hit0, hit1);\n    if (res === false) {\n      return null;\n    }\n    if (res) {\n      __assign(props, res);\n    }\n  }\n  props.range = {\n    start: ms[0],\n    end: ms[3]\n  };\n  props.allDay = dateSpan0.allDay;\n  return props;\n}\nvar EventDragging = /** @class */function (_super) {\n  __extends(EventDragging, _super);\n  function EventDragging(settings) {\n    var _this = _super.call(this, settings) || this;\n    // internal state\n    _this.subjectEl = null;\n    _this.subjectSeg = null; // the seg being selected/dragged\n    _this.isDragging = false;\n    _this.eventRange = null;\n    _this.relevantEvents = null; // the events being dragged\n    _this.receivingContext = null;\n    _this.validMutation = null;\n    _this.mutatedRelevantEvents = null;\n    _this.handlePointerDown = function (ev) {\n      var origTarget = ev.origEvent.target;\n      var _a = _this,\n        component = _a.component,\n        dragging = _a.dragging;\n      var mirror = dragging.mirror;\n      var options = component.context.options;\n      var initialContext = component.context;\n      _this.subjectEl = ev.subjectEl;\n      var subjectSeg = _this.subjectSeg = getElSeg(ev.subjectEl);\n      var eventRange = _this.eventRange = subjectSeg.eventRange;\n      var eventInstanceId = eventRange.instance.instanceId;\n      _this.relevantEvents = getRelevantEvents(initialContext.getCurrentData().eventStore, eventInstanceId);\n      dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;\n      dragging.delay =\n      // only do a touch delay if touch and this event hasn't been selected yet\n      ev.isTouch && eventInstanceId !== component.props.eventSelection ? getComponentTouchDelay(component) : null;\n      if (options.fixedMirrorParent) {\n        mirror.parentNode = options.fixedMirrorParent;\n      } else {\n        mirror.parentNode = elementClosest(origTarget, '.fc');\n      }\n      mirror.revertDuration = options.dragRevertDuration;\n      var isValid = component.isValidSegDownEl(origTarget) && !elementClosest(origTarget, '.fc-event-resizer'); // NOT on a resizer\n      dragging.setIgnoreMove(!isValid);\n      // disable dragging for elements that are resizable (ie, selectable)\n      // but are not draggable\n      _this.isDragging = isValid && ev.subjectEl.classList.contains('fc-event-draggable');\n    };\n    _this.handleDragStart = function (ev) {\n      var initialContext = _this.component.context;\n      var eventRange = _this.eventRange;\n      var eventInstanceId = eventRange.instance.instanceId;\n      if (ev.isTouch) {\n        // need to select a different event?\n        if (eventInstanceId !== _this.component.props.eventSelection) {\n          initialContext.dispatch({\n            type: 'SELECT_EVENT',\n            eventInstanceId: eventInstanceId\n          });\n        }\n      } else {\n        // if now using mouse, but was previous touch interaction, clear selected event\n        initialContext.dispatch({\n          type: 'UNSELECT_EVENT'\n        });\n      }\n      if (_this.isDragging) {\n        initialContext.calendarApi.unselect(ev); // unselect *date* selection\n        initialContext.emitter.trigger('eventDragStart', {\n          el: _this.subjectEl,\n          event: new EventApi(initialContext, eventRange.def, eventRange.instance),\n          jsEvent: ev.origEvent,\n          view: initialContext.viewApi\n        });\n      }\n    };\n    _this.handleHitUpdate = function (hit, isFinal) {\n      if (!_this.isDragging) {\n        return;\n      }\n      var relevantEvents = _this.relevantEvents;\n      var initialHit = _this.hitDragging.initialHit;\n      var initialContext = _this.component.context;\n      // states based on new hit\n      var receivingContext = null;\n      var mutation = null;\n      var mutatedRelevantEvents = null;\n      var isInvalid = false;\n      var interaction = {\n        affectedEvents: relevantEvents,\n        mutatedEvents: createEmptyEventStore(),\n        isEvent: true\n      };\n      if (hit) {\n        receivingContext = hit.context;\n        var receivingOptions = receivingContext.options;\n        if (initialContext === receivingContext || receivingOptions.editable && receivingOptions.droppable) {\n          mutation = computeEventMutation(initialHit, hit, receivingContext.getCurrentData().pluginHooks.eventDragMutationMassagers);\n          if (mutation) {\n            mutatedRelevantEvents = applyMutationToEventStore(relevantEvents, receivingContext.getCurrentData().eventUiBases, mutation, receivingContext);\n            interaction.mutatedEvents = mutatedRelevantEvents;\n            if (!isInteractionValid(interaction, hit.dateProfile, receivingContext)) {\n              isInvalid = true;\n              mutation = null;\n              mutatedRelevantEvents = null;\n              interaction.mutatedEvents = createEmptyEventStore();\n            }\n          }\n        } else {\n          receivingContext = null;\n        }\n      }\n      _this.displayDrag(receivingContext, interaction);\n      if (!isInvalid) {\n        enableCursor();\n      } else {\n        disableCursor();\n      }\n      if (!isFinal) {\n        if (initialContext === receivingContext &&\n        // TODO: write test for this\n        isHitsEqual(initialHit, hit)) {\n          mutation = null;\n        }\n        _this.dragging.setMirrorNeedsRevert(!mutation);\n        // render the mirror if no already-rendered mirror\n        // TODO: wish we could somehow wait for dispatch to guarantee render\n        _this.dragging.setMirrorIsVisible(!hit || !getElRoot(_this.subjectEl).querySelector('.fc-event-mirror'));\n        // assign states based on new hit\n        _this.receivingContext = receivingContext;\n        _this.validMutation = mutation;\n        _this.mutatedRelevantEvents = mutatedRelevantEvents;\n      }\n    };\n    _this.handlePointerUp = function () {\n      if (!_this.isDragging) {\n        _this.cleanup(); // because handleDragEnd won't fire\n      }\n    };\n\n    _this.handleDragEnd = function (ev) {\n      if (_this.isDragging) {\n        var initialContext_1 = _this.component.context;\n        var initialView = initialContext_1.viewApi;\n        var _a = _this,\n          receivingContext_1 = _a.receivingContext,\n          validMutation = _a.validMutation;\n        var eventDef = _this.eventRange.def;\n        var eventInstance = _this.eventRange.instance;\n        var eventApi = new EventApi(initialContext_1, eventDef, eventInstance);\n        var relevantEvents_1 = _this.relevantEvents;\n        var mutatedRelevantEvents_1 = _this.mutatedRelevantEvents;\n        var finalHit = _this.hitDragging.finalHit;\n        _this.clearDrag(); // must happen after revert animation\n        initialContext_1.emitter.trigger('eventDragStop', {\n          el: _this.subjectEl,\n          event: eventApi,\n          jsEvent: ev.origEvent,\n          view: initialView\n        });\n        if (validMutation) {\n          // dropped within same calendar\n          if (receivingContext_1 === initialContext_1) {\n            var updatedEventApi = new EventApi(initialContext_1, mutatedRelevantEvents_1.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents_1.instances[eventInstance.instanceId] : null);\n            initialContext_1.dispatch({\n              type: 'MERGE_EVENTS',\n              eventStore: mutatedRelevantEvents_1\n            });\n            var eventChangeArg = {\n              oldEvent: eventApi,\n              event: updatedEventApi,\n              relatedEvents: buildEventApis(mutatedRelevantEvents_1, initialContext_1, eventInstance),\n              revert: function () {\n                initialContext_1.dispatch({\n                  type: 'MERGE_EVENTS',\n                  eventStore: relevantEvents_1 // the pre-change data\n                });\n              }\n            };\n\n            var transformed = {};\n            for (var _i = 0, _b = initialContext_1.getCurrentData().pluginHooks.eventDropTransformers; _i < _b.length; _i++) {\n              var transformer = _b[_i];\n              __assign(transformed, transformer(validMutation, initialContext_1));\n            }\n            initialContext_1.emitter.trigger('eventDrop', __assign(__assign(__assign({}, eventChangeArg), transformed), {\n              el: ev.subjectEl,\n              delta: validMutation.datesDelta,\n              jsEvent: ev.origEvent,\n              view: initialView\n            }));\n            initialContext_1.emitter.trigger('eventChange', eventChangeArg);\n            // dropped in different calendar\n          } else if (receivingContext_1) {\n            var eventRemoveArg = {\n              event: eventApi,\n              relatedEvents: buildEventApis(relevantEvents_1, initialContext_1, eventInstance),\n              revert: function () {\n                initialContext_1.dispatch({\n                  type: 'MERGE_EVENTS',\n                  eventStore: relevantEvents_1\n                });\n              }\n            };\n            initialContext_1.emitter.trigger('eventLeave', __assign(__assign({}, eventRemoveArg), {\n              draggedEl: ev.subjectEl,\n              view: initialView\n            }));\n            initialContext_1.dispatch({\n              type: 'REMOVE_EVENTS',\n              eventStore: relevantEvents_1\n            });\n            initialContext_1.emitter.trigger('eventRemove', eventRemoveArg);\n            var addedEventDef = mutatedRelevantEvents_1.defs[eventDef.defId];\n            var addedEventInstance = mutatedRelevantEvents_1.instances[eventInstance.instanceId];\n            var addedEventApi = new EventApi(receivingContext_1, addedEventDef, addedEventInstance);\n            receivingContext_1.dispatch({\n              type: 'MERGE_EVENTS',\n              eventStore: mutatedRelevantEvents_1\n            });\n            var eventAddArg = {\n              event: addedEventApi,\n              relatedEvents: buildEventApis(mutatedRelevantEvents_1, receivingContext_1, addedEventInstance),\n              revert: function () {\n                receivingContext_1.dispatch({\n                  type: 'REMOVE_EVENTS',\n                  eventStore: mutatedRelevantEvents_1\n                });\n              }\n            };\n            receivingContext_1.emitter.trigger('eventAdd', eventAddArg);\n            if (ev.isTouch) {\n              receivingContext_1.dispatch({\n                type: 'SELECT_EVENT',\n                eventInstanceId: eventInstance.instanceId\n              });\n            }\n            receivingContext_1.emitter.trigger('drop', __assign(__assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext_1)), {\n              draggedEl: ev.subjectEl,\n              jsEvent: ev.origEvent,\n              view: finalHit.context.viewApi\n            }));\n            receivingContext_1.emitter.trigger('eventReceive', __assign(__assign({}, eventAddArg), {\n              draggedEl: ev.subjectEl,\n              view: finalHit.context.viewApi\n            }));\n          }\n        } else {\n          initialContext_1.emitter.trigger('_noEventDrop');\n        }\n      }\n      _this.cleanup();\n    };\n    var component = _this.component;\n    var options = component.context.options;\n    var dragging = _this.dragging = new FeaturefulElementDragging(settings.el);\n    dragging.pointer.selector = EventDragging.SELECTOR;\n    dragging.touchScrollAllowed = false;\n    dragging.autoScroller.isEnabled = options.dragScroll;\n    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, interactionSettingsStore);\n    hitDragging.useSubjectCenter = settings.useEventCenter;\n    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);\n    hitDragging.emitter.on('dragstart', _this.handleDragStart);\n    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);\n    hitDragging.emitter.on('pointerup', _this.handlePointerUp);\n    hitDragging.emitter.on('dragend', _this.handleDragEnd);\n    return _this;\n  }\n  EventDragging.prototype.destroy = function () {\n    this.dragging.destroy();\n  };\n  // render a drag state on the next receivingCalendar\n  EventDragging.prototype.displayDrag = function (nextContext, state) {\n    var initialContext = this.component.context;\n    var prevContext = this.receivingContext;\n    // does the previous calendar need to be cleared?\n    if (prevContext && prevContext !== nextContext) {\n      // does the initial calendar need to be cleared?\n      // if so, don't clear all the way. we still need to to hide the affectedEvents\n      if (prevContext === initialContext) {\n        prevContext.dispatch({\n          type: 'SET_EVENT_DRAG',\n          state: {\n            affectedEvents: state.affectedEvents,\n            mutatedEvents: createEmptyEventStore(),\n            isEvent: true\n          }\n        });\n        // completely clear the old calendar if it wasn't the initial\n      } else {\n        prevContext.dispatch({\n          type: 'UNSET_EVENT_DRAG'\n        });\n      }\n    }\n    if (nextContext) {\n      nextContext.dispatch({\n        type: 'SET_EVENT_DRAG',\n        state: state\n      });\n    }\n  };\n  EventDragging.prototype.clearDrag = function () {\n    var initialCalendar = this.component.context;\n    var receivingContext = this.receivingContext;\n    if (receivingContext) {\n      receivingContext.dispatch({\n        type: 'UNSET_EVENT_DRAG'\n      });\n    }\n    // the initial calendar might have an dummy drag state from displayDrag\n    if (initialCalendar !== receivingContext) {\n      initialCalendar.dispatch({\n        type: 'UNSET_EVENT_DRAG'\n      });\n    }\n  };\n  EventDragging.prototype.cleanup = function () {\n    this.subjectSeg = null;\n    this.isDragging = false;\n    this.eventRange = null;\n    this.relevantEvents = null;\n    this.receivingContext = null;\n    this.validMutation = null;\n    this.mutatedRelevantEvents = null;\n  };\n  // TODO: test this in IE11\n  // QUESTION: why do we need it on the resizable???\n  EventDragging.SELECTOR = '.fc-event-draggable, .fc-event-resizable';\n  return EventDragging;\n}(Interaction);\nfunction computeEventMutation(hit0, hit1, massagers) {\n  var dateSpan0 = hit0.dateSpan;\n  var dateSpan1 = hit1.dateSpan;\n  var date0 = dateSpan0.range.start;\n  var date1 = dateSpan1.range.start;\n  var standardProps = {};\n  if (dateSpan0.allDay !== dateSpan1.allDay) {\n    standardProps.allDay = dateSpan1.allDay;\n    standardProps.hasEnd = hit1.context.options.allDayMaintainDuration;\n    if (dateSpan1.allDay) {\n      // means date1 is already start-of-day,\n      // but date0 needs to be converted\n      date0 = startOfDay(date0);\n    }\n  }\n  var delta = diffDates(date0, date1, hit0.context.dateEnv, hit0.componentId === hit1.componentId ? hit0.largeUnit : null);\n  if (delta.milliseconds) {\n    // has hours/minutes/seconds\n    standardProps.allDay = false;\n  }\n  var mutation = {\n    datesDelta: delta,\n    standardProps: standardProps\n  };\n  for (var _i = 0, massagers_1 = massagers; _i < massagers_1.length; _i++) {\n    var massager = massagers_1[_i];\n    massager(mutation, hit0, hit1);\n  }\n  return mutation;\n}\nfunction getComponentTouchDelay(component) {\n  var options = component.context.options;\n  var delay = options.eventLongPressDelay;\n  if (delay == null) {\n    delay = options.longPressDelay;\n  }\n  return delay;\n}\nvar EventResizing = /** @class */function (_super) {\n  __extends(EventResizing, _super);\n  function EventResizing(settings) {\n    var _this = _super.call(this, settings) || this;\n    // internal state\n    _this.draggingSegEl = null;\n    _this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?\n    _this.eventRange = null;\n    _this.relevantEvents = null;\n    _this.validMutation = null;\n    _this.mutatedRelevantEvents = null;\n    _this.handlePointerDown = function (ev) {\n      var component = _this.component;\n      var segEl = _this.querySegEl(ev);\n      var seg = getElSeg(segEl);\n      var eventRange = _this.eventRange = seg.eventRange;\n      _this.dragging.minDistance = component.context.options.eventDragMinDistance;\n      // if touch, need to be working with a selected event\n      _this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target) || ev.isTouch && _this.component.props.eventSelection !== eventRange.instance.instanceId);\n    };\n    _this.handleDragStart = function (ev) {\n      var context = _this.component.context;\n      var eventRange = _this.eventRange;\n      _this.relevantEvents = getRelevantEvents(context.getCurrentData().eventStore, _this.eventRange.instance.instanceId);\n      var segEl = _this.querySegEl(ev);\n      _this.draggingSegEl = segEl;\n      _this.draggingSeg = getElSeg(segEl);\n      context.calendarApi.unselect();\n      context.emitter.trigger('eventResizeStart', {\n        el: segEl,\n        event: new EventApi(context, eventRange.def, eventRange.instance),\n        jsEvent: ev.origEvent,\n        view: context.viewApi\n      });\n    };\n    _this.handleHitUpdate = function (hit, isFinal, ev) {\n      var context = _this.component.context;\n      var relevantEvents = _this.relevantEvents;\n      var initialHit = _this.hitDragging.initialHit;\n      var eventInstance = _this.eventRange.instance;\n      var mutation = null;\n      var mutatedRelevantEvents = null;\n      var isInvalid = false;\n      var interaction = {\n        affectedEvents: relevantEvents,\n        mutatedEvents: createEmptyEventStore(),\n        isEvent: true\n      };\n      if (hit) {\n        var disallowed = hit.componentId === initialHit.componentId && _this.isHitComboAllowed && !_this.isHitComboAllowed(initialHit, hit);\n        if (!disallowed) {\n          mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-event-resizer-start'), eventInstance.range);\n        }\n      }\n      if (mutation) {\n        mutatedRelevantEvents = applyMutationToEventStore(relevantEvents, context.getCurrentData().eventUiBases, mutation, context);\n        interaction.mutatedEvents = mutatedRelevantEvents;\n        if (!isInteractionValid(interaction, hit.dateProfile, context)) {\n          isInvalid = true;\n          mutation = null;\n          mutatedRelevantEvents = null;\n          interaction.mutatedEvents = null;\n        }\n      }\n      if (mutatedRelevantEvents) {\n        context.dispatch({\n          type: 'SET_EVENT_RESIZE',\n          state: interaction\n        });\n      } else {\n        context.dispatch({\n          type: 'UNSET_EVENT_RESIZE'\n        });\n      }\n      if (!isInvalid) {\n        enableCursor();\n      } else {\n        disableCursor();\n      }\n      if (!isFinal) {\n        if (mutation && isHitsEqual(initialHit, hit)) {\n          mutation = null;\n        }\n        _this.validMutation = mutation;\n        _this.mutatedRelevantEvents = mutatedRelevantEvents;\n      }\n    };\n    _this.handleDragEnd = function (ev) {\n      var context = _this.component.context;\n      var eventDef = _this.eventRange.def;\n      var eventInstance = _this.eventRange.instance;\n      var eventApi = new EventApi(context, eventDef, eventInstance);\n      var relevantEvents = _this.relevantEvents;\n      var mutatedRelevantEvents = _this.mutatedRelevantEvents;\n      context.emitter.trigger('eventResizeStop', {\n        el: _this.draggingSegEl,\n        event: eventApi,\n        jsEvent: ev.origEvent,\n        view: context.viewApi\n      });\n      if (_this.validMutation) {\n        var updatedEventApi = new EventApi(context, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null);\n        context.dispatch({\n          type: 'MERGE_EVENTS',\n          eventStore: mutatedRelevantEvents\n        });\n        var eventChangeArg = {\n          oldEvent: eventApi,\n          event: updatedEventApi,\n          relatedEvents: buildEventApis(mutatedRelevantEvents, context, eventInstance),\n          revert: function () {\n            context.dispatch({\n              type: 'MERGE_EVENTS',\n              eventStore: relevantEvents // the pre-change events\n            });\n          }\n        };\n\n        context.emitter.trigger('eventResize', __assign(__assign({}, eventChangeArg), {\n          el: _this.draggingSegEl,\n          startDelta: _this.validMutation.startDelta || createDuration(0),\n          endDelta: _this.validMutation.endDelta || createDuration(0),\n          jsEvent: ev.origEvent,\n          view: context.viewApi\n        }));\n        context.emitter.trigger('eventChange', eventChangeArg);\n      } else {\n        context.emitter.trigger('_noEventResize');\n      }\n      // reset all internal state\n      _this.draggingSeg = null;\n      _this.relevantEvents = null;\n      _this.validMutation = null;\n      // okay to keep eventInstance around. useful to set it in handlePointerDown\n    };\n\n    var component = settings.component;\n    var dragging = _this.dragging = new FeaturefulElementDragging(settings.el);\n    dragging.pointer.selector = '.fc-event-resizer';\n    dragging.touchScrollAllowed = false;\n    dragging.autoScroller.isEnabled = component.context.options.dragScroll;\n    var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, interactionSettingsToStore(settings));\n    hitDragging.emitter.on('pointerdown', _this.handlePointerDown);\n    hitDragging.emitter.on('dragstart', _this.handleDragStart);\n    hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);\n    hitDragging.emitter.on('dragend', _this.handleDragEnd);\n    return _this;\n  }\n  EventResizing.prototype.destroy = function () {\n    this.dragging.destroy();\n  };\n  EventResizing.prototype.querySegEl = function (ev) {\n    return elementClosest(ev.subjectEl, '.fc-event');\n  };\n  return EventResizing;\n}(Interaction);\nfunction computeMutation(hit0, hit1, isFromStart, instanceRange) {\n  var dateEnv = hit0.context.dateEnv;\n  var date0 = hit0.dateSpan.range.start;\n  var date1 = hit1.dateSpan.range.start;\n  var delta = diffDates(date0, date1, dateEnv, hit0.largeUnit);\n  if (isFromStart) {\n    if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {\n      return {\n        startDelta: delta\n      };\n    }\n  } else if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {\n    return {\n      endDelta: delta\n    };\n  }\n  return null;\n}\nvar UnselectAuto = /** @class */function () {\n  function UnselectAuto(context) {\n    var _this = this;\n    this.context = context;\n    this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system\n    this.matchesCancel = false;\n    this.matchesEvent = false;\n    this.onSelect = function (selectInfo) {\n      if (selectInfo.jsEvent) {\n        _this.isRecentPointerDateSelect = true;\n      }\n    };\n    this.onDocumentPointerDown = function (pev) {\n      var unselectCancel = _this.context.options.unselectCancel;\n      var downEl = getEventTargetViaRoot(pev.origEvent);\n      _this.matchesCancel = !!elementClosest(downEl, unselectCancel);\n      _this.matchesEvent = !!elementClosest(downEl, EventDragging.SELECTOR); // interaction started on an event?\n    };\n\n    this.onDocumentPointerUp = function (pev) {\n      var context = _this.context;\n      var documentPointer = _this.documentPointer;\n      var calendarState = context.getCurrentData();\n      // touch-scrolling should never unfocus any type of selection\n      if (!documentPointer.wasTouchScroll) {\n        if (calendarState.dateSelection &&\n        // an existing date selection?\n        !_this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?\n        ) {\n          var unselectAuto = context.options.unselectAuto;\n          if (unselectAuto && (!unselectAuto || !_this.matchesCancel)) {\n            context.calendarApi.unselect(pev);\n          }\n        }\n        if (calendarState.eventSelection &&\n        // an existing event selected?\n        !_this.matchesEvent // interaction DIDN'T start on an event\n        ) {\n          context.dispatch({\n            type: 'UNSELECT_EVENT'\n          });\n        }\n      }\n      _this.isRecentPointerDateSelect = false;\n    };\n    var documentPointer = this.documentPointer = new PointerDragging(document);\n    documentPointer.shouldIgnoreMove = true;\n    documentPointer.shouldWatchScroll = false;\n    documentPointer.emitter.on('pointerdown', this.onDocumentPointerDown);\n    documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);\n    /*\n    TODO: better way to know about whether there was a selection with the pointer\n    */\n    context.emitter.on('select', this.onSelect);\n  }\n  UnselectAuto.prototype.destroy = function () {\n    this.context.emitter.off('select', this.onSelect);\n    this.documentPointer.destroy();\n  };\n  return UnselectAuto;\n}();\nvar OPTION_REFINERS = {\n  fixedMirrorParent: identity\n};\nvar LISTENER_REFINERS = {\n  dateClick: identity,\n  eventDragStart: identity,\n  eventDragStop: identity,\n  eventDrop: identity,\n  eventResizeStart: identity,\n  eventResizeStop: identity,\n  eventResize: identity,\n  drop: identity,\n  eventReceive: identity,\n  eventLeave: identity\n};\n\n/*\nGiven an already instantiated draggable object for one-or-more elements,\nInterprets any dragging as an attempt to drag an events that lives outside\nof a calendar onto a calendar.\n*/\nvar ExternalElementDragging = /** @class */function () {\n  function ExternalElementDragging(dragging, suppliedDragMeta) {\n    var _this = this;\n    this.receivingContext = null;\n    this.droppableEvent = null; // will exist for all drags, even if create:false\n    this.suppliedDragMeta = null;\n    this.dragMeta = null;\n    this.handleDragStart = function (ev) {\n      _this.dragMeta = _this.buildDragMeta(ev.subjectEl);\n    };\n    this.handleHitUpdate = function (hit, isFinal, ev) {\n      var dragging = _this.hitDragging.dragging;\n      var receivingContext = null;\n      var droppableEvent = null;\n      var isInvalid = false;\n      var interaction = {\n        affectedEvents: createEmptyEventStore(),\n        mutatedEvents: createEmptyEventStore(),\n        isEvent: _this.dragMeta.create\n      };\n      if (hit) {\n        receivingContext = hit.context;\n        if (_this.canDropElOnCalendar(ev.subjectEl, receivingContext)) {\n          droppableEvent = computeEventForDateSpan(hit.dateSpan, _this.dragMeta, receivingContext);\n          interaction.mutatedEvents = eventTupleToStore(droppableEvent);\n          isInvalid = !isInteractionValid(interaction, hit.dateProfile, receivingContext);\n          if (isInvalid) {\n            interaction.mutatedEvents = createEmptyEventStore();\n            droppableEvent = null;\n          }\n        }\n      }\n      _this.displayDrag(receivingContext, interaction);\n      // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)\n      // TODO: wish we could somehow wait for dispatch to guarantee render\n      dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector('.fc-event-mirror'));\n      if (!isInvalid) {\n        enableCursor();\n      } else {\n        disableCursor();\n      }\n      if (!isFinal) {\n        dragging.setMirrorNeedsRevert(!droppableEvent);\n        _this.receivingContext = receivingContext;\n        _this.droppableEvent = droppableEvent;\n      }\n    };\n    this.handleDragEnd = function (pev) {\n      var _a = _this,\n        receivingContext = _a.receivingContext,\n        droppableEvent = _a.droppableEvent;\n      _this.clearDrag();\n      if (receivingContext && droppableEvent) {\n        var finalHit = _this.hitDragging.finalHit;\n        var finalView = finalHit.context.viewApi;\n        var dragMeta = _this.dragMeta;\n        receivingContext.emitter.trigger('drop', __assign(__assign({}, buildDatePointApiWithContext(finalHit.dateSpan, receivingContext)), {\n          draggedEl: pev.subjectEl,\n          jsEvent: pev.origEvent,\n          view: finalView\n        }));\n        if (dragMeta.create) {\n          var addingEvents_1 = eventTupleToStore(droppableEvent);\n          receivingContext.dispatch({\n            type: 'MERGE_EVENTS',\n            eventStore: addingEvents_1\n          });\n          if (pev.isTouch) {\n            receivingContext.dispatch({\n              type: 'SELECT_EVENT',\n              eventInstanceId: droppableEvent.instance.instanceId\n            });\n          }\n          // signal that an external event landed\n          receivingContext.emitter.trigger('eventReceive', {\n            event: new EventApi(receivingContext, droppableEvent.def, droppableEvent.instance),\n            relatedEvents: [],\n            revert: function () {\n              receivingContext.dispatch({\n                type: 'REMOVE_EVENTS',\n                eventStore: addingEvents_1\n              });\n            },\n            draggedEl: pev.subjectEl,\n            view: finalView\n          });\n        }\n      }\n      _this.receivingContext = null;\n      _this.droppableEvent = null;\n    };\n    var hitDragging = this.hitDragging = new HitDragging(dragging, interactionSettingsStore);\n    hitDragging.requireInitial = false; // will start outside of a component\n    hitDragging.emitter.on('dragstart', this.handleDragStart);\n    hitDragging.emitter.on('hitupdate', this.handleHitUpdate);\n    hitDragging.emitter.on('dragend', this.handleDragEnd);\n    this.suppliedDragMeta = suppliedDragMeta;\n  }\n  ExternalElementDragging.prototype.buildDragMeta = function (subjectEl) {\n    if (typeof this.suppliedDragMeta === 'object') {\n      return parseDragMeta(this.suppliedDragMeta);\n    }\n    if (typeof this.suppliedDragMeta === 'function') {\n      return parseDragMeta(this.suppliedDragMeta(subjectEl));\n    }\n    return getDragMetaFromEl(subjectEl);\n  };\n  ExternalElementDragging.prototype.displayDrag = function (nextContext, state) {\n    var prevContext = this.receivingContext;\n    if (prevContext && prevContext !== nextContext) {\n      prevContext.dispatch({\n        type: 'UNSET_EVENT_DRAG'\n      });\n    }\n    if (nextContext) {\n      nextContext.dispatch({\n        type: 'SET_EVENT_DRAG',\n        state: state\n      });\n    }\n  };\n  ExternalElementDragging.prototype.clearDrag = function () {\n    if (this.receivingContext) {\n      this.receivingContext.dispatch({\n        type: 'UNSET_EVENT_DRAG'\n      });\n    }\n  };\n  ExternalElementDragging.prototype.canDropElOnCalendar = function (el, receivingContext) {\n    var dropAccept = receivingContext.options.dropAccept;\n    if (typeof dropAccept === 'function') {\n      return dropAccept.call(receivingContext.calendarApi, el);\n    }\n    if (typeof dropAccept === 'string' && dropAccept) {\n      return Boolean(elementMatches(el, dropAccept));\n    }\n    return true;\n  };\n  return ExternalElementDragging;\n}();\n// Utils for computing event store from the DragMeta\n// ----------------------------------------------------------------------------------------------------\nfunction computeEventForDateSpan(dateSpan, dragMeta, context) {\n  var defProps = __assign({}, dragMeta.leftoverProps);\n  for (var _i = 0, _a = context.pluginHooks.externalDefTransforms; _i < _a.length; _i++) {\n    var transform = _a[_i];\n    __assign(defProps, transform(dateSpan, dragMeta));\n  }\n  var _b = refineEventDef(defProps, context),\n    refined = _b.refined,\n    extra = _b.extra;\n  var def = parseEventDef(refined, extra, dragMeta.sourceId, dateSpan.allDay, context.options.forceEventDuration || Boolean(dragMeta.duration),\n  // hasEnd\n  context);\n  var start = dateSpan.range.start;\n  // only rely on time info if drop zone is all-day,\n  // otherwise, we already know the time\n  if (dateSpan.allDay && dragMeta.startTime) {\n    start = context.dateEnv.add(start, dragMeta.startTime);\n  }\n  var end = dragMeta.duration ? context.dateEnv.add(start, dragMeta.duration) : getDefaultEventEnd(dateSpan.allDay, start, context);\n  var instance = createEventInstance(def.defId, {\n    start: start,\n    end: end\n  });\n  return {\n    def: def,\n    instance: instance\n  };\n}\n// Utils for extracting data from element\n// ----------------------------------------------------------------------------------------------------\nfunction getDragMetaFromEl(el) {\n  var str = getEmbeddedElData(el, 'event');\n  var obj = str ? JSON.parse(str) : {\n    create: false\n  }; // if no embedded data, assume no event creation\n  return parseDragMeta(obj);\n}\nconfig.dataAttrPrefix = '';\nfunction getEmbeddedElData(el, name) {\n  var prefix = config.dataAttrPrefix;\n  var prefixedName = (prefix ? prefix + '-' : '') + name;\n  return el.getAttribute('data-' + prefixedName) || '';\n}\n\n/*\nMakes an element (that is *external* to any calendar) draggable.\nCan pass in data that determines how an event will be created when dropped onto a calendar.\nLeverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.\n*/\nvar ExternalDraggable = /** @class */function () {\n  function ExternalDraggable(el, settings) {\n    var _this = this;\n    if (settings === void 0) {\n      settings = {};\n    }\n    this.handlePointerDown = function (ev) {\n      var dragging = _this.dragging;\n      var _a = _this.settings,\n        minDistance = _a.minDistance,\n        longPressDelay = _a.longPressDelay;\n      dragging.minDistance = minDistance != null ? minDistance : ev.isTouch ? 0 : BASE_OPTION_DEFAULTS.eventDragMinDistance;\n      dragging.delay = ev.isTouch ?\n      // TODO: eventually read eventLongPressDelay instead vvv\n      longPressDelay != null ? longPressDelay : BASE_OPTION_DEFAULTS.longPressDelay : 0;\n    };\n    this.handleDragStart = function (ev) {\n      if (ev.isTouch && _this.dragging.delay && ev.subjectEl.classList.contains('fc-event')) {\n        _this.dragging.mirror.getMirrorEl().classList.add('fc-event-selected');\n      }\n    };\n    this.settings = settings;\n    var dragging = this.dragging = new FeaturefulElementDragging(el);\n    dragging.touchScrollAllowed = false;\n    if (settings.itemSelector != null) {\n      dragging.pointer.selector = settings.itemSelector;\n    }\n    if (settings.appendTo != null) {\n      dragging.mirror.parentNode = settings.appendTo; // TODO: write tests\n    }\n\n    dragging.emitter.on('pointerdown', this.handlePointerDown);\n    dragging.emitter.on('dragstart', this.handleDragStart);\n    new ExternalElementDragging(dragging, settings.eventData); // eslint-disable-line no-new\n  }\n\n  ExternalDraggable.prototype.destroy = function () {\n    this.dragging.destroy();\n  };\n  return ExternalDraggable;\n}();\n\n/*\nDetects when a *THIRD-PARTY* drag-n-drop system interacts with elements.\nThe third-party system is responsible for drawing the visuals effects of the drag.\nThis class simply monitors for pointer movements and fires events.\nIt also has the ability to hide the moving element (the \"mirror\") during the drag.\n*/\nvar InferredElementDragging = /** @class */function (_super) {\n  __extends(InferredElementDragging, _super);\n  function InferredElementDragging(containerEl) {\n    var _this = _super.call(this, containerEl) || this;\n    _this.shouldIgnoreMove = false;\n    _this.mirrorSelector = '';\n    _this.currentMirrorEl = null;\n    _this.handlePointerDown = function (ev) {\n      _this.emitter.trigger('pointerdown', ev);\n      if (!_this.shouldIgnoreMove) {\n        // fire dragstart right away. does not support delay or min-distance\n        _this.emitter.trigger('dragstart', ev);\n      }\n    };\n    _this.handlePointerMove = function (ev) {\n      if (!_this.shouldIgnoreMove) {\n        _this.emitter.trigger('dragmove', ev);\n      }\n    };\n    _this.handlePointerUp = function (ev) {\n      _this.emitter.trigger('pointerup', ev);\n      if (!_this.shouldIgnoreMove) {\n        // fire dragend right away. does not support a revert animation\n        _this.emitter.trigger('dragend', ev);\n      }\n    };\n    var pointer = _this.pointer = new PointerDragging(containerEl);\n    pointer.emitter.on('pointerdown', _this.handlePointerDown);\n    pointer.emitter.on('pointermove', _this.handlePointerMove);\n    pointer.emitter.on('pointerup', _this.handlePointerUp);\n    return _this;\n  }\n  InferredElementDragging.prototype.destroy = function () {\n    this.pointer.destroy();\n  };\n  InferredElementDragging.prototype.setIgnoreMove = function (bool) {\n    this.shouldIgnoreMove = bool;\n  };\n  InferredElementDragging.prototype.setMirrorIsVisible = function (bool) {\n    if (bool) {\n      // restore a previously hidden element.\n      // use the reference in case the selector class has already been removed.\n      if (this.currentMirrorEl) {\n        this.currentMirrorEl.style.visibility = '';\n        this.currentMirrorEl = null;\n      }\n    } else {\n      var mirrorEl = this.mirrorSelector\n      // TODO: somehow query FullCalendars WITHIN shadow-roots\n      ? document.querySelector(this.mirrorSelector) : null;\n      if (mirrorEl) {\n        this.currentMirrorEl = mirrorEl;\n        mirrorEl.style.visibility = 'hidden';\n      }\n    }\n  };\n  return InferredElementDragging;\n}(ElementDragging);\n\n/*\nBridges third-party drag-n-drop systems with FullCalendar.\nMust be instantiated and destroyed by caller.\n*/\nvar ThirdPartyDraggable = /** @class */function () {\n  function ThirdPartyDraggable(containerOrSettings, settings) {\n    var containerEl = document;\n    if (\n    // wish we could just test instanceof EventTarget, but doesn't work in IE11\n    containerOrSettings === document || containerOrSettings instanceof Element) {\n      containerEl = containerOrSettings;\n      settings = settings || {};\n    } else {\n      settings = containerOrSettings || {};\n    }\n    var dragging = this.dragging = new InferredElementDragging(containerEl);\n    if (typeof settings.itemSelector === 'string') {\n      dragging.pointer.selector = settings.itemSelector;\n    } else if (containerEl === document) {\n      dragging.pointer.selector = '[data-event]';\n    }\n    if (typeof settings.mirrorSelector === 'string') {\n      dragging.mirrorSelector = settings.mirrorSelector;\n    }\n    new ExternalElementDragging(dragging, settings.eventData); // eslint-disable-line no-new\n  }\n\n  ThirdPartyDraggable.prototype.destroy = function () {\n    this.dragging.destroy();\n  };\n  return ThirdPartyDraggable;\n}();\nvar main = createPlugin({\n  componentInteractions: [DateClicking, DateSelecting, EventDragging, EventResizing],\n  calendarInteractions: [UnselectAuto],\n  elementDraggingImpl: FeaturefulElementDragging,\n  optionRefiners: OPTION_REFINERS,\n  listenerRefiners: LISTENER_REFINERS\n});\nexport default main;\nexport { ExternalDraggable as Draggable, FeaturefulElementDragging, PointerDragging, ThirdPartyDraggable };","map":{"version":3,"mappings":"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","names":["config","touchMouseIgnoreWait","ignoreMouseDepth","listenerCnt","isWindowTouchMoveCancelled","containerEl","ev","_this","shouldIgnoreMouse","isPrimaryMouseButton","tryStart","pev","createEventFromMouse","emitter","trigger","initScrollWatch","shouldIgnoreMove","document","addEventListener","handleMouseMove","handleMouseUp","recordCoords","removeEventListener","cleanup","isTouchDragging","createEventFromTouch","targetEl","target","handleTouchMove","handleTouchEnd","window","handleTouchScroll","isDragging","startIgnoringMouse","wasTouchScroll","pageX","pageXOffset","prevScrollX","prevPageX","pageY","pageYOffset","prevScrollY","prevPageY","origEvent","isTouch","subjectEl","deltaX","origPageX","deltaY","origPageY","Emitter","handleMouseDown","handleTouchStart","passive","listenerCreated","PointerDragging","listenerDestroyed","querySubjectEl","downEl","handleSelector","elementClosest","destroyScrollWatch","selector","shouldWatchScroll","handleScroll","isFirst","touches","length","button","ctrlKey","setTimeout","onWindowTouchMove","preventDefault","body","ElementMirror","sourceEl","sourceElRect","getBoundingClientRect","origScreenX","origScreenY","updateElPosition","bool","isVisible","mirrorEl","style","display","needsRevertAnimation","callback","done","revertDuration","doRevertAnimation","finalSourceElRect","transition","applyStyle","left","top","whenTransitionDone","removeElement","getMirrorEl","cloneNode","classList","add","position","zIndex","visibility","boxSizing","width","right","height","bottom","margin","parentNode","appendChild","__extends","scrollController","doesListening","_super","scrollTop","getScrollTop","scrollLeft","getScrollLeft","handleScrollChange","origScrollTop","origScrollLeft","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","clientWidth","getClientWidth","clientHeight","getClientHeight","clientRect","computeClientRect","getEventTarget","ScrollGeomCache","setScrollTop","Math","max","min","getMaxScrollTop","setScrollLeft","getMaxScrollLeft","ScrollController","el","ElementScrollController","ElementScrollGeomCache","computeInnerRect","WindowScrollController","WindowScrollGeomCache","getTime","performance","now","Date","isAnimating","edge","computeBestEdge","pointerScreenX","pointerScreenY","handleSide","msSinceRequest","requestAnimation","AutoScroller","scrollStartEl","isEnabled","scrollCaches","buildCaches","everMovedUp","everMovedDown","everMovedLeft","everMovedRight","handleMove","yDelta","xDelta","_a","_i","scrollCache","destroy","requestAnimationFrame","animate","seconds","invDistance","edgeThreshold","distance","velocity","maxVelocity","sign","name","bestSide","scrollCaches_1","rect","leftDist","rightDist","topDist","bottomDist","canScrollUp","canScrollDown","canScrollLeft","canScrollRight","queryScrollEls","map","els","scrollQuery","query","push","Array","prototype","slice","call","getElRoot","querySelectorAll","isInteracting","isDelayEnded","isDistanceSurpassed","preventSelection","preventContextMenu","pointer","mirror","setIsVisible","start","startDelay","minDistance","handleDistanceSurpassed","distanceSq","type","autoScroller","allowSelection","allowContextMenu","stop","tryStopDrag","delayTimeoutId","clearTimeout","on","onPointerDown","onPointerMove","onPointerUp","FeaturefulElementDragging","delay","handleDelayEnd","tryStartDrag","touchScrollAllowed","mirrorNeedsRevert","cancelTouchScroll","stopDrag","bind","ElementDragging","origRect","computeRect","getClippingParents","scrollEl","OffsetTracker","point","isIgnoredClipping","pointInsideRect","node","tagName","dragging","droppableStore","initialHit","movingHit","finalHit","prepareHits","processFirstCoord","requireInitial","setIgnoreMove","releaseHits","handlePointerDown","handleDragStart","handleDragMove","handlePointerUp","handleDragEnd","HitDragging","origPoint","adjustedPoint","subjectRect","HTMLElement","constrainPoint","queryHitForOffset","useSubjectCenter","slicedSubjectRect","intersectRects","getRectCenter","coordAdjust","diffPoints","forceHandle","hit","isHitsEqual","offsetTrackers","mapHash","interactionSettings","component","id","offsetLeft","offsetTop","bestHit","offsetTracker","isWithinClipping","originLeft","computeLeft","originTop","computeTop","positionLeft","positionTop","queryHit","rangeContainsRange","dateProfile","activeRange","dateSpan","range","layer","componentId","context","hit0","hit1","Boolean","isDateSpansEqual","buildDatePointApiWithContext","props","pluginHooks","datePointTransforms","transform","__assign","buildDatePointApi","dateEnv","span","date","toDate","dateStr","formatIso","omitTime","allDay","settings","isValidDateDownEl","hitDragging","arg","dayEl","jsEvent","view","viewApi","calendarApi","interactionSettingsToStore","DateClicking","Interaction","canSelect","options","selectable","getComponentTouchDelay","unselect","isFinal","dragSelection","isInvalid","disallowed","isHitComboAllowed","joinHitsIntoSelection","dateSelectionTransformers","isDateSelectionValid","dispatch","selection","enableCursor","disableCursor","triggerDateSelect","selectMinDistance","dragScroll","handleHitUpdate","DateSelecting","selectLongPressDelay","longPressDelay","dateSpan0","dateSpan1","ms","end","sort","compareNumbers","dateSelectionTransformers_1","transformer","res","origTarget","initialContext","subjectSeg","getElSeg","eventRange","eventInstanceId","instance","instanceId","relevantEvents","getRelevantEvents","getCurrentData","eventStore","eventDragMinDistance","eventSelection","fixedMirrorParent","dragRevertDuration","isValid","isValidSegDownEl","contains","event","EventApi","def","receivingContext","mutation","mutatedRelevantEvents","interaction","affectedEvents","mutatedEvents","createEmptyEventStore","isEvent","receivingOptions","editable","droppable","computeEventMutation","eventDragMutationMassagers","applyMutationToEventStore","eventUiBases","isInteractionValid","displayDrag","setMirrorNeedsRevert","setMirrorIsVisible","querySelector","validMutation","initialContext_1","initialView","receivingContext_1","eventDef","eventInstance","eventApi","relevantEvents_1","mutatedRelevantEvents_1","clearDrag","updatedEventApi","defs","defId","instances","eventChangeArg","oldEvent","relatedEvents","buildEventApis","revert","transformed","_b","eventDropTransformers","delta","datesDelta","eventRemoveArg","draggedEl","addedEventDef","addedEventInstance","addedEventApi","eventAddArg","EventDragging","SELECTOR","interactionSettingsStore","useEventCenter","nextContext","state","prevContext","initialCalendar","massagers","date0","date1","standardProps","hasEnd","allDayMaintainDuration","startOfDay","diffDates","largeUnit","milliseconds","massagers_1","massager","eventLongPressDelay","segEl","querySegEl","seg","draggingSegEl","draggingSeg","computeMutation","startDelta","createDuration","endDelta","EventResizing","isFromStart","instanceRange","selectInfo","isRecentPointerDateSelect","unselectCancel","getEventTargetViaRoot","matchesCancel","matchesEvent","calendarState","documentPointer","dateSelection","unselectAuto","onDocumentPointerDown","onDocumentPointerUp","onSelect","UnselectAuto","off","OPTION_REFINERS","identity","LISTENER_REFINERS","dateClick","eventDragStart","eventDragStop","eventDrop","eventResizeStart","eventResizeStop","eventResize","drop","eventReceive","eventLeave","suppliedDragMeta","dragMeta","buildDragMeta","droppableEvent","create","canDropElOnCalendar","computeEventForDateSpan","eventTupleToStore","finalView","addingEvents_1","ExternalElementDragging","parseDragMeta","getDragMetaFromEl","dropAccept","elementMatches","defProps","leftoverProps","externalDefTransforms","refineEventDef","refined","extra","parseEventDef","sourceId","forceEventDuration","duration","startTime","getDefaultEventEnd","createEventInstance","str","getEmbeddedElData","obj","JSON","parse","dataAttrPrefix","prefix","prefixedName","getAttribute","BASE_OPTION_DEFAULTS","itemSelector","appendTo","eventData","ExternalDraggable","handlePointerMove","InferredElementDragging","currentMirrorEl","mirrorSelector","containerOrSettings","Element","ThirdPartyDraggable","createPlugin","componentInteractions","calendarInteractions","elementDraggingImpl","optionRefiners","listenerRefiners"],"sources":["/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/dnd/PointerDragging.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/dnd/ElementMirror.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/ScrollGeomCache.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/ElementScrollGeomCache.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/WindowScrollGeomCache.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/dnd/AutoScroller.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/dnd/FeaturefulElementDragging.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/OffsetTracker.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions/HitDragging.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/utils.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions/DateClicking.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions/DateSelecting.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions/EventDragging.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions/EventResizing.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions/UnselectAuto.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/options.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions-external/ExternalElementDragging.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions-external/ExternalDraggable.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions-external/InferredElementDragging.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/interactions-external/ThirdPartyDraggable.ts","/home/student/Desktop/Upeo/dashboard/node_modules/@fullcalendar/interaction/src/main.ts"],"sourcesContent":["import { config, elementClosest, Emitter, PointerDragEvent } from '@fullcalendar/common'\n\nconfig.touchMouseIgnoreWait = 500\n\nlet ignoreMouseDepth = 0\nlet listenerCnt = 0\nlet isWindowTouchMoveCancelled = false\n\n/*\nUses a \"pointer\" abstraction, which monitors UI events for both mouse and touch.\nTracks when the pointer \"drags\" on a certain element, meaning down+move+up.\n\nAlso, tracks if there was touch-scrolling.\nAlso, can prevent touch-scrolling from happening.\nAlso, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.\n\nemits:\n- pointerdown\n- pointermove\n- pointerup\n*/\nexport class PointerDragging {\n  containerEl: EventTarget\n  subjectEl: HTMLElement | null = null\n  emitter: Emitter<any>\n\n  // options that can be directly assigned by caller\n  selector: string = '' // will cause subjectEl in all emitted events to be this element\n  handleSelector: string = ''\n  shouldIgnoreMove: boolean = false\n  shouldWatchScroll: boolean = true // for simulating pointermove on scroll\n\n  // internal states\n  isDragging: boolean = false\n  isTouchDragging: boolean = false\n  wasTouchScroll: boolean = false\n  origPageX: number\n  origPageY: number\n  prevPageX: number\n  prevPageY: number\n  prevScrollX: number // at time of last pointer pageX/pageY capture\n  prevScrollY: number // \"\n\n  constructor(containerEl: EventTarget) {\n    this.containerEl = containerEl\n    this.emitter = new Emitter()\n    containerEl.addEventListener('mousedown', this.handleMouseDown as EventListener)\n    containerEl.addEventListener('touchstart', this.handleTouchStart as EventListener, { passive: true })\n    listenerCreated()\n  }\n\n  destroy() {\n    this.containerEl.removeEventListener('mousedown', this.handleMouseDown as EventListener)\n    this.containerEl.removeEventListener('touchstart', this.handleTouchStart as EventListener, { passive: true } as AddEventListenerOptions)\n    listenerDestroyed()\n  }\n\n  tryStart(ev: UIEvent): boolean {\n    let subjectEl = this.querySubjectEl(ev)\n    let downEl = ev.target as HTMLElement\n\n    if (\n      subjectEl &&\n      (!this.handleSelector || elementClosest(downEl, this.handleSelector))\n    ) {\n      this.subjectEl = subjectEl\n      this.isDragging = true // do this first so cancelTouchScroll will work\n      this.wasTouchScroll = false\n\n      return true\n    }\n\n    return false\n  }\n\n  cleanup() {\n    isWindowTouchMoveCancelled = false\n    this.isDragging = false\n    this.subjectEl = null\n    // keep wasTouchScroll around for later access\n    this.destroyScrollWatch()\n  }\n\n  querySubjectEl(ev: UIEvent): HTMLElement {\n    if (this.selector) {\n      return elementClosest(ev.target as HTMLElement, this.selector)\n    }\n    return this.containerEl as HTMLElement\n  }\n\n  // Mouse\n  // ----------------------------------------------------------------------------------------------------\n\n  handleMouseDown = (ev: MouseEvent) => {\n    if (\n      !this.shouldIgnoreMouse() &&\n      isPrimaryMouseButton(ev) &&\n      this.tryStart(ev)\n    ) {\n      let pev = this.createEventFromMouse(ev, true)\n      this.emitter.trigger('pointerdown', pev)\n      this.initScrollWatch(pev)\n\n      if (!this.shouldIgnoreMove) {\n        document.addEventListener('mousemove', this.handleMouseMove)\n      }\n\n      document.addEventListener('mouseup', this.handleMouseUp)\n    }\n  }\n\n  handleMouseMove = (ev: MouseEvent) => {\n    let pev = this.createEventFromMouse(ev)\n    this.recordCoords(pev)\n    this.emitter.trigger('pointermove', pev)\n  }\n\n  handleMouseUp = (ev: MouseEvent) => {\n    document.removeEventListener('mousemove', this.handleMouseMove)\n    document.removeEventListener('mouseup', this.handleMouseUp)\n\n    this.emitter.trigger('pointerup', this.createEventFromMouse(ev))\n\n    this.cleanup() // call last so that pointerup has access to props\n  }\n\n  shouldIgnoreMouse() {\n    return ignoreMouseDepth || this.isTouchDragging\n  }\n\n  // Touch\n  // ----------------------------------------------------------------------------------------------------\n\n  handleTouchStart = (ev: TouchEvent) => {\n    if (this.tryStart(ev)) {\n      this.isTouchDragging = true\n\n      let pev = this.createEventFromTouch(ev, true)\n      this.emitter.trigger('pointerdown', pev)\n      this.initScrollWatch(pev)\n\n      // unlike mouse, need to attach to target, not document\n      // https://stackoverflow.com/a/45760014\n      let targetEl = ev.target as HTMLElement\n\n      if (!this.shouldIgnoreMove) {\n        targetEl.addEventListener('touchmove', this.handleTouchMove)\n      }\n\n      targetEl.addEventListener('touchend', this.handleTouchEnd)\n      targetEl.addEventListener('touchcancel', this.handleTouchEnd) // treat it as a touch end\n\n      // attach a handler to get called when ANY scroll action happens on the page.\n      // this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n      // http://stackoverflow.com/a/32954565/96342\n      window.addEventListener(\n        'scroll',\n        this.handleTouchScroll,\n        true, // useCapture\n      )\n    }\n  }\n\n  handleTouchMove = (ev: TouchEvent) => {\n    let pev = this.createEventFromTouch(ev)\n    this.recordCoords(pev)\n    this.emitter.trigger('pointermove', pev)\n  }\n\n  handleTouchEnd = (ev: TouchEvent) => {\n    if (this.isDragging) { // done to guard against touchend followed by touchcancel\n      let targetEl = ev.target as HTMLElement\n\n      targetEl.removeEventListener('touchmove', this.handleTouchMove)\n      targetEl.removeEventListener('touchend', this.handleTouchEnd)\n      targetEl.removeEventListener('touchcancel', this.handleTouchEnd)\n      window.removeEventListener('scroll', this.handleTouchScroll, true) // useCaptured=true\n\n      this.emitter.trigger('pointerup', this.createEventFromTouch(ev))\n\n      this.cleanup() // call last so that pointerup has access to props\n      this.isTouchDragging = false\n      startIgnoringMouse()\n    }\n  }\n\n  handleTouchScroll = () => {\n    this.wasTouchScroll = true\n  }\n\n  // can be called by user of this class, to cancel touch-based scrolling for the current drag\n  cancelTouchScroll() {\n    if (this.isDragging) {\n      isWindowTouchMoveCancelled = true\n    }\n  }\n\n  // Scrolling that simulates pointermoves\n  // ----------------------------------------------------------------------------------------------------\n\n  initScrollWatch(ev: PointerDragEvent) {\n    if (this.shouldWatchScroll) {\n      this.recordCoords(ev)\n      window.addEventListener('scroll', this.handleScroll, true) // useCapture=true\n    }\n  }\n\n  recordCoords(ev: PointerDragEvent) {\n    if (this.shouldWatchScroll) {\n      this.prevPageX = (ev as any).pageX\n      this.prevPageY = (ev as any).pageY\n      this.prevScrollX = window.pageXOffset\n      this.prevScrollY = window.pageYOffset\n    }\n  }\n\n  handleScroll = (ev: UIEvent) => {\n    if (!this.shouldIgnoreMove) {\n      let pageX = (window.pageXOffset - this.prevScrollX) + this.prevPageX\n      let pageY = (window.pageYOffset - this.prevScrollY) + this.prevPageY\n\n      this.emitter.trigger('pointermove', {\n        origEvent: ev,\n        isTouch: this.isTouchDragging,\n        subjectEl: this.subjectEl,\n        pageX,\n        pageY,\n        deltaX: pageX - this.origPageX,\n        deltaY: pageY - this.origPageY,\n      } as PointerDragEvent)\n    }\n  }\n\n  destroyScrollWatch() {\n    if (this.shouldWatchScroll) {\n      window.removeEventListener('scroll', this.handleScroll, true) // useCaptured=true\n    }\n  }\n\n  // Event Normalization\n  // ----------------------------------------------------------------------------------------------------\n\n  createEventFromMouse(ev: MouseEvent, isFirst?: boolean): PointerDragEvent {\n    let deltaX = 0\n    let deltaY = 0\n\n    // TODO: repeat code\n    if (isFirst) {\n      this.origPageX = ev.pageX\n      this.origPageY = ev.pageY\n    } else {\n      deltaX = ev.pageX - this.origPageX\n      deltaY = ev.pageY - this.origPageY\n    }\n\n    return {\n      origEvent: ev,\n      isTouch: false,\n      subjectEl: this.subjectEl,\n      pageX: ev.pageX,\n      pageY: ev.pageY,\n      deltaX,\n      deltaY,\n    }\n  }\n\n  createEventFromTouch(ev: TouchEvent, isFirst?: boolean): PointerDragEvent {\n    let touches = ev.touches\n    let pageX\n    let pageY\n    let deltaX = 0\n    let deltaY = 0\n\n    // if touch coords available, prefer,\n    // because FF would give bad ev.pageX ev.pageY\n    if (touches && touches.length) {\n      pageX = touches[0].pageX\n      pageY = touches[0].pageY\n    } else {\n      pageX = (ev as any).pageX\n      pageY = (ev as any).pageY\n    }\n\n    // TODO: repeat code\n    if (isFirst) {\n      this.origPageX = pageX\n      this.origPageY = pageY\n    } else {\n      deltaX = pageX - this.origPageX\n      deltaY = pageY - this.origPageY\n    }\n\n    return {\n      origEvent: ev,\n      isTouch: true,\n      subjectEl: this.subjectEl,\n      pageX,\n      pageY,\n      deltaX,\n      deltaY,\n    }\n  }\n}\n\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\nfunction isPrimaryMouseButton(ev: MouseEvent) {\n  return ev.button === 0 && !ev.ctrlKey\n}\n\n// Ignoring fake mouse events generated by touch\n// ----------------------------------------------------------------------------------------------------\n\nfunction startIgnoringMouse() { // can be made non-class function\n  ignoreMouseDepth += 1\n\n  setTimeout(() => {\n    ignoreMouseDepth -= 1\n  }, config.touchMouseIgnoreWait)\n}\n\n// We want to attach touchmove as early as possible for Safari\n// ----------------------------------------------------------------------------------------------------\n\nfunction listenerCreated() {\n  listenerCnt += 1\n\n  if (listenerCnt === 1) {\n    window.addEventListener('touchmove', onWindowTouchMove, { passive: false })\n  }\n}\n\nfunction listenerDestroyed() {\n  listenerCnt -= 1\n\n  if (!listenerCnt) {\n    window.removeEventListener('touchmove', onWindowTouchMove, { passive: false } as AddEventListenerOptions)\n  }\n}\n\nfunction onWindowTouchMove(ev: UIEvent) {\n  if (isWindowTouchMoveCancelled) {\n    ev.preventDefault()\n  }\n}\n","import { removeElement, applyStyle, whenTransitionDone, Rect } from '@fullcalendar/common'\n\n/*\nAn effect in which an element follows the movement of a pointer across the screen.\nThe moving element is a clone of some other element.\nMust call start + handleMove + stop.\n*/\nexport class ElementMirror {\n  isVisible: boolean = false // must be explicitly enabled\n  origScreenX?: number\n  origScreenY?: number\n  deltaX?: number\n  deltaY?: number\n  sourceEl: HTMLElement | null = null\n  mirrorEl: HTMLElement | null = null\n  sourceElRect: Rect | null = null // screen coords relative to viewport\n\n  // options that can be set directly by caller\n  parentNode: HTMLElement = document.body // HIGHLY SUGGESTED to set this to sidestep ShadowDOM issues\n  zIndex: number = 9999\n  revertDuration: number = 0\n\n  start(sourceEl: HTMLElement, pageX: number, pageY: number) {\n    this.sourceEl = sourceEl\n    this.sourceElRect = this.sourceEl.getBoundingClientRect()\n    this.origScreenX = pageX - window.pageXOffset\n    this.origScreenY = pageY - window.pageYOffset\n    this.deltaX = 0\n    this.deltaY = 0\n    this.updateElPosition()\n  }\n\n  handleMove(pageX: number, pageY: number) {\n    this.deltaX = (pageX - window.pageXOffset) - this.origScreenX!\n    this.deltaY = (pageY - window.pageYOffset) - this.origScreenY!\n    this.updateElPosition()\n  }\n\n  // can be called before start\n  setIsVisible(bool: boolean) {\n    if (bool) {\n      if (!this.isVisible) {\n        if (this.mirrorEl) {\n          this.mirrorEl.style.display = ''\n        }\n\n        this.isVisible = bool // needs to happen before updateElPosition\n        this.updateElPosition() // because was not updating the position while invisible\n      }\n    } else if (this.isVisible) {\n      if (this.mirrorEl) {\n        this.mirrorEl.style.display = 'none'\n      }\n\n      this.isVisible = bool\n    }\n  }\n\n  // always async\n  stop(needsRevertAnimation: boolean, callback: () => void) {\n    let done = () => {\n      this.cleanup()\n      callback()\n    }\n\n    if (\n      needsRevertAnimation &&\n      this.mirrorEl &&\n      this.isVisible &&\n      this.revertDuration && // if 0, transition won't work\n      (this.deltaX || this.deltaY) // if same coords, transition won't work\n    ) {\n      this.doRevertAnimation(done, this.revertDuration)\n    } else {\n      setTimeout(done, 0)\n    }\n  }\n\n  doRevertAnimation(callback: () => void, revertDuration: number) {\n    let mirrorEl = this.mirrorEl!\n    let finalSourceElRect = this.sourceEl!.getBoundingClientRect() // because autoscrolling might have happened\n\n    mirrorEl.style.transition =\n      'top ' + revertDuration + 'ms,' +\n      'left ' + revertDuration + 'ms'\n\n    applyStyle(mirrorEl, {\n      left: finalSourceElRect.left,\n      top: finalSourceElRect.top,\n    })\n\n    whenTransitionDone(mirrorEl, () => {\n      mirrorEl.style.transition = ''\n      callback()\n    })\n  }\n\n  cleanup() {\n    if (this.mirrorEl) {\n      removeElement(this.mirrorEl)\n      this.mirrorEl = null\n    }\n\n    this.sourceEl = null\n  }\n\n  updateElPosition() {\n    if (this.sourceEl && this.isVisible) {\n      applyStyle(this.getMirrorEl(), {\n        left: this.sourceElRect!.left + this.deltaX!,\n        top: this.sourceElRect!.top + this.deltaY!,\n      })\n    }\n  }\n\n  getMirrorEl(): HTMLElement {\n    let sourceElRect = this.sourceElRect!\n    let mirrorEl = this.mirrorEl\n\n    if (!mirrorEl) {\n      mirrorEl = this.mirrorEl = this.sourceEl!.cloneNode(true) as HTMLElement // cloneChildren=true\n\n      // we don't want long taps or any mouse interaction causing selection/menus.\n      // would use preventSelection(), but that prevents selectstart, causing problems.\n      mirrorEl.classList.add('fc-unselectable')\n\n      mirrorEl.classList.add('fc-event-dragging')\n\n      applyStyle(mirrorEl, {\n        position: 'fixed',\n        zIndex: this.zIndex,\n        visibility: '', // in case original element was hidden by the drag effect\n        boxSizing: 'border-box', // for easy width/height\n        width: sourceElRect.right - sourceElRect.left, // explicit height in case there was a 'right' value\n        height: sourceElRect.bottom - sourceElRect.top, // explicit width in case there was a 'bottom' value\n        right: 'auto', // erase and set width instead\n        bottom: 'auto', // erase and set height instead\n        margin: 0,\n      })\n\n      this.parentNode.appendChild(mirrorEl)\n    }\n\n    return mirrorEl\n  }\n}\n","import { Rect, ScrollController } from '@fullcalendar/common'\n\n/*\nIs a cache for a given element's scroll information (all the info that ScrollController stores)\nin addition the \"client rectangle\" of the element.. the area within the scrollbars.\n\nThe cache can be in one of two modes:\n- doesListening:false - ignores when the container is scrolled by someone else\n- doesListening:true - watch for scrolling and update the cache\n*/\nexport abstract class ScrollGeomCache extends ScrollController {\n  clientRect: Rect\n  origScrollTop: number\n  origScrollLeft: number\n\n  protected scrollController: ScrollController\n  protected doesListening: boolean\n  protected scrollTop: number\n  protected scrollLeft: number\n  protected scrollWidth: number\n  protected scrollHeight: number\n  protected clientWidth: number\n  protected clientHeight: number\n\n  constructor(scrollController: ScrollController, doesListening: boolean) {\n    super()\n    this.scrollController = scrollController\n    this.doesListening = doesListening\n    this.scrollTop = this.origScrollTop = scrollController.getScrollTop()\n    this.scrollLeft = this.origScrollLeft = scrollController.getScrollLeft()\n    this.scrollWidth = scrollController.getScrollWidth()\n    this.scrollHeight = scrollController.getScrollHeight()\n    this.clientWidth = scrollController.getClientWidth()\n    this.clientHeight = scrollController.getClientHeight()\n    this.clientRect = this.computeClientRect() // do last in case it needs cached values\n\n    if (this.doesListening) {\n      this.getEventTarget().addEventListener('scroll', this.handleScroll)\n    }\n  }\n\n  abstract getEventTarget(): EventTarget\n  abstract computeClientRect(): Rect\n\n  destroy() {\n    if (this.doesListening) {\n      this.getEventTarget().removeEventListener('scroll', this.handleScroll)\n    }\n  }\n\n  handleScroll = () => {\n    this.scrollTop = this.scrollController.getScrollTop()\n    this.scrollLeft = this.scrollController.getScrollLeft()\n    this.handleScrollChange()\n  }\n\n  getScrollTop() {\n    return this.scrollTop\n  }\n\n  getScrollLeft() {\n    return this.scrollLeft\n  }\n\n  setScrollTop(top: number) {\n    this.scrollController.setScrollTop(top)\n\n    if (!this.doesListening) {\n      // we are not relying on the element to normalize out-of-bounds scroll values\n      // so we need to sanitize ourselves\n      this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0)\n\n      this.handleScrollChange()\n    }\n  }\n\n  setScrollLeft(top: number) {\n    this.scrollController.setScrollLeft(top)\n\n    if (!this.doesListening) {\n      // we are not relying on the element to normalize out-of-bounds scroll values\n      // so we need to sanitize ourselves\n      this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0)\n\n      this.handleScrollChange()\n    }\n  }\n\n  getClientWidth() {\n    return this.clientWidth\n  }\n\n  getClientHeight() {\n    return this.clientHeight\n  }\n\n  getScrollWidth() {\n    return this.scrollWidth\n  }\n\n  getScrollHeight() {\n    return this.scrollHeight\n  }\n\n  handleScrollChange() {\n  }\n}\n","import { computeInnerRect, ElementScrollController } from '@fullcalendar/common'\nimport { ScrollGeomCache } from './ScrollGeomCache'\n\nexport class ElementScrollGeomCache extends ScrollGeomCache {\n  constructor(el: HTMLElement, doesListening: boolean) {\n    super(new ElementScrollController(el), doesListening)\n  }\n\n  getEventTarget(): EventTarget {\n    return (this.scrollController as ElementScrollController).el\n  }\n\n  computeClientRect() {\n    return computeInnerRect((this.scrollController as ElementScrollController).el)\n  }\n}\n","import { Rect, WindowScrollController } from '@fullcalendar/common'\nimport { ScrollGeomCache } from './ScrollGeomCache'\n\nexport class WindowScrollGeomCache extends ScrollGeomCache {\n  constructor(doesListening: boolean) {\n    super(new WindowScrollController(), doesListening)\n  }\n\n  getEventTarget(): EventTarget {\n    return window\n  }\n\n  computeClientRect(): Rect {\n    return {\n      left: this.scrollLeft,\n      right: this.scrollLeft + this.clientWidth,\n      top: this.scrollTop,\n      bottom: this.scrollTop + this.clientHeight,\n    }\n  }\n\n  // the window is the only scroll object that changes it's rectangle relative\n  // to the document's topleft as it scrolls\n  handleScrollChange() {\n    this.clientRect = this.computeClientRect()\n  }\n}\n","import { getElRoot } from '@fullcalendar/common'\nimport { ScrollGeomCache } from '../ScrollGeomCache'\nimport { ElementScrollGeomCache } from '../ElementScrollGeomCache'\nimport { WindowScrollGeomCache } from '../WindowScrollGeomCache'\n\ninterface Edge {\n  scrollCache: ScrollGeomCache\n  name: 'top' | 'left' | 'right' | 'bottom'\n  distance: number // how many pixels the current pointer is from the edge\n}\n\n// If available we are using native \"performance\" API instead of \"Date\"\n// Read more about it on MDN:\n// https://developer.mozilla.org/en-US/docs/Web/API/Performance\nconst getTime = typeof performance === 'function' ? (performance as any).now : Date.now\n\n/*\nFor a pointer interaction, automatically scrolls certain scroll containers when the pointer\napproaches the edge.\n\nThe caller must call start + handleMove + stop.\n*/\nexport class AutoScroller {\n  // options that can be set by caller\n  isEnabled: boolean = true\n  scrollQuery: (Window | string)[] = [window, '.fc-scroller']\n  edgeThreshold: number = 50 // pixels\n  maxVelocity: number = 300 // pixels per second\n\n  // internal state\n  pointerScreenX: number | null = null\n  pointerScreenY: number | null = null\n  isAnimating: boolean = false\n  scrollCaches: ScrollGeomCache[] | null = null\n  msSinceRequest?: number\n\n  // protect against the initial pointerdown being too close to an edge and starting the scroll\n  everMovedUp: boolean = false\n  everMovedDown: boolean = false\n  everMovedLeft: boolean = false\n  everMovedRight: boolean = false\n\n  start(pageX: number, pageY: number, scrollStartEl: HTMLElement) {\n    if (this.isEnabled) {\n      this.scrollCaches = this.buildCaches(scrollStartEl)\n      this.pointerScreenX = null\n      this.pointerScreenY = null\n      this.everMovedUp = false\n      this.everMovedDown = false\n      this.everMovedLeft = false\n      this.everMovedRight = false\n      this.handleMove(pageX, pageY)\n    }\n  }\n\n  handleMove(pageX: number, pageY: number) {\n    if (this.isEnabled) {\n      let pointerScreenX = pageX - window.pageXOffset\n      let pointerScreenY = pageY - window.pageYOffset\n\n      let yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY\n      let xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX\n\n      if (yDelta < 0) {\n        this.everMovedUp = true\n      } else if (yDelta > 0) {\n        this.everMovedDown = true\n      }\n\n      if (xDelta < 0) {\n        this.everMovedLeft = true\n      } else if (xDelta > 0) {\n        this.everMovedRight = true\n      }\n\n      this.pointerScreenX = pointerScreenX\n      this.pointerScreenY = pointerScreenY\n\n      if (!this.isAnimating) {\n        this.isAnimating = true\n        this.requestAnimation(getTime())\n      }\n    }\n  }\n\n  stop() {\n    if (this.isEnabled) {\n      this.isAnimating = false // will stop animation\n\n      for (let scrollCache of this.scrollCaches!) {\n        scrollCache.destroy()\n      }\n\n      this.scrollCaches = null\n    }\n  }\n\n  requestAnimation(now: number) {\n    this.msSinceRequest = now\n    requestAnimationFrame(this.animate)\n  }\n\n  private animate = () => {\n    if (this.isAnimating) { // wasn't cancelled between animation calls\n      let edge = this.computeBestEdge(\n        this.pointerScreenX! + window.pageXOffset,\n        this.pointerScreenY! + window.pageYOffset,\n      )\n\n      if (edge) {\n        let now = getTime()\n        this.handleSide(edge, (now - this.msSinceRequest!) / 1000)\n        this.requestAnimation(now)\n      } else {\n        this.isAnimating = false // will stop animation\n      }\n    }\n  }\n\n  private handleSide(edge: Edge, seconds: number) {\n    let { scrollCache } = edge\n    let { edgeThreshold } = this\n    let invDistance = edgeThreshold - edge.distance\n    let velocity = // the closer to the edge, the faster we scroll\n      ((invDistance * invDistance) / (edgeThreshold * edgeThreshold)) * // quadratic\n      this.maxVelocity * seconds\n    let sign = 1\n\n    switch (edge.name) {\n      case 'left':\n        sign = -1\n        // falls through\n      case 'right':\n        scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign)\n        break\n\n      case 'top':\n        sign = -1\n        // falls through\n      case 'bottom':\n        scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign)\n        break\n    }\n  }\n\n  // left/top are relative to document topleft\n  private computeBestEdge(left: number, top: number): Edge | null {\n    let { edgeThreshold } = this\n    let bestSide: Edge | null = null\n    let scrollCaches = this.scrollCaches || []\n\n    for (let scrollCache of scrollCaches) {\n      let rect = scrollCache.clientRect\n      let leftDist = left - rect.left\n      let rightDist = rect.right - left\n      let topDist = top - rect.top\n      let bottomDist = rect.bottom - top\n\n      // completely within the rect?\n      if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {\n        if (\n          topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() &&\n          (!bestSide || bestSide.distance > topDist)\n        ) {\n          bestSide = { scrollCache, name: 'top', distance: topDist }\n        }\n\n        if (\n          bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() &&\n          (!bestSide || bestSide.distance > bottomDist)\n        ) {\n          bestSide = { scrollCache, name: 'bottom', distance: bottomDist }\n        }\n\n        if (\n          leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() &&\n          (!bestSide || bestSide.distance > leftDist)\n        ) {\n          bestSide = { scrollCache, name: 'left', distance: leftDist }\n        }\n\n        if (\n          rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() &&\n          (!bestSide || bestSide.distance > rightDist)\n        ) {\n          bestSide = { scrollCache, name: 'right', distance: rightDist }\n        }\n      }\n    }\n\n    return bestSide\n  }\n\n  private buildCaches(scrollStartEl: HTMLElement) {\n    return this.queryScrollEls(scrollStartEl).map((el) => {\n      if (el === window) {\n        return new WindowScrollGeomCache(false) // false = don't listen to user-generated scrolls\n      }\n      return new ElementScrollGeomCache(el, false) // false = don't listen to user-generated scrolls\n    })\n  }\n\n  private queryScrollEls(scrollStartEl: HTMLElement) {\n    let els = []\n\n    for (let query of this.scrollQuery) {\n      if (typeof query === 'object') {\n        els.push(query)\n      } else {\n        els.push(...Array.prototype.slice.call(\n          getElRoot(scrollStartEl).querySelectorAll(query),\n        ))\n      }\n    }\n\n    return els\n  }\n}\n","import {\n  PointerDragEvent,\n  preventSelection,\n  allowSelection,\n  preventContextMenu,\n  allowContextMenu,\n  ElementDragging,\n} from '@fullcalendar/common'\nimport { PointerDragging } from './PointerDragging'\nimport { ElementMirror } from './ElementMirror'\nimport { AutoScroller } from './AutoScroller'\n\n/*\nMonitors dragging on an element. Has a number of high-level features:\n- minimum distance required before dragging\n- minimum wait time (\"delay\") before dragging\n- a mirror element that follows the pointer\n*/\nexport class FeaturefulElementDragging extends ElementDragging {\n  pointer: PointerDragging\n  mirror: ElementMirror\n  autoScroller: AutoScroller\n\n  // options that can be directly set by caller\n  // the caller can also set the PointerDragging's options as well\n  delay: number | null = null\n  minDistance: number = 0\n  touchScrollAllowed: boolean = true // prevents drag from starting and blocks scrolling during drag\n\n  mirrorNeedsRevert: boolean = false\n  isInteracting: boolean = false // is the user validly moving the pointer? lasts until pointerup\n  isDragging: boolean = false // is it INTENTFULLY dragging? lasts until after revert animation\n  isDelayEnded: boolean = false\n  isDistanceSurpassed: boolean = false\n  delayTimeoutId: number | null = null\n\n  constructor(private containerEl: HTMLElement, selector?: string) {\n    super(containerEl)\n\n    let pointer = this.pointer = new PointerDragging(containerEl)\n    pointer.emitter.on('pointerdown', this.onPointerDown)\n    pointer.emitter.on('pointermove', this.onPointerMove)\n    pointer.emitter.on('pointerup', this.onPointerUp)\n\n    if (selector) {\n      pointer.selector = selector\n    }\n\n    this.mirror = new ElementMirror()\n    this.autoScroller = new AutoScroller()\n  }\n\n  destroy() {\n    this.pointer.destroy()\n\n    // HACK: simulate a pointer-up to end the current drag\n    // TODO: fire 'dragend' directly and stop interaction. discourage use of pointerup event (b/c might not fire)\n    this.onPointerUp({} as any)\n  }\n\n  onPointerDown = (ev: PointerDragEvent) => {\n    if (!this.isDragging) { // so new drag doesn't happen while revert animation is going\n      this.isInteracting = true\n      this.isDelayEnded = false\n      this.isDistanceSurpassed = false\n\n      preventSelection(document.body)\n      preventContextMenu(document.body)\n\n      // prevent links from being visited if there's an eventual drag.\n      // also prevents selection in older browsers (maybe?).\n      // not necessary for touch, besides, browser would complain about passiveness.\n      if (!ev.isTouch) {\n        ev.origEvent.preventDefault()\n      }\n\n      this.emitter.trigger('pointerdown', ev)\n\n      if (\n        this.isInteracting && // not destroyed via pointerdown handler\n        !this.pointer.shouldIgnoreMove\n      ) {\n        // actions related to initiating dragstart+dragmove+dragend...\n\n        this.mirror.setIsVisible(false) // reset. caller must set-visible\n        this.mirror.start(ev.subjectEl as HTMLElement, ev.pageX, ev.pageY) // must happen on first pointer down\n\n        this.startDelay(ev)\n\n        if (!this.minDistance) {\n          this.handleDistanceSurpassed(ev)\n        }\n      }\n    }\n  }\n\n  onPointerMove = (ev: PointerDragEvent) => {\n    if (this.isInteracting) {\n      this.emitter.trigger('pointermove', ev)\n\n      if (!this.isDistanceSurpassed) {\n        let minDistance = this.minDistance\n        let distanceSq // current distance from the origin, squared\n        let { deltaX, deltaY } = ev\n\n        distanceSq = deltaX * deltaX + deltaY * deltaY\n        if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem\n          this.handleDistanceSurpassed(ev)\n        }\n      }\n\n      if (this.isDragging) {\n        // a real pointer move? (not one simulated by scrolling)\n        if (ev.origEvent.type !== 'scroll') {\n          this.mirror.handleMove(ev.pageX, ev.pageY)\n          this.autoScroller.handleMove(ev.pageX, ev.pageY)\n        }\n\n        this.emitter.trigger('dragmove', ev)\n      }\n    }\n  }\n\n  onPointerUp = (ev: PointerDragEvent) => {\n    if (this.isInteracting) {\n      this.isInteracting = false\n\n      allowSelection(document.body)\n      allowContextMenu(document.body)\n\n      this.emitter.trigger('pointerup', ev) // can potentially set mirrorNeedsRevert\n\n      if (this.isDragging) {\n        this.autoScroller.stop()\n        this.tryStopDrag(ev) // which will stop the mirror\n      }\n\n      if (this.delayTimeoutId) {\n        clearTimeout(this.delayTimeoutId)\n        this.delayTimeoutId = null\n      }\n    }\n  }\n\n  startDelay(ev: PointerDragEvent) {\n    if (typeof this.delay === 'number') {\n      this.delayTimeoutId = setTimeout(() => {\n        this.delayTimeoutId = null\n        this.handleDelayEnd(ev)\n      }, this.delay) as any // not assignable to number!\n    } else {\n      this.handleDelayEnd(ev)\n    }\n  }\n\n  handleDelayEnd(ev: PointerDragEvent) {\n    this.isDelayEnded = true\n    this.tryStartDrag(ev)\n  }\n\n  handleDistanceSurpassed(ev: PointerDragEvent) {\n    this.isDistanceSurpassed = true\n    this.tryStartDrag(ev)\n  }\n\n  tryStartDrag(ev: PointerDragEvent) {\n    if (this.isDelayEnded && this.isDistanceSurpassed) {\n      if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {\n        this.isDragging = true\n        this.mirrorNeedsRevert = false\n\n        this.autoScroller.start(ev.pageX, ev.pageY, this.containerEl)\n        this.emitter.trigger('dragstart', ev)\n\n        if (this.touchScrollAllowed === false) {\n          this.pointer.cancelTouchScroll()\n        }\n      }\n    }\n  }\n\n  tryStopDrag(ev: PointerDragEvent) {\n    // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events\n    // that come from the document to fire beforehand. much more convenient this way.\n    this.mirror.stop(\n      this.mirrorNeedsRevert,\n      this.stopDrag.bind(this, ev), // bound with args\n    )\n  }\n\n  stopDrag(ev: PointerDragEvent) {\n    this.isDragging = false\n    this.emitter.trigger('dragend', ev)\n  }\n\n  // fill in the implementations...\n\n  setIgnoreMove(bool: boolean) {\n    this.pointer.shouldIgnoreMove = bool\n  }\n\n  setMirrorIsVisible(bool: boolean) {\n    this.mirror.setIsVisible(bool)\n  }\n\n  setMirrorNeedsRevert(bool: boolean) {\n    this.mirrorNeedsRevert = bool\n  }\n\n  setAutoScrollEnabled(bool: boolean) {\n    this.autoScroller.isEnabled = bool\n  }\n}\n","import {\n  getClippingParents, computeRect,\n  pointInsideRect, Rect,\n} from '@fullcalendar/common'\nimport { ElementScrollGeomCache } from './ElementScrollGeomCache'\n\n/*\nWhen this class is instantiated, it records the offset of an element (relative to the document topleft),\nand continues to monitor scrolling, updating the cached coordinates if it needs to.\nDoes not access the DOM after instantiation, so highly performant.\n\nAlso keeps track of all scrolling/overflow:hidden containers that are parents of the given element\nand an determine if a given point is inside the combined clipping rectangle.\n*/\nexport class OffsetTracker { // ElementOffsetTracker\n  scrollCaches: ElementScrollGeomCache[]\n  origRect: Rect\n\n  constructor(el: HTMLElement) {\n    this.origRect = computeRect(el)\n\n    // will work fine for divs that have overflow:hidden\n    this.scrollCaches = getClippingParents(el).map(\n      (scrollEl) => new ElementScrollGeomCache(scrollEl, true), // listen=true\n    )\n  }\n\n  destroy() {\n    for (let scrollCache of this.scrollCaches) {\n      scrollCache.destroy()\n    }\n  }\n\n  computeLeft() {\n    let left = this.origRect.left\n\n    for (let scrollCache of this.scrollCaches) {\n      left += scrollCache.origScrollLeft - scrollCache.getScrollLeft()\n    }\n\n    return left\n  }\n\n  computeTop() {\n    let top = this.origRect.top\n\n    for (let scrollCache of this.scrollCaches) {\n      top += scrollCache.origScrollTop - scrollCache.getScrollTop()\n    }\n\n    return top\n  }\n\n  isWithinClipping(pageX: number, pageY: number): boolean {\n    let point = { left: pageX, top: pageY }\n\n    for (let scrollCache of this.scrollCaches) {\n      if (\n        !isIgnoredClipping(scrollCache.getEventTarget()) &&\n        !pointInsideRect(point, scrollCache.clientRect)\n      ) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\n// certain clipping containers should never constrain interactions, like <html> and <body>\n// https://github.com/fullcalendar/fullcalendar/issues/3615\nfunction isIgnoredClipping(node: EventTarget) {\n  let tagName = (node as HTMLElement).tagName\n\n  return tagName === 'HTML' || tagName === 'BODY'\n}\n","import {\n  Emitter, PointerDragEvent,\n  isDateSpansEqual,\n  computeRect,\n  constrainPoint, intersectRects, getRectCenter, diffPoints, Point,\n  rangeContainsRange,\n  Hit,\n  InteractionSettingsStore,\n  mapHash,\n  ElementDragging,\n} from '@fullcalendar/common'\nimport { OffsetTracker } from '../OffsetTracker'\n\n/*\nTracks movement over multiple droppable areas (aka \"hits\")\nthat exist in one or more DateComponents.\nRelies on an existing draggable.\n\nemits:\n- pointerdown\n- dragstart\n- hitchange - fires initially, even if not over a hit\n- pointerup\n- (hitchange - again, to null, if ended over a hit)\n- dragend\n*/\nexport class HitDragging {\n  droppableStore: InteractionSettingsStore\n  dragging: ElementDragging\n  emitter: Emitter<any>\n\n  // options that can be set by caller\n  useSubjectCenter: boolean = false\n  requireInitial: boolean = true // if doesn't start out on a hit, won't emit any events\n\n  // internal state\n  offsetTrackers: { [componentUid: string]: OffsetTracker }\n  initialHit: Hit | null = null\n  movingHit: Hit | null = null\n  finalHit: Hit | null = null // won't ever be populated if shouldIgnoreMove\n  coordAdjust?: Point\n\n  constructor(dragging: ElementDragging, droppableStore: InteractionSettingsStore) {\n    this.droppableStore = droppableStore\n\n    dragging.emitter.on('pointerdown', this.handlePointerDown)\n    dragging.emitter.on('dragstart', this.handleDragStart)\n    dragging.emitter.on('dragmove', this.handleDragMove)\n    dragging.emitter.on('pointerup', this.handlePointerUp)\n    dragging.emitter.on('dragend', this.handleDragEnd)\n\n    this.dragging = dragging\n    this.emitter = new Emitter()\n  }\n\n  handlePointerDown = (ev: PointerDragEvent) => {\n    let { dragging } = this\n\n    this.initialHit = null\n    this.movingHit = null\n    this.finalHit = null\n\n    this.prepareHits()\n    this.processFirstCoord(ev)\n\n    if (this.initialHit || !this.requireInitial) {\n      dragging.setIgnoreMove(false)\n\n      // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(\n      this.emitter.trigger('pointerdown', ev)\n    } else {\n      dragging.setIgnoreMove(true)\n    }\n  }\n\n  // sets initialHit\n  // sets coordAdjust\n  processFirstCoord(ev: PointerDragEvent) {\n    let origPoint = { left: ev.pageX, top: ev.pageY }\n    let adjustedPoint = origPoint\n    let subjectEl = ev.subjectEl\n    let subjectRect\n\n    if (subjectEl instanceof HTMLElement) { // i.e. not a Document/ShadowRoot\n      subjectRect = computeRect(subjectEl)\n      adjustedPoint = constrainPoint(adjustedPoint, subjectRect)\n    }\n\n    let initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top)\n    if (initialHit) {\n      if (this.useSubjectCenter && subjectRect) {\n        let slicedSubjectRect = intersectRects(subjectRect, initialHit.rect)\n        if (slicedSubjectRect) {\n          adjustedPoint = getRectCenter(slicedSubjectRect)\n        }\n      }\n\n      this.coordAdjust = diffPoints(adjustedPoint, origPoint)\n    } else {\n      this.coordAdjust = { left: 0, top: 0 }\n    }\n  }\n\n  handleDragStart = (ev: PointerDragEvent) => {\n    this.emitter.trigger('dragstart', ev)\n    this.handleMove(ev, true) // force = fire even if initially null\n  }\n\n  handleDragMove = (ev: PointerDragEvent) => {\n    this.emitter.trigger('dragmove', ev)\n    this.handleMove(ev)\n  }\n\n  handlePointerUp = (ev: PointerDragEvent) => {\n    this.releaseHits()\n    this.emitter.trigger('pointerup', ev)\n  }\n\n  handleDragEnd = (ev: PointerDragEvent) => {\n    if (this.movingHit) {\n      this.emitter.trigger('hitupdate', null, true, ev)\n    }\n\n    this.finalHit = this.movingHit\n    this.movingHit = null\n    this.emitter.trigger('dragend', ev)\n  }\n\n  handleMove(ev: PointerDragEvent, forceHandle?: boolean) {\n    let hit = this.queryHitForOffset(\n      ev.pageX + this.coordAdjust!.left,\n      ev.pageY + this.coordAdjust!.top,\n    )\n\n    if (forceHandle || !isHitsEqual(this.movingHit, hit)) {\n      this.movingHit = hit\n      this.emitter.trigger('hitupdate', hit, false, ev)\n    }\n  }\n\n  prepareHits() {\n    this.offsetTrackers = mapHash(this.droppableStore, (interactionSettings) => {\n      interactionSettings.component.prepareHits()\n      return new OffsetTracker(interactionSettings.el)\n    })\n  }\n\n  releaseHits() {\n    let { offsetTrackers } = this\n\n    for (let id in offsetTrackers) {\n      offsetTrackers[id].destroy()\n    }\n\n    this.offsetTrackers = {}\n  }\n\n  queryHitForOffset(offsetLeft: number, offsetTop: number): Hit | null {\n    let { droppableStore, offsetTrackers } = this\n    let bestHit: Hit | null = null\n\n    for (let id in droppableStore) {\n      let component = droppableStore[id].component\n      let offsetTracker = offsetTrackers[id]\n\n      if (\n        offsetTracker && // wasn't destroyed mid-drag\n        offsetTracker.isWithinClipping(offsetLeft, offsetTop)\n      ) {\n        let originLeft = offsetTracker.computeLeft()\n        let originTop = offsetTracker.computeTop()\n        let positionLeft = offsetLeft - originLeft\n        let positionTop = offsetTop - originTop\n        let { origRect } = offsetTracker\n        let width = origRect.right - origRect.left\n        let height = origRect.bottom - origRect.top\n\n        if (\n          // must be within the element's bounds\n          positionLeft >= 0 && positionLeft < width &&\n          positionTop >= 0 && positionTop < height\n        ) {\n          let hit = component.queryHit(positionLeft, positionTop, width, height)\n          if (\n            hit && (\n              // make sure the hit is within activeRange, meaning it's not a dead cell\n              rangeContainsRange(hit.dateProfile.activeRange, hit.dateSpan.range)\n            ) &&\n            (!bestHit || hit.layer > bestHit.layer)\n          ) {\n            hit.componentId = id\n            hit.context = component.context\n\n            // TODO: better way to re-orient rectangle\n            hit.rect.left += originLeft\n            hit.rect.right += originLeft\n            hit.rect.top += originTop\n            hit.rect.bottom += originTop\n\n            bestHit = hit\n          }\n        }\n      }\n    }\n\n    return bestHit\n  }\n}\n\nexport function isHitsEqual(hit0: Hit | null, hit1: Hit | null): boolean {\n  if (!hit0 && !hit1) {\n    return true\n  }\n\n  if (Boolean(hit0) !== Boolean(hit1)) {\n    return false\n  }\n\n  return isDateSpansEqual(hit0!.dateSpan, hit1!.dateSpan)\n}\n","import { DateSpan, CalendarContext, DatePointApi, DateEnv, ViewApi, EventApi } from '@fullcalendar/common'\nimport { __assign } from 'tslib'\n\nexport interface DropArg extends DatePointApi {\n  draggedEl: HTMLElement\n  jsEvent: MouseEvent\n  view: ViewApi\n}\n\nexport type EventReceiveArg = EventReceiveLeaveArg\nexport type EventLeaveArg = EventReceiveLeaveArg\nexport interface EventReceiveLeaveArg { // will this become public?\n  draggedEl: HTMLElement\n  event: EventApi\n  relatedEvents: EventApi[]\n  revert: () => void\n  view: ViewApi\n}\n\nexport function buildDatePointApiWithContext(dateSpan: DateSpan, context: CalendarContext) {\n  let props = {} as DatePointApi\n\n  for (let transform of context.pluginHooks.datePointTransforms) {\n    __assign(props, transform(dateSpan, context))\n  }\n\n  __assign(props, buildDatePointApi(dateSpan, context.dateEnv))\n\n  return props\n}\n\nexport function buildDatePointApi(span: DateSpan, dateEnv: DateEnv): DatePointApi {\n  return {\n    date: dateEnv.toDate(span.range.start),\n    dateStr: dateEnv.formatIso(span.range.start, { omitTime: span.allDay }),\n    allDay: span.allDay,\n  }\n}\n","import {\n  PointerDragEvent, Interaction, InteractionSettings, interactionSettingsToStore,\n  DatePointApi,\n  ViewApi,\n} from '@fullcalendar/common'\nimport { FeaturefulElementDragging } from '../dnd/FeaturefulElementDragging'\nimport { HitDragging, isHitsEqual } from './HitDragging'\nimport { buildDatePointApiWithContext } from '../utils'\n\nexport interface DateClickArg extends DatePointApi {\n  dayEl: HTMLElement\n  jsEvent: MouseEvent\n  view: ViewApi\n}\n\n/*\nMonitors when the user clicks on a specific date/time of a component.\nA pointerdown+pointerup on the same \"hit\" constitutes a click.\n*/\nexport class DateClicking extends Interaction {\n  dragging: FeaturefulElementDragging\n  hitDragging: HitDragging\n\n  constructor(settings: InteractionSettings) {\n    super(settings)\n\n    // we DO want to watch pointer moves because otherwise finalHit won't get populated\n    this.dragging = new FeaturefulElementDragging(settings.el)\n    this.dragging.autoScroller.isEnabled = false\n\n    let hitDragging = this.hitDragging = new HitDragging(this.dragging, interactionSettingsToStore(settings))\n    hitDragging.emitter.on('pointerdown', this.handlePointerDown)\n    hitDragging.emitter.on('dragend', this.handleDragEnd)\n  }\n\n  destroy() {\n    this.dragging.destroy()\n  }\n\n  handlePointerDown = (pev: PointerDragEvent) => {\n    let { dragging } = this\n    let downEl = pev.origEvent.target as HTMLElement\n\n    // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired\n    dragging.setIgnoreMove(\n      !this.component.isValidDateDownEl(downEl),\n    )\n  }\n\n  // won't even fire if moving was ignored\n  handleDragEnd = (ev: PointerDragEvent) => {\n    let { component } = this\n    let { pointer } = this.dragging\n\n    if (!pointer.wasTouchScroll) {\n      let { initialHit, finalHit } = this.hitDragging\n\n      if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {\n        let { context } = component\n        let arg: DateClickArg = {\n          ...buildDatePointApiWithContext(initialHit.dateSpan, context),\n          dayEl: initialHit.dayEl,\n          jsEvent: ev.origEvent as MouseEvent,\n          view: context.viewApi || context.calendarApi.view,\n        }\n\n        context.emitter.trigger('dateClick', arg)\n      }\n    }\n  }\n}\n","import {\n  compareNumbers, enableCursor, disableCursor, DateComponent, Hit,\n  DateSpan, PointerDragEvent, dateSelectionJoinTransformer,\n  Interaction, InteractionSettings, interactionSettingsToStore,\n  triggerDateSelect, isDateSelectionValid,\n} from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { HitDragging } from './HitDragging'\nimport { FeaturefulElementDragging } from '../dnd/FeaturefulElementDragging'\n\n/*\nTracks when the user selects a portion of time of a component,\nconstituted by a drag over date cells, with a possible delay at the beginning of the drag.\n*/\nexport class DateSelecting extends Interaction {\n  dragging: FeaturefulElementDragging\n  hitDragging: HitDragging\n  dragSelection: DateSpan | null = null\n\n  constructor(settings: InteractionSettings) {\n    super(settings)\n    let { component } = settings\n    let { options } = component.context\n\n    let dragging = this.dragging = new FeaturefulElementDragging(settings.el)\n    dragging.touchScrollAllowed = false\n    dragging.minDistance = options.selectMinDistance || 0\n    dragging.autoScroller.isEnabled = options.dragScroll\n\n    let hitDragging = this.hitDragging = new HitDragging(this.dragging, interactionSettingsToStore(settings))\n    hitDragging.emitter.on('pointerdown', this.handlePointerDown)\n    hitDragging.emitter.on('dragstart', this.handleDragStart)\n    hitDragging.emitter.on('hitupdate', this.handleHitUpdate)\n    hitDragging.emitter.on('pointerup', this.handlePointerUp)\n  }\n\n  destroy() {\n    this.dragging.destroy()\n  }\n\n  handlePointerDown = (ev: PointerDragEvent) => {\n    let { component, dragging } = this\n    let { options } = component.context\n\n    let canSelect = options.selectable &&\n      component.isValidDateDownEl(ev.origEvent.target as HTMLElement)\n\n    // don't bother to watch expensive moves if component won't do selection\n    dragging.setIgnoreMove(!canSelect)\n\n    // if touch, require user to hold down\n    dragging.delay = ev.isTouch ? getComponentTouchDelay(component) : null\n  }\n\n  handleDragStart = (ev: PointerDragEvent) => {\n    this.component.context.calendarApi.unselect(ev) // unselect previous selections\n  }\n\n  handleHitUpdate = (hit: Hit | null, isFinal: boolean) => {\n    let { context } = this.component\n    let dragSelection: DateSpan | null = null\n    let isInvalid = false\n\n    if (hit) {\n      let initialHit = this.hitDragging.initialHit!\n      let disallowed = hit.componentId === initialHit.componentId\n        && this.isHitComboAllowed\n        && !this.isHitComboAllowed(initialHit, hit)\n\n      if (!disallowed) {\n        dragSelection = joinHitsIntoSelection(\n          initialHit,\n          hit,\n          context.pluginHooks.dateSelectionTransformers,\n        )\n      }\n\n      if (!dragSelection || !isDateSelectionValid(dragSelection, hit.dateProfile, context)) {\n        isInvalid = true\n        dragSelection = null\n      }\n    }\n\n    if (dragSelection) {\n      context.dispatch({ type: 'SELECT_DATES', selection: dragSelection })\n    } else if (!isFinal) { // only unselect if moved away while dragging\n      context.dispatch({ type: 'UNSELECT_DATES' })\n    }\n\n    if (!isInvalid) {\n      enableCursor()\n    } else {\n      disableCursor()\n    }\n\n    if (!isFinal) {\n      this.dragSelection = dragSelection // only clear if moved away from all hits while dragging\n    }\n  }\n\n  handlePointerUp = (pev: PointerDragEvent) => {\n    if (this.dragSelection) {\n      // selection is already rendered, so just need to report selection\n      triggerDateSelect(this.dragSelection, pev, this.component.context)\n\n      this.dragSelection = null\n    }\n  }\n}\n\nfunction getComponentTouchDelay(component: DateComponent<any>): number {\n  let { options } = component.context\n  let delay = options.selectLongPressDelay\n\n  if (delay == null) {\n    delay = options.longPressDelay\n  }\n\n  return delay\n}\n\nfunction joinHitsIntoSelection(hit0: Hit, hit1: Hit, dateSelectionTransformers: dateSelectionJoinTransformer[]): DateSpan {\n  let dateSpan0 = hit0.dateSpan\n  let dateSpan1 = hit1.dateSpan\n  let ms = [\n    dateSpan0.range.start,\n    dateSpan0.range.end,\n    dateSpan1.range.start,\n    dateSpan1.range.end,\n  ]\n\n  ms.sort(compareNumbers)\n\n  let props = {} as DateSpan\n\n  for (let transformer of dateSelectionTransformers) {\n    let res = transformer(hit0, hit1)\n\n    if (res === false) {\n      return null\n    }\n\n    if (res) {\n      __assign(props, res)\n    }\n  }\n\n  props.range = { start: ms[0], end: ms[3] }\n  props.allDay = dateSpan0.allDay\n\n  return props\n}\n","import {\n  DateComponent, Seg,\n  PointerDragEvent, Hit,\n  EventMutation, applyMutationToEventStore,\n  startOfDay,\n  elementClosest,\n  EventStore, getRelevantEvents, createEmptyEventStore,\n  EventInteractionState,\n  diffDates, enableCursor, disableCursor,\n  EventRenderRange, getElSeg,\n  EventApi,\n  eventDragMutationMassager,\n  Interaction, InteractionSettings, interactionSettingsStore,\n  EventDropTransformers,\n  CalendarContext,\n  ViewApi,\n  EventChangeArg,\n  buildEventApis,\n  EventAddArg,\n  EventRemoveArg,\n  isInteractionValid,\n  getElRoot,\n} from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { HitDragging, isHitsEqual } from './HitDragging'\nimport { FeaturefulElementDragging } from '../dnd/FeaturefulElementDragging'\nimport { buildDatePointApiWithContext } from '../utils'\n\nexport type EventDragStopArg = EventDragArg\nexport type EventDragStartArg = EventDragArg\n\nexport interface EventDragArg {\n  el: HTMLElement\n  event: EventApi\n  jsEvent: MouseEvent\n  view: ViewApi\n}\n\nexport class EventDragging extends Interaction { // TODO: rename to EventSelectingAndDragging\n  // TODO: test this in IE11\n  // QUESTION: why do we need it on the resizable???\n  static SELECTOR = '.fc-event-draggable, .fc-event-resizable'\n\n  dragging: FeaturefulElementDragging\n  hitDragging: HitDragging\n\n  // internal state\n  subjectEl: HTMLElement | null = null\n  subjectSeg: Seg | null = null // the seg being selected/dragged\n  isDragging: boolean = false\n  eventRange: EventRenderRange | null = null\n  relevantEvents: EventStore | null = null // the events being dragged\n  receivingContext: CalendarContext | null = null\n  validMutation: EventMutation | null = null\n  mutatedRelevantEvents: EventStore | null = null\n\n  constructor(settings: InteractionSettings) {\n    super(settings)\n    let { component } = this\n    let { options } = component.context\n\n    let dragging = this.dragging = new FeaturefulElementDragging(settings.el)\n    dragging.pointer.selector = EventDragging.SELECTOR\n    dragging.touchScrollAllowed = false\n    dragging.autoScroller.isEnabled = options.dragScroll\n\n    let hitDragging = this.hitDragging = new HitDragging(this.dragging, interactionSettingsStore)\n    hitDragging.useSubjectCenter = settings.useEventCenter\n    hitDragging.emitter.on('pointerdown', this.handlePointerDown)\n    hitDragging.emitter.on('dragstart', this.handleDragStart)\n    hitDragging.emitter.on('hitupdate', this.handleHitUpdate)\n    hitDragging.emitter.on('pointerup', this.handlePointerUp)\n    hitDragging.emitter.on('dragend', this.handleDragEnd)\n  }\n\n  destroy() {\n    this.dragging.destroy()\n  }\n\n  handlePointerDown = (ev: PointerDragEvent) => {\n    let origTarget = ev.origEvent.target as HTMLElement\n    let { component, dragging } = this\n    let { mirror } = dragging\n    let { options } = component.context\n    let initialContext = component.context\n    this.subjectEl = ev.subjectEl as HTMLElement\n    let subjectSeg = this.subjectSeg = getElSeg(ev.subjectEl as HTMLElement)!\n    let eventRange = this.eventRange = subjectSeg.eventRange!\n    let eventInstanceId = eventRange.instance!.instanceId\n\n    this.relevantEvents = getRelevantEvents(\n      initialContext.getCurrentData().eventStore,\n      eventInstanceId,\n    )\n\n    dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance\n    dragging.delay =\n      // only do a touch delay if touch and this event hasn't been selected yet\n      (ev.isTouch && eventInstanceId !== component.props.eventSelection) ?\n        getComponentTouchDelay(component) :\n        null\n\n    if (options.fixedMirrorParent) {\n      mirror.parentNode = options.fixedMirrorParent\n    } else {\n      mirror.parentNode = elementClosest(origTarget, '.fc')\n    }\n\n    mirror.revertDuration = options.dragRevertDuration\n\n    let isValid =\n      component.isValidSegDownEl(origTarget) &&\n      !elementClosest(origTarget, '.fc-event-resizer') // NOT on a resizer\n\n    dragging.setIgnoreMove(!isValid)\n\n    // disable dragging for elements that are resizable (ie, selectable)\n    // but are not draggable\n    this.isDragging = isValid &&\n      (ev.subjectEl as HTMLElement).classList.contains('fc-event-draggable')\n  }\n\n  handleDragStart = (ev: PointerDragEvent) => {\n    let initialContext = this.component.context\n    let eventRange = this.eventRange!\n    let eventInstanceId = eventRange.instance.instanceId\n\n    if (ev.isTouch) {\n      // need to select a different event?\n      if (eventInstanceId !== this.component.props.eventSelection) {\n        initialContext.dispatch({ type: 'SELECT_EVENT', eventInstanceId })\n      }\n    } else {\n      // if now using mouse, but was previous touch interaction, clear selected event\n      initialContext.dispatch({ type: 'UNSELECT_EVENT' })\n    }\n\n    if (this.isDragging) {\n      initialContext.calendarApi.unselect(ev) // unselect *date* selection\n      initialContext.emitter.trigger('eventDragStart', {\n        el: this.subjectEl,\n        event: new EventApi(initialContext, eventRange.def, eventRange.instance),\n        jsEvent: ev.origEvent as MouseEvent, // Is this always a mouse event? See #4655\n        view: initialContext.viewApi,\n      } as EventDragStartArg)\n    }\n  }\n\n  handleHitUpdate = (hit: Hit | null, isFinal: boolean) => {\n    if (!this.isDragging) {\n      return\n    }\n\n    let relevantEvents = this.relevantEvents!\n    let initialHit = this.hitDragging.initialHit!\n    let initialContext = this.component.context\n\n    // states based on new hit\n    let receivingContext: CalendarContext | null = null\n    let mutation: EventMutation | null = null\n    let mutatedRelevantEvents: EventStore | null = null\n    let isInvalid = false\n    let interaction: EventInteractionState = {\n      affectedEvents: relevantEvents,\n      mutatedEvents: createEmptyEventStore(),\n      isEvent: true,\n    }\n\n    if (hit) {\n      receivingContext = hit.context\n      let receivingOptions = receivingContext.options\n\n      if (\n        initialContext === receivingContext ||\n        (receivingOptions.editable && receivingOptions.droppable)\n      ) {\n        mutation = computeEventMutation(initialHit, hit, receivingContext.getCurrentData().pluginHooks.eventDragMutationMassagers)\n\n        if (mutation) {\n          mutatedRelevantEvents = applyMutationToEventStore(\n            relevantEvents,\n            receivingContext.getCurrentData().eventUiBases,\n            mutation,\n            receivingContext,\n          )\n          interaction.mutatedEvents = mutatedRelevantEvents\n\n          if (!isInteractionValid(interaction, hit.dateProfile, receivingContext)) {\n            isInvalid = true\n            mutation = null\n            mutatedRelevantEvents = null\n            interaction.mutatedEvents = createEmptyEventStore()\n          }\n        }\n      } else {\n        receivingContext = null\n      }\n    }\n\n    this.displayDrag(receivingContext, interaction)\n\n    if (!isInvalid) {\n      enableCursor()\n    } else {\n      disableCursor()\n    }\n\n    if (!isFinal) {\n      if (\n        initialContext === receivingContext && // TODO: write test for this\n        isHitsEqual(initialHit, hit)\n      ) {\n        mutation = null\n      }\n\n      this.dragging.setMirrorNeedsRevert(!mutation)\n\n      // render the mirror if no already-rendered mirror\n      // TODO: wish we could somehow wait for dispatch to guarantee render\n      this.dragging.setMirrorIsVisible(\n        !hit || !getElRoot(this.subjectEl).querySelector('.fc-event-mirror'), // TODO: turn className into constant\n      )\n\n      // assign states based on new hit\n      this.receivingContext = receivingContext\n      this.validMutation = mutation\n      this.mutatedRelevantEvents = mutatedRelevantEvents\n    }\n  }\n\n  handlePointerUp = () => {\n    if (!this.isDragging) {\n      this.cleanup() // because handleDragEnd won't fire\n    }\n  }\n\n  handleDragEnd = (ev: PointerDragEvent) => {\n    if (this.isDragging) {\n      let initialContext = this.component.context\n      let initialView = initialContext.viewApi\n      let { receivingContext, validMutation } = this\n      let eventDef = this.eventRange!.def\n      let eventInstance = this.eventRange!.instance\n      let eventApi = new EventApi(initialContext, eventDef, eventInstance)\n      let relevantEvents = this.relevantEvents!\n      let mutatedRelevantEvents = this.mutatedRelevantEvents!\n      let { finalHit } = this.hitDragging\n\n      this.clearDrag() // must happen after revert animation\n\n      initialContext.emitter.trigger('eventDragStop', {\n        el: this.subjectEl,\n        event: eventApi,\n        jsEvent: ev.origEvent as MouseEvent, // Is this always a mouse event? See #4655\n        view: initialView,\n      } as EventDragStopArg)\n\n      if (validMutation) {\n        // dropped within same calendar\n        if (receivingContext === initialContext) {\n          let updatedEventApi = new EventApi(\n            initialContext,\n            mutatedRelevantEvents.defs[eventDef.defId],\n            eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null,\n          )\n\n          initialContext.dispatch({\n            type: 'MERGE_EVENTS',\n            eventStore: mutatedRelevantEvents,\n          })\n\n          let eventChangeArg: EventChangeArg = {\n            oldEvent: eventApi,\n            event: updatedEventApi,\n            relatedEvents: buildEventApis(mutatedRelevantEvents, initialContext, eventInstance),\n            revert() {\n              initialContext.dispatch({\n                type: 'MERGE_EVENTS',\n                eventStore: relevantEvents, // the pre-change data\n              })\n            },\n          }\n\n          let transformed: ReturnType<EventDropTransformers> = {}\n          for (let transformer of initialContext.getCurrentData().pluginHooks.eventDropTransformers) {\n            __assign(transformed, transformer(validMutation, initialContext))\n          }\n\n          initialContext.emitter.trigger('eventDrop', {\n            ...eventChangeArg,\n            ...transformed,\n            el: ev.subjectEl as HTMLElement,\n            delta: validMutation.datesDelta!,\n            jsEvent: ev.origEvent as MouseEvent, // bad\n            view: initialView,\n          })\n\n          initialContext.emitter.trigger('eventChange', eventChangeArg)\n\n        // dropped in different calendar\n        } else if (receivingContext) {\n          let eventRemoveArg: EventRemoveArg = {\n            event: eventApi,\n            relatedEvents: buildEventApis(relevantEvents, initialContext, eventInstance),\n            revert() {\n              initialContext.dispatch({\n                type: 'MERGE_EVENTS',\n                eventStore: relevantEvents,\n              })\n            },\n          }\n\n          initialContext.emitter.trigger('eventLeave', {\n            ...eventRemoveArg,\n            draggedEl: ev.subjectEl as HTMLElement,\n            view: initialView,\n          })\n\n          initialContext.dispatch({\n            type: 'REMOVE_EVENTS',\n            eventStore: relevantEvents,\n          })\n\n          initialContext.emitter.trigger('eventRemove', eventRemoveArg)\n\n          let addedEventDef = mutatedRelevantEvents.defs[eventDef.defId]\n          let addedEventInstance = mutatedRelevantEvents.instances[eventInstance.instanceId]\n          let addedEventApi = new EventApi(receivingContext, addedEventDef, addedEventInstance)\n\n          receivingContext.dispatch({\n            type: 'MERGE_EVENTS',\n            eventStore: mutatedRelevantEvents,\n          })\n\n          let eventAddArg: EventAddArg = {\n            event: addedEventApi,\n            relatedEvents: buildEventApis(mutatedRelevantEvents, receivingContext, addedEventInstance),\n            revert() {\n              receivingContext.dispatch({\n                type: 'REMOVE_EVENTS',\n                eventStore: mutatedRelevantEvents,\n              })\n            },\n          }\n\n          receivingContext.emitter.trigger('eventAdd', eventAddArg)\n\n          if (ev.isTouch) {\n            receivingContext.dispatch({\n              type: 'SELECT_EVENT',\n              eventInstanceId: eventInstance.instanceId,\n            })\n          }\n\n          receivingContext.emitter.trigger('drop', {\n            ...buildDatePointApiWithContext(finalHit.dateSpan, receivingContext),\n            draggedEl: ev.subjectEl as HTMLElement,\n            jsEvent: ev.origEvent as MouseEvent, // Is this always a mouse event? See #4655\n            view: finalHit.context.viewApi,\n          })\n\n          receivingContext.emitter.trigger('eventReceive', {\n            ...eventAddArg,\n            draggedEl: ev.subjectEl as HTMLElement,\n            view: finalHit.context.viewApi,\n          })\n        }\n      } else {\n        initialContext.emitter.trigger('_noEventDrop')\n      }\n    }\n\n    this.cleanup()\n  }\n\n  // render a drag state on the next receivingCalendar\n  displayDrag(nextContext: CalendarContext | null, state: EventInteractionState) {\n    let initialContext = this.component.context\n    let prevContext = this.receivingContext\n\n    // does the previous calendar need to be cleared?\n    if (prevContext && prevContext !== nextContext) {\n      // does the initial calendar need to be cleared?\n      // if so, don't clear all the way. we still need to to hide the affectedEvents\n      if (prevContext === initialContext) {\n        prevContext.dispatch({\n          type: 'SET_EVENT_DRAG',\n          state: {\n            affectedEvents: state.affectedEvents,\n            mutatedEvents: createEmptyEventStore(),\n            isEvent: true,\n          },\n        })\n\n      // completely clear the old calendar if it wasn't the initial\n      } else {\n        prevContext.dispatch({ type: 'UNSET_EVENT_DRAG' })\n      }\n    }\n\n    if (nextContext) {\n      nextContext.dispatch({ type: 'SET_EVENT_DRAG', state })\n    }\n  }\n\n  clearDrag() {\n    let initialCalendar = this.component.context\n    let { receivingContext } = this\n\n    if (receivingContext) {\n      receivingContext.dispatch({ type: 'UNSET_EVENT_DRAG' })\n    }\n\n    // the initial calendar might have an dummy drag state from displayDrag\n    if (initialCalendar !== receivingContext) {\n      initialCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' })\n    }\n  }\n\n  cleanup() { // reset all internal state\n    this.subjectSeg = null\n    this.isDragging = false\n    this.eventRange = null\n    this.relevantEvents = null\n    this.receivingContext = null\n    this.validMutation = null\n    this.mutatedRelevantEvents = null\n  }\n}\n\nfunction computeEventMutation(hit0: Hit, hit1: Hit, massagers: eventDragMutationMassager[]): EventMutation {\n  let dateSpan0 = hit0.dateSpan\n  let dateSpan1 = hit1.dateSpan\n  let date0 = dateSpan0.range.start\n  let date1 = dateSpan1.range.start\n  let standardProps = {} as any\n\n  if (dateSpan0.allDay !== dateSpan1.allDay) {\n    standardProps.allDay = dateSpan1.allDay\n    standardProps.hasEnd = hit1.context.options.allDayMaintainDuration\n\n    if (dateSpan1.allDay) {\n      // means date1 is already start-of-day,\n      // but date0 needs to be converted\n      date0 = startOfDay(date0)\n    }\n  }\n\n  let delta = diffDates(\n    date0, date1,\n    hit0.context.dateEnv,\n    hit0.componentId === hit1.componentId ?\n      hit0.largeUnit :\n      null,\n  )\n\n  if (delta.milliseconds) { // has hours/minutes/seconds\n    standardProps.allDay = false\n  }\n\n  let mutation: EventMutation = {\n    datesDelta: delta,\n    standardProps,\n  }\n\n  for (let massager of massagers) {\n    massager(mutation, hit0, hit1)\n  }\n\n  return mutation\n}\n\nfunction getComponentTouchDelay(component: DateComponent<any>): number | null {\n  let { options } = component.context\n  let delay = options.eventLongPressDelay\n\n  if (delay == null) {\n    delay = options.longPressDelay\n  }\n\n  return delay\n}\n","import {\n  Seg, Hit,\n  EventMutation, applyMutationToEventStore,\n  elementClosest,\n  PointerDragEvent,\n  EventStore, getRelevantEvents, createEmptyEventStore,\n  diffDates, enableCursor, disableCursor,\n  DateRange,\n  EventApi,\n  EventRenderRange, getElSeg,\n  createDuration,\n  EventInteractionState,\n  Interaction, InteractionSettings, interactionSettingsToStore, ViewApi, Duration, EventChangeArg, buildEventApis, isInteractionValid,\n} from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { HitDragging, isHitsEqual } from './HitDragging'\nimport { FeaturefulElementDragging } from '../dnd/FeaturefulElementDragging'\n\nexport type EventResizeStartArg = EventResizeStartStopArg\nexport type EventResizeStopArg = EventResizeStartStopArg\n\nexport interface EventResizeStartStopArg {\n  el: HTMLElement\n  event: EventApi\n  jsEvent: MouseEvent\n  view: ViewApi\n}\n\nexport interface EventResizeDoneArg extends EventChangeArg {\n  el: HTMLElement\n  startDelta: Duration\n  endDelta: Duration\n  jsEvent: MouseEvent\n  view: ViewApi\n}\n\nexport class EventResizing extends Interaction {\n  dragging: FeaturefulElementDragging\n  hitDragging: HitDragging\n\n  // internal state\n  draggingSegEl: HTMLElement | null = null\n  draggingSeg: Seg | null = null // TODO: rename to resizingSeg? subjectSeg?\n  eventRange: EventRenderRange | null = null\n  relevantEvents: EventStore | null = null\n  validMutation: EventMutation | null = null\n  mutatedRelevantEvents: EventStore | null = null\n\n  constructor(settings: InteractionSettings) {\n    super(settings)\n    let { component } = settings\n\n    let dragging = this.dragging = new FeaturefulElementDragging(settings.el)\n    dragging.pointer.selector = '.fc-event-resizer'\n    dragging.touchScrollAllowed = false\n    dragging.autoScroller.isEnabled = component.context.options.dragScroll\n\n    let hitDragging = this.hitDragging = new HitDragging(this.dragging, interactionSettingsToStore(settings))\n    hitDragging.emitter.on('pointerdown', this.handlePointerDown)\n    hitDragging.emitter.on('dragstart', this.handleDragStart)\n    hitDragging.emitter.on('hitupdate', this.handleHitUpdate)\n    hitDragging.emitter.on('dragend', this.handleDragEnd)\n  }\n\n  destroy() {\n    this.dragging.destroy()\n  }\n\n  handlePointerDown = (ev: PointerDragEvent) => {\n    let { component } = this\n    let segEl = this.querySegEl(ev)\n    let seg = getElSeg(segEl)\n    let eventRange = this.eventRange = seg.eventRange!\n\n    this.dragging.minDistance = component.context.options.eventDragMinDistance\n\n    // if touch, need to be working with a selected event\n    this.dragging.setIgnoreMove(\n      !this.component.isValidSegDownEl(ev.origEvent.target as HTMLElement) ||\n      (ev.isTouch && this.component.props.eventSelection !== eventRange.instance!.instanceId),\n    )\n  }\n\n  handleDragStart = (ev: PointerDragEvent) => {\n    let { context } = this.component\n    let eventRange = this.eventRange!\n\n    this.relevantEvents = getRelevantEvents(\n      context.getCurrentData().eventStore,\n      this.eventRange.instance!.instanceId,\n    )\n\n    let segEl = this.querySegEl(ev)\n    this.draggingSegEl = segEl\n    this.draggingSeg = getElSeg(segEl)\n\n    context.calendarApi.unselect()\n    context.emitter.trigger('eventResizeStart', {\n      el: segEl,\n      event: new EventApi(context, eventRange.def, eventRange.instance),\n      jsEvent: ev.origEvent as MouseEvent, // Is this always a mouse event? See #4655\n      view: context.viewApi,\n    } as EventResizeStartArg)\n  }\n\n  handleHitUpdate = (hit: Hit | null, isFinal: boolean, ev: PointerDragEvent) => {\n    let { context } = this.component\n    let relevantEvents = this.relevantEvents!\n    let initialHit = this.hitDragging.initialHit!\n    let eventInstance = this.eventRange.instance!\n    let mutation: EventMutation | null = null\n    let mutatedRelevantEvents: EventStore | null = null\n    let isInvalid = false\n    let interaction: EventInteractionState = {\n      affectedEvents: relevantEvents,\n      mutatedEvents: createEmptyEventStore(),\n      isEvent: true,\n    }\n\n    if (hit) {\n      let disallowed = hit.componentId === initialHit.componentId\n        && this.isHitComboAllowed\n        && !this.isHitComboAllowed(initialHit, hit)\n\n      if (!disallowed) {\n        mutation = computeMutation(\n          initialHit,\n          hit,\n          (ev.subjectEl as HTMLElement).classList.contains('fc-event-resizer-start'),\n          eventInstance.range,\n        )\n      }\n    }\n\n    if (mutation) {\n      mutatedRelevantEvents = applyMutationToEventStore(relevantEvents, context.getCurrentData().eventUiBases, mutation, context)\n      interaction.mutatedEvents = mutatedRelevantEvents\n\n      if (!isInteractionValid(interaction, hit.dateProfile, context)) {\n        isInvalid = true\n        mutation = null\n        mutatedRelevantEvents = null\n        interaction.mutatedEvents = null\n      }\n    }\n\n    if (mutatedRelevantEvents) {\n      context.dispatch({\n        type: 'SET_EVENT_RESIZE',\n        state: interaction,\n      })\n    } else {\n      context.dispatch({ type: 'UNSET_EVENT_RESIZE' })\n    }\n\n    if (!isInvalid) {\n      enableCursor()\n    } else {\n      disableCursor()\n    }\n\n    if (!isFinal) {\n      if (mutation && isHitsEqual(initialHit, hit)) {\n        mutation = null\n      }\n\n      this.validMutation = mutation\n      this.mutatedRelevantEvents = mutatedRelevantEvents\n    }\n  }\n\n  handleDragEnd = (ev: PointerDragEvent) => {\n    let { context } = this.component\n    let eventDef = this.eventRange!.def\n    let eventInstance = this.eventRange!.instance\n    let eventApi = new EventApi(context, eventDef, eventInstance)\n    let relevantEvents = this.relevantEvents!\n    let mutatedRelevantEvents = this.mutatedRelevantEvents!\n\n    context.emitter.trigger('eventResizeStop', {\n      el: this.draggingSegEl,\n      event: eventApi,\n      jsEvent: ev.origEvent as MouseEvent, // Is this always a mouse event? See #4655\n      view: context.viewApi,\n    } as EventResizeStopArg)\n\n    if (this.validMutation) {\n      let updatedEventApi = new EventApi(\n        context,\n        mutatedRelevantEvents.defs[eventDef.defId],\n        eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null,\n      )\n\n      context.dispatch({\n        type: 'MERGE_EVENTS',\n        eventStore: mutatedRelevantEvents,\n      })\n\n      let eventChangeArg: EventChangeArg = {\n        oldEvent: eventApi,\n        event: updatedEventApi,\n        relatedEvents: buildEventApis(mutatedRelevantEvents, context, eventInstance),\n        revert() {\n          context.dispatch({\n            type: 'MERGE_EVENTS',\n            eventStore: relevantEvents, // the pre-change events\n          })\n        },\n      }\n\n      context.emitter.trigger('eventResize', {\n        ...eventChangeArg,\n        el: this.draggingSegEl,\n        startDelta: this.validMutation.startDelta || createDuration(0),\n        endDelta: this.validMutation.endDelta || createDuration(0),\n        jsEvent: ev.origEvent as MouseEvent,\n        view: context.viewApi,\n      })\n\n      context.emitter.trigger('eventChange', eventChangeArg)\n    } else {\n      context.emitter.trigger('_noEventResize')\n    }\n\n    // reset all internal state\n    this.draggingSeg = null\n    this.relevantEvents = null\n    this.validMutation = null\n\n    // okay to keep eventInstance around. useful to set it in handlePointerDown\n  }\n\n  querySegEl(ev: PointerDragEvent) {\n    return elementClosest(ev.subjectEl as HTMLElement, '.fc-event')\n  }\n}\n\nfunction computeMutation(\n  hit0: Hit,\n  hit1: Hit,\n  isFromStart: boolean,\n  instanceRange: DateRange,\n): EventMutation | null {\n  let dateEnv = hit0.context.dateEnv\n  let date0 = hit0.dateSpan.range.start\n  let date1 = hit1.dateSpan.range.start\n\n  let delta = diffDates(\n    date0, date1,\n    dateEnv,\n    hit0.largeUnit,\n  )\n\n  if (isFromStart) {\n    if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {\n      return { startDelta: delta }\n    }\n  } else if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {\n    return { endDelta: delta }\n  }\n\n  return null\n}\n","import {\n  DateSelectionApi,\n  PointerDragEvent,\n  elementClosest,\n  CalendarContext,\n  getEventTargetViaRoot,\n} from '@fullcalendar/common'\nimport { PointerDragging } from '../dnd/PointerDragging'\nimport { EventDragging } from './EventDragging'\n\nexport class UnselectAuto {\n  documentPointer: PointerDragging // for unfocusing\n  isRecentPointerDateSelect = false // wish we could use a selector to detect date selection, but uses hit system\n  matchesCancel = false\n  matchesEvent = false\n\n  constructor(private context: CalendarContext) {\n    let documentPointer = this.documentPointer = new PointerDragging(document)\n    documentPointer.shouldIgnoreMove = true\n    documentPointer.shouldWatchScroll = false\n    documentPointer.emitter.on('pointerdown', this.onDocumentPointerDown)\n    documentPointer.emitter.on('pointerup', this.onDocumentPointerUp)\n\n    /*\n    TODO: better way to know about whether there was a selection with the pointer\n    */\n    context.emitter.on('select', this.onSelect)\n  }\n\n  destroy() {\n    this.context.emitter.off('select', this.onSelect)\n    this.documentPointer.destroy()\n  }\n\n  onSelect = (selectInfo: DateSelectionApi) => {\n    if (selectInfo.jsEvent) {\n      this.isRecentPointerDateSelect = true\n    }\n  }\n\n  onDocumentPointerDown = (pev: PointerDragEvent) => {\n    let unselectCancel = this.context.options.unselectCancel\n    let downEl = getEventTargetViaRoot(pev.origEvent) as HTMLElement\n\n    this.matchesCancel = !!elementClosest(downEl, unselectCancel)\n    this.matchesEvent = !!elementClosest(downEl, EventDragging.SELECTOR) // interaction started on an event?\n  }\n\n  onDocumentPointerUp = (pev: PointerDragEvent) => {\n    let { context } = this\n    let { documentPointer } = this\n    let calendarState = context.getCurrentData()\n\n    // touch-scrolling should never unfocus any type of selection\n    if (!documentPointer.wasTouchScroll) {\n      if (\n        calendarState.dateSelection && // an existing date selection?\n        !this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?\n      ) {\n        let unselectAuto = context.options.unselectAuto\n\n        if (unselectAuto && (!unselectAuto || !this.matchesCancel)) {\n          context.calendarApi.unselect(pev)\n        }\n      }\n\n      if (\n        calendarState.eventSelection && // an existing event selected?\n        !this.matchesEvent // interaction DIDN'T start on an event\n      ) {\n        context.dispatch({ type: 'UNSELECT_EVENT' })\n      }\n    }\n\n    this.isRecentPointerDateSelect = false\n  }\n}\n","import { identity, Identity, EventDropArg } from '@fullcalendar/common'\n\n// public\nimport {\n  DateClickArg,\n  EventDragStartArg, EventDragStopArg,\n  EventResizeStartArg, EventResizeStopArg, EventResizeDoneArg,\n  DropArg, EventReceiveArg, EventLeaveArg,\n} from './api-type-deps'\n\nexport const OPTION_REFINERS = {\n  fixedMirrorParent: identity as Identity<HTMLElement>,\n}\n\nexport const LISTENER_REFINERS = {\n  dateClick: identity as Identity<(arg: DateClickArg) => void>,\n  eventDragStart: identity as Identity<(arg: EventDragStartArg) => void>,\n  eventDragStop: identity as Identity<(arg: EventDragStopArg) => void>,\n  eventDrop: identity as Identity<(arg: EventDropArg) => void>,\n  eventResizeStart: identity as Identity<(arg: EventResizeStartArg) => void>,\n  eventResizeStop: identity as Identity<(arg: EventResizeStopArg) => void>,\n  eventResize: identity as Identity<(arg: EventResizeDoneArg) => void>,\n  drop: identity as Identity<(arg: DropArg) => void>,\n  eventReceive: identity as Identity<(arg: EventReceiveArg) => void>,\n  eventLeave: identity as Identity<(arg: EventLeaveArg) => void>,\n}\n","import {\n  Hit,\n  interactionSettingsStore,\n  PointerDragEvent,\n  parseEventDef, createEventInstance, EventTuple,\n  createEmptyEventStore, eventTupleToStore,\n  config,\n  DateSpan, DatePointApi,\n  EventInteractionState,\n  DragMetaInput, DragMeta, parseDragMeta,\n  EventApi,\n  elementMatches,\n  enableCursor, disableCursor,\n  isInteractionValid,\n  ElementDragging,\n  ViewApi,\n  CalendarContext,\n  getDefaultEventEnd,\n  refineEventDef,\n} from '@fullcalendar/common'\nimport { __assign } from 'tslib'\nimport { HitDragging } from '../interactions/HitDragging'\nimport { buildDatePointApiWithContext } from '../utils'\n\nexport type DragMetaGenerator = DragMetaInput | ((el: HTMLElement) => DragMetaInput)\n\nexport interface ExternalDropApi extends DatePointApi {\n  draggedEl: HTMLElement\n  jsEvent: UIEvent\n  view: ViewApi\n}\n\n/*\nGiven an already instantiated draggable object for one-or-more elements,\nInterprets any dragging as an attempt to drag an events that lives outside\nof a calendar onto a calendar.\n*/\nexport class ExternalElementDragging {\n  hitDragging: HitDragging\n  receivingContext: CalendarContext | null = null\n  droppableEvent: EventTuple | null = null // will exist for all drags, even if create:false\n  suppliedDragMeta: DragMetaGenerator | null = null\n  dragMeta: DragMeta | null = null\n\n  constructor(dragging: ElementDragging, suppliedDragMeta?: DragMetaGenerator) {\n    let hitDragging = this.hitDragging = new HitDragging(dragging, interactionSettingsStore)\n    hitDragging.requireInitial = false // will start outside of a component\n    hitDragging.emitter.on('dragstart', this.handleDragStart)\n    hitDragging.emitter.on('hitupdate', this.handleHitUpdate)\n    hitDragging.emitter.on('dragend', this.handleDragEnd)\n\n    this.suppliedDragMeta = suppliedDragMeta\n  }\n\n  handleDragStart = (ev: PointerDragEvent) => {\n    this.dragMeta = this.buildDragMeta(ev.subjectEl as HTMLElement)\n  }\n\n  buildDragMeta(subjectEl: HTMLElement) {\n    if (typeof this.suppliedDragMeta === 'object') {\n      return parseDragMeta(this.suppliedDragMeta)\n    }\n    if (typeof this.suppliedDragMeta === 'function') {\n      return parseDragMeta(this.suppliedDragMeta(subjectEl))\n    }\n    return getDragMetaFromEl(subjectEl)\n  }\n\n  handleHitUpdate = (hit: Hit | null, isFinal: boolean, ev: PointerDragEvent) => {\n    let { dragging } = this.hitDragging\n    let receivingContext: CalendarContext | null = null\n    let droppableEvent: EventTuple | null = null\n    let isInvalid = false\n    let interaction: EventInteractionState = {\n      affectedEvents: createEmptyEventStore(),\n      mutatedEvents: createEmptyEventStore(),\n      isEvent: this.dragMeta!.create,\n    }\n\n    if (hit) {\n      receivingContext = hit.context\n\n      if (this.canDropElOnCalendar(ev.subjectEl as HTMLElement, receivingContext)) {\n        droppableEvent = computeEventForDateSpan(\n          hit.dateSpan,\n          this.dragMeta!,\n          receivingContext,\n        )\n\n        interaction.mutatedEvents = eventTupleToStore(droppableEvent)\n        isInvalid = !isInteractionValid(interaction, hit.dateProfile, receivingContext)\n\n        if (isInvalid) {\n          interaction.mutatedEvents = createEmptyEventStore()\n          droppableEvent = null\n        }\n      }\n    }\n\n    this.displayDrag(receivingContext, interaction)\n\n    // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)\n    // TODO: wish we could somehow wait for dispatch to guarantee render\n    dragging.setMirrorIsVisible(\n      isFinal || !droppableEvent || !document.querySelector('.fc-event-mirror'), // TODO: turn className into constant\n      // TODO: somehow query FullCalendars WITHIN shadow-roots for existing event-mirror els\n    )\n\n    if (!isInvalid) {\n      enableCursor()\n    } else {\n      disableCursor()\n    }\n\n    if (!isFinal) {\n      dragging.setMirrorNeedsRevert(!droppableEvent)\n\n      this.receivingContext = receivingContext\n      this.droppableEvent = droppableEvent\n    }\n  }\n\n  handleDragEnd = (pev: PointerDragEvent) => {\n    let { receivingContext, droppableEvent } = this\n\n    this.clearDrag()\n\n    if (receivingContext && droppableEvent) {\n      let finalHit = this.hitDragging.finalHit!\n      let finalView = finalHit.context.viewApi\n      let dragMeta = this.dragMeta!\n\n      receivingContext.emitter.trigger('drop', {\n        ...buildDatePointApiWithContext(finalHit.dateSpan, receivingContext),\n        draggedEl: pev.subjectEl as HTMLElement,\n        jsEvent: pev.origEvent as MouseEvent, // Is this always a mouse event? See #4655\n        view: finalView,\n      })\n\n      if (dragMeta.create) {\n        let addingEvents = eventTupleToStore(droppableEvent)\n\n        receivingContext.dispatch({\n          type: 'MERGE_EVENTS',\n          eventStore: addingEvents,\n        })\n\n        if (pev.isTouch) {\n          receivingContext.dispatch({\n            type: 'SELECT_EVENT',\n            eventInstanceId: droppableEvent.instance.instanceId,\n          })\n        }\n\n        // signal that an external event landed\n        receivingContext.emitter.trigger('eventReceive', {\n          event: new EventApi(\n            receivingContext,\n            droppableEvent.def,\n            droppableEvent.instance,\n          ),\n          relatedEvents: [],\n          revert() {\n            receivingContext.dispatch({\n              type: 'REMOVE_EVENTS',\n              eventStore: addingEvents,\n            })\n          },\n          draggedEl: pev.subjectEl as HTMLElement,\n          view: finalView,\n        })\n      }\n    }\n\n    this.receivingContext = null\n    this.droppableEvent = null\n  }\n\n  displayDrag(nextContext: CalendarContext | null, state: EventInteractionState) {\n    let prevContext = this.receivingContext\n\n    if (prevContext && prevContext !== nextContext) {\n      prevContext.dispatch({ type: 'UNSET_EVENT_DRAG' })\n    }\n\n    if (nextContext) {\n      nextContext.dispatch({ type: 'SET_EVENT_DRAG', state })\n    }\n  }\n\n  clearDrag() {\n    if (this.receivingContext) {\n      this.receivingContext.dispatch({ type: 'UNSET_EVENT_DRAG' })\n    }\n  }\n\n  canDropElOnCalendar(el: HTMLElement, receivingContext: CalendarContext): boolean {\n    let dropAccept = receivingContext.options.dropAccept\n\n    if (typeof dropAccept === 'function') {\n      return dropAccept.call(receivingContext.calendarApi, el)\n    }\n\n    if (typeof dropAccept === 'string' && dropAccept) {\n      return Boolean(elementMatches(el, dropAccept))\n    }\n\n    return true\n  }\n}\n\n// Utils for computing event store from the DragMeta\n// ----------------------------------------------------------------------------------------------------\n\nfunction computeEventForDateSpan(dateSpan: DateSpan, dragMeta: DragMeta, context: CalendarContext): EventTuple {\n  let defProps = { ...dragMeta.leftoverProps }\n\n  for (let transform of context.pluginHooks.externalDefTransforms) {\n    __assign(defProps, transform(dateSpan, dragMeta))\n  }\n\n  let { refined, extra } = refineEventDef(defProps, context)\n  let def = parseEventDef(\n    refined,\n    extra,\n    dragMeta.sourceId,\n    dateSpan.allDay,\n    context.options.forceEventDuration || Boolean(dragMeta.duration), // hasEnd\n    context,\n  )\n\n  let start = dateSpan.range.start\n\n  // only rely on time info if drop zone is all-day,\n  // otherwise, we already know the time\n  if (dateSpan.allDay && dragMeta.startTime) {\n    start = context.dateEnv.add(start, dragMeta.startTime)\n  }\n\n  let end = dragMeta.duration ?\n    context.dateEnv.add(start, dragMeta.duration) :\n    getDefaultEventEnd(dateSpan.allDay, start, context)\n\n  let instance = createEventInstance(def.defId, { start, end })\n\n  return { def, instance }\n}\n\n// Utils for extracting data from element\n// ----------------------------------------------------------------------------------------------------\n\nfunction getDragMetaFromEl(el: HTMLElement): DragMeta {\n  let str = getEmbeddedElData(el, 'event')\n  let obj = str ?\n    JSON.parse(str) :\n    { create: false } // if no embedded data, assume no event creation\n\n  return parseDragMeta(obj)\n}\n\nconfig.dataAttrPrefix = ''\n\nfunction getEmbeddedElData(el: HTMLElement, name: string): string {\n  let prefix = config.dataAttrPrefix\n  let prefixedName = (prefix ? prefix + '-' : '') + name\n\n  return el.getAttribute('data-' + prefixedName) || ''\n}\n","import { BASE_OPTION_DEFAULTS, PointerDragEvent } from '@fullcalendar/common'\nimport { FeaturefulElementDragging } from '../dnd/FeaturefulElementDragging'\nimport { ExternalElementDragging, DragMetaGenerator } from './ExternalElementDragging'\n\nexport interface ExternalDraggableSettings {\n  eventData?: DragMetaGenerator\n  itemSelector?: string\n  minDistance?: number\n  longPressDelay?: number\n  appendTo?: HTMLElement\n}\n\n/*\nMakes an element (that is *external* to any calendar) draggable.\nCan pass in data that determines how an event will be created when dropped onto a calendar.\nLeverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.\n*/\nexport class ExternalDraggable {\n  dragging: FeaturefulElementDragging\n  settings: ExternalDraggableSettings\n\n  constructor(el: HTMLElement, settings: ExternalDraggableSettings = {}) {\n    this.settings = settings\n\n    let dragging = this.dragging = new FeaturefulElementDragging(el)\n    dragging.touchScrollAllowed = false\n\n    if (settings.itemSelector != null) {\n      dragging.pointer.selector = settings.itemSelector\n    }\n\n    if (settings.appendTo != null) {\n      dragging.mirror.parentNode = settings.appendTo // TODO: write tests\n    }\n\n    dragging.emitter.on('pointerdown', this.handlePointerDown)\n    dragging.emitter.on('dragstart', this.handleDragStart)\n\n    new ExternalElementDragging(dragging, settings.eventData) // eslint-disable-line no-new\n  }\n\n  handlePointerDown = (ev: PointerDragEvent) => {\n    let { dragging } = this\n    let { minDistance, longPressDelay } = this.settings\n\n    dragging.minDistance =\n      minDistance != null ?\n        minDistance :\n        (ev.isTouch ? 0 : BASE_OPTION_DEFAULTS.eventDragMinDistance)\n\n    dragging.delay =\n      ev.isTouch ? // TODO: eventually read eventLongPressDelay instead vvv\n        (longPressDelay != null ? longPressDelay : BASE_OPTION_DEFAULTS.longPressDelay) :\n        0\n  }\n\n  handleDragStart = (ev: PointerDragEvent) => {\n    if (\n      ev.isTouch &&\n      this.dragging.delay &&\n      (ev.subjectEl as HTMLElement).classList.contains('fc-event')\n    ) {\n      this.dragging.mirror.getMirrorEl().classList.add('fc-event-selected')\n    }\n  }\n\n  destroy() {\n    this.dragging.destroy()\n  }\n}\n","import { PointerDragEvent, ElementDragging } from '@fullcalendar/common'\nimport { PointerDragging } from '../dnd/PointerDragging'\n\n/*\nDetects when a *THIRD-PARTY* drag-n-drop system interacts with elements.\nThe third-party system is responsible for drawing the visuals effects of the drag.\nThis class simply monitors for pointer movements and fires events.\nIt also has the ability to hide the moving element (the \"mirror\") during the drag.\n*/\nexport class InferredElementDragging extends ElementDragging {\n  pointer: PointerDragging\n  shouldIgnoreMove: boolean = false\n  mirrorSelector: string = ''\n  currentMirrorEl: HTMLElement | null = null\n\n  constructor(containerEl: HTMLElement) {\n    super(containerEl)\n\n    let pointer = this.pointer = new PointerDragging(containerEl)\n    pointer.emitter.on('pointerdown', this.handlePointerDown)\n    pointer.emitter.on('pointermove', this.handlePointerMove)\n    pointer.emitter.on('pointerup', this.handlePointerUp)\n  }\n\n  destroy() {\n    this.pointer.destroy()\n  }\n\n  handlePointerDown = (ev: PointerDragEvent) => {\n    this.emitter.trigger('pointerdown', ev)\n\n    if (!this.shouldIgnoreMove) {\n      // fire dragstart right away. does not support delay or min-distance\n      this.emitter.trigger('dragstart', ev)\n    }\n  }\n\n  handlePointerMove = (ev: PointerDragEvent) => {\n    if (!this.shouldIgnoreMove) {\n      this.emitter.trigger('dragmove', ev)\n    }\n  }\n\n  handlePointerUp = (ev: PointerDragEvent) => {\n    this.emitter.trigger('pointerup', ev)\n\n    if (!this.shouldIgnoreMove) {\n      // fire dragend right away. does not support a revert animation\n      this.emitter.trigger('dragend', ev)\n    }\n  }\n\n  setIgnoreMove(bool: boolean) {\n    this.shouldIgnoreMove = bool\n  }\n\n  setMirrorIsVisible(bool: boolean) {\n    if (bool) {\n      // restore a previously hidden element.\n      // use the reference in case the selector class has already been removed.\n      if (this.currentMirrorEl) {\n        this.currentMirrorEl.style.visibility = ''\n        this.currentMirrorEl = null\n      }\n    } else {\n      let mirrorEl = this.mirrorSelector\n        // TODO: somehow query FullCalendars WITHIN shadow-roots\n        ? document.querySelector(this.mirrorSelector) as HTMLElement\n        : null\n\n      if (mirrorEl) {\n        this.currentMirrorEl = mirrorEl\n        mirrorEl.style.visibility = 'hidden'\n      }\n    }\n  }\n}\n","import { ExternalElementDragging, DragMetaGenerator } from './ExternalElementDragging'\nimport { InferredElementDragging } from './InferredElementDragging'\n\nexport interface ThirdPartyDraggableSettings {\n  eventData?: DragMetaGenerator\n  itemSelector?: string\n  mirrorSelector?: string\n}\n\n/*\nBridges third-party drag-n-drop systems with FullCalendar.\nMust be instantiated and destroyed by caller.\n*/\nexport class ThirdPartyDraggable {\n  dragging: InferredElementDragging\n\n  constructor(\n    containerOrSettings?: EventTarget | ThirdPartyDraggableSettings,\n    settings?: ThirdPartyDraggableSettings,\n  ) {\n    let containerEl: EventTarget = document\n\n    if (\n      // wish we could just test instanceof EventTarget, but doesn't work in IE11\n      containerOrSettings === document ||\n      containerOrSettings instanceof Element\n    ) {\n      containerEl = containerOrSettings as EventTarget\n      settings = settings || {}\n    } else {\n      settings = (containerOrSettings || {}) as ThirdPartyDraggableSettings\n    }\n\n    let dragging = this.dragging = new InferredElementDragging(containerEl as HTMLElement)\n\n    if (typeof settings.itemSelector === 'string') {\n      dragging.pointer.selector = settings.itemSelector\n    } else if (containerEl === document) {\n      dragging.pointer.selector = '[data-event]'\n    }\n\n    if (typeof settings.mirrorSelector === 'string') {\n      dragging.mirrorSelector = settings.mirrorSelector\n    }\n\n    new ExternalElementDragging(dragging, settings.eventData) // eslint-disable-line no-new\n  }\n\n  destroy() {\n    this.dragging.destroy()\n  }\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { DateClicking } from './interactions/DateClicking'\nimport { DateSelecting } from './interactions/DateSelecting'\nimport { EventDragging } from './interactions/EventDragging'\nimport { EventResizing } from './interactions/EventResizing'\nimport { UnselectAuto } from './interactions/UnselectAuto'\nimport { FeaturefulElementDragging } from './dnd/FeaturefulElementDragging'\nimport { OPTION_REFINERS, LISTENER_REFINERS } from './options'\nimport './options-declare'\n\nexport default createPlugin({\n  componentInteractions: [DateClicking, DateSelecting, EventDragging, EventResizing],\n  calendarInteractions: [UnselectAuto],\n  elementDraggingImpl: FeaturefulElementDragging,\n  optionRefiners: OPTION_REFINERS,\n  listenerRefiners: LISTENER_REFINERS,\n})\n\nexport * from './api-type-deps'\nexport { FeaturefulElementDragging }\nexport { PointerDragging } from './dnd/PointerDragging'\nexport { ExternalDraggable as Draggable } from './interactions-external/ExternalDraggable'\nexport { ThirdPartyDraggable } from './interactions-external/ThirdPartyDraggable'\n"]},"metadata":{},"sourceType":"module"}